(function () {
	'use strict';

	const node_env = globalThis.process?.env?.NODE_ENV;
	var DEV = node_env && !node_env.toLowerCase().startsWith('prod');

	// Store the references to globals in case someone tries to monkey patch these, causing the below
	// to de-opt (this occurs often when using popular extensions).
	var is_array = Array.isArray;
	var index_of = Array.prototype.indexOf;
	var array_from = Array.from;
	var define_property = Object.defineProperty;
	var get_descriptor = Object.getOwnPropertyDescriptor;
	var object_prototype = Object.prototype;
	var array_prototype = Array.prototype;
	var get_prototype_of = Object.getPrototypeOf;
	var is_extensible = Object.isExtensible;

	/** @param {Array<() => void>} arr */
	function run_all(arr) {
		for (var i = 0; i < arr.length; i++) {
			arr[i]();
		}
	}

	/**
	 * TODO replace with Promise.withResolvers once supported widely enough
	 * @template T
	 */
	function deferred() {
		/** @type {(value: T) => void} */
		var resolve;

		/** @type {(reason: any) => void} */
		var reject;

		/** @type {Promise<T>} */
		var promise = new Promise((res, rej) => {
			resolve = res;
			reject = rej;
		});

		// @ts-expect-error
		return { promise, resolve, reject };
	}

	const DERIVED = 1 << 1;
	const EFFECT = 1 << 2;
	const RENDER_EFFECT = 1 << 3;
	const BLOCK_EFFECT = 1 << 4;
	const BRANCH_EFFECT = 1 << 5;
	const ROOT_EFFECT = 1 << 6;
	const BOUNDARY_EFFECT = 1 << 7;
	const UNOWNED = 1 << 8;
	const DISCONNECTED = 1 << 9;
	const CLEAN = 1 << 10;
	const DIRTY = 1 << 11;
	const MAYBE_DIRTY = 1 << 12;
	const INERT = 1 << 13;
	const DESTROYED = 1 << 14;
	const EFFECT_RAN = 1 << 15;
	/** 'Transparent' effects do not create a transition boundary */
	const EFFECT_TRANSPARENT = 1 << 16;
	const INSPECT_EFFECT = 1 << 17;
	const HEAD_EFFECT = 1 << 18;
	const EFFECT_PRESERVED = 1 << 19;
	const USER_EFFECT = 1 << 20;

	// Flags used for async
	const REACTION_IS_UPDATING = 1 << 21;
	const ASYNC = 1 << 22;

	const ERROR_VALUE = 1 << 23;

	const STATE_SYMBOL = Symbol('$state');
	const LEGACY_PROPS = Symbol('legacy props');
	const PROXY_PATH_SYMBOL = Symbol('proxy path');

	/** allow users to ignore aborted signal errors if `reason.name === 'StaleReactionError` */
	const STALE_REACTION = new (class StaleReactionError extends Error {
		name = 'StaleReactionError';
		message = 'The reaction that called `getAbortSignal()` was re-run or destroyed';
	})();

	const ELEMENT_NODE = 1;
	const DOCUMENT_FRAGMENT_NODE = 11;

	/* This file is generated by scripts/process-messages/index.js. Do not edit! */


	/**
	 * Cannot await outside a `<svelte:boundary>` with a `pending` snippet
	 * @returns {never}
	 */
	function await_outside_boundary() {
		if (DEV) {
			const error = new Error(`await_outside_boundary\nCannot await outside a \`<svelte:boundary>\` with a \`pending\` snippet\nhttps://svelte.dev/e/await_outside_boundary`);

			error.name = 'Svelte error';

			throw error;
		} else {
			throw new Error(`https://svelte.dev/e/await_outside_boundary`);
		}
	}

	/**
	 * `%name%(...)` can only be used during component initialisation
	 * @param {string} name
	 * @returns {never}
	 */
	function lifecycle_outside_component(name) {
		if (DEV) {
			const error = new Error(`lifecycle_outside_component\n\`${name}(...)\` can only be used during component initialisation\nhttps://svelte.dev/e/lifecycle_outside_component`);

			error.name = 'Svelte error';

			throw error;
		} else {
			throw new Error(`https://svelte.dev/e/lifecycle_outside_component`);
		}
	}

	/* This file is generated by scripts/process-messages/index.js. Do not edit! */


	/**
	 * Cannot create a `$derived(...)` with an `await` expression outside of an effect tree
	 * @returns {never}
	 */
	function async_derived_orphan() {
		if (DEV) {
			const error = new Error(`async_derived_orphan\nCannot create a \`$derived(...)\` with an \`await\` expression outside of an effect tree\nhttps://svelte.dev/e/async_derived_orphan`);

			error.name = 'Svelte error';

			throw error;
		} else {
			throw new Error(`https://svelte.dev/e/async_derived_orphan`);
		}
	}

	/**
	 * Calling `%method%` on a component instance (of %component%) is no longer valid in Svelte 5
	 * @param {string} method
	 * @param {string} component
	 * @returns {never}
	 */
	function component_api_changed(method, component) {
		if (DEV) {
			const error = new Error(`component_api_changed\nCalling \`${method}\` on a component instance (of ${component}) is no longer valid in Svelte 5\nhttps://svelte.dev/e/component_api_changed`);

			error.name = 'Svelte error';

			throw error;
		} else {
			throw new Error(`https://svelte.dev/e/component_api_changed`);
		}
	}

	/**
	 * Attempted to instantiate %component% with `new %name%`, which is no longer valid in Svelte 5. If this component is not under your control, set the `compatibility.componentApi` compiler option to `4` to keep it working.
	 * @param {string} component
	 * @param {string} name
	 * @returns {never}
	 */
	function component_api_invalid_new(component, name) {
		if (DEV) {
			const error = new Error(`component_api_invalid_new\nAttempted to instantiate ${component} with \`new ${name}\`, which is no longer valid in Svelte 5. If this component is not under your control, set the \`compatibility.componentApi\` compiler option to \`4\` to keep it working.\nhttps://svelte.dev/e/component_api_invalid_new`);

			error.name = 'Svelte error';

			throw error;
		} else {
			throw new Error(`https://svelte.dev/e/component_api_invalid_new`);
		}
	}

	/**
	 * A derived value cannot reference itself recursively
	 * @returns {never}
	 */
	function derived_references_self() {
		if (DEV) {
			const error = new Error(`derived_references_self\nA derived value cannot reference itself recursively\nhttps://svelte.dev/e/derived_references_self`);

			error.name = 'Svelte error';

			throw error;
		} else {
			throw new Error(`https://svelte.dev/e/derived_references_self`);
		}
	}

	/**
	 * `%rune%` cannot be used inside an effect cleanup function
	 * @param {string} rune
	 * @returns {never}
	 */
	function effect_in_teardown(rune) {
		if (DEV) {
			const error = new Error(`effect_in_teardown\n\`${rune}\` cannot be used inside an effect cleanup function\nhttps://svelte.dev/e/effect_in_teardown`);

			error.name = 'Svelte error';

			throw error;
		} else {
			throw new Error(`https://svelte.dev/e/effect_in_teardown`);
		}
	}

	/**
	 * Effect cannot be created inside a `$derived` value that was not itself created inside an effect
	 * @returns {never}
	 */
	function effect_in_unowned_derived() {
		if (DEV) {
			const error = new Error(`effect_in_unowned_derived\nEffect cannot be created inside a \`$derived\` value that was not itself created inside an effect\nhttps://svelte.dev/e/effect_in_unowned_derived`);

			error.name = 'Svelte error';

			throw error;
		} else {
			throw new Error(`https://svelte.dev/e/effect_in_unowned_derived`);
		}
	}

	/**
	 * `%rune%` can only be used inside an effect (e.g. during component initialisation)
	 * @param {string} rune
	 * @returns {never}
	 */
	function effect_orphan(rune) {
		if (DEV) {
			const error = new Error(`effect_orphan\n\`${rune}\` can only be used inside an effect (e.g. during component initialisation)\nhttps://svelte.dev/e/effect_orphan`);

			error.name = 'Svelte error';

			throw error;
		} else {
			throw new Error(`https://svelte.dev/e/effect_orphan`);
		}
	}

	/**
	 * Maximum update depth exceeded. This can happen when a reactive block or effect repeatedly sets a new value. Svelte limits the number of nested updates to prevent infinite loops
	 * @returns {never}
	 */
	function effect_update_depth_exceeded() {
		if (DEV) {
			const error = new Error(`effect_update_depth_exceeded\nMaximum update depth exceeded. This can happen when a reactive block or effect repeatedly sets a new value. Svelte limits the number of nested updates to prevent infinite loops\nhttps://svelte.dev/e/effect_update_depth_exceeded`);

			error.name = 'Svelte error';

			throw error;
		} else {
			throw new Error(`https://svelte.dev/e/effect_update_depth_exceeded`);
		}
	}

	/**
	 * Cannot do `bind:%key%={undefined}` when `%key%` has a fallback value
	 * @param {string} key
	 * @returns {never}
	 */
	function props_invalid_value(key) {
		if (DEV) {
			const error = new Error(`props_invalid_value\nCannot do \`bind:${key}={undefined}\` when \`${key}\` has a fallback value\nhttps://svelte.dev/e/props_invalid_value`);

			error.name = 'Svelte error';

			throw error;
		} else {
			throw new Error(`https://svelte.dev/e/props_invalid_value`);
		}
	}

	/**
	 * The `%rune%` rune is only available inside `.svelte` and `.svelte.js/ts` files
	 * @param {string} rune
	 * @returns {never}
	 */
	function rune_outside_svelte(rune) {
		if (DEV) {
			const error = new Error(`rune_outside_svelte\nThe \`${rune}\` rune is only available inside \`.svelte\` and \`.svelte.js/ts\` files\nhttps://svelte.dev/e/rune_outside_svelte`);

			error.name = 'Svelte error';

			throw error;
		} else {
			throw new Error(`https://svelte.dev/e/rune_outside_svelte`);
		}
	}

	/**
	 * Property descriptors defined on `$state` objects must contain `value` and always be `enumerable`, `configurable` and `writable`.
	 * @returns {never}
	 */
	function state_descriptors_fixed() {
		if (DEV) {
			const error = new Error(`state_descriptors_fixed\nProperty descriptors defined on \`$state\` objects must contain \`value\` and always be \`enumerable\`, \`configurable\` and \`writable\`.\nhttps://svelte.dev/e/state_descriptors_fixed`);

			error.name = 'Svelte error';

			throw error;
		} else {
			throw new Error(`https://svelte.dev/e/state_descriptors_fixed`);
		}
	}

	/**
	 * Cannot set prototype of `$state` object
	 * @returns {never}
	 */
	function state_prototype_fixed() {
		if (DEV) {
			const error = new Error(`state_prototype_fixed\nCannot set prototype of \`$state\` object\nhttps://svelte.dev/e/state_prototype_fixed`);

			error.name = 'Svelte error';

			throw error;
		} else {
			throw new Error(`https://svelte.dev/e/state_prototype_fixed`);
		}
	}

	/**
	 * Updating state inside `$derived(...)`, `$inspect(...)` or a template expression is forbidden. If the value should not be reactive, declare it without `$state`
	 * @returns {never}
	 */
	function state_unsafe_mutation() {
		if (DEV) {
			const error = new Error(`state_unsafe_mutation\nUpdating state inside \`$derived(...)\`, \`$inspect(...)\` or a template expression is forbidden. If the value should not be reactive, declare it without \`$state\`\nhttps://svelte.dev/e/state_unsafe_mutation`);

			error.name = 'Svelte error';

			throw error;
		} else {
			throw new Error(`https://svelte.dev/e/state_unsafe_mutation`);
		}
	}

	const EACH_ITEM_REACTIVE = 1;
	const EACH_INDEX_REACTIVE = 1 << 1;
	const EACH_ITEM_IMMUTABLE = 1 << 4;

	const PROPS_IS_IMMUTABLE = 1;
	const PROPS_IS_UPDATED = 1 << 2;
	const PROPS_IS_BINDABLE = 1 << 3;
	const PROPS_IS_LAZY_INITIAL = 1 << 4;

	const TEMPLATE_FRAGMENT = 1;
	const TEMPLATE_USE_IMPORT_NODE = 1 << 1;

	const UNINITIALIZED = Symbol();

	// Dev-time component properties
	const FILENAME = Symbol('filename');

	/* This file is generated by scripts/process-messages/index.js. Do not edit! */


	var bold$1 = 'font-weight: bold';
	var normal$1 = 'font-weight: normal';

	/**
	 * Detected reactivity loss when reading `%name%`. This happens when state is read in an async function after an earlier `await`
	 * @param {string} name
	 */
	function await_reactivity_loss(name) {
		if (DEV) {
			console.warn(`%c[svelte] await_reactivity_loss\n%cDetected reactivity loss when reading \`${name}\`. This happens when state is read in an async function after an earlier \`await\`\nhttps://svelte.dev/e/await_reactivity_loss`, bold$1, normal$1);
		} else {
			console.warn(`https://svelte.dev/e/await_reactivity_loss`);
		}
	}

	/**
	 * Your `console.%method%` contained `$state` proxies. Consider using `$inspect(...)` or `$state.snapshot(...)` instead
	 * @param {string} method
	 */
	function console_log_state(method) {
		if (DEV) {
			console.warn(`%c[svelte] console_log_state\n%cYour \`console.${method}\` contained \`$state\` proxies. Consider using \`$inspect(...)\` or \`$state.snapshot(...)\` instead\nhttps://svelte.dev/e/console_log_state`, bold$1, normal$1);
		} else {
			console.warn(`https://svelte.dev/e/console_log_state`);
		}
	}

	/**
	 * Detected a migrated `$:` reactive block in `%filename%` that both accesses and updates the same reactive value. This may cause recursive updates when converted to an `$effect`.
	 * @param {string} filename
	 */
	function legacy_recursive_reactive_block(filename) {
		if (DEV) {
			console.warn(`%c[svelte] legacy_recursive_reactive_block\n%cDetected a migrated \`$:\` reactive block in \`${filename}\` that both accesses and updates the same reactive value. This may cause recursive updates when converted to an \`$effect\`.\nhttps://svelte.dev/e/legacy_recursive_reactive_block`, bold$1, normal$1);
		} else {
			console.warn(`https://svelte.dev/e/legacy_recursive_reactive_block`);
		}
	}

	/**
	 * The `value` property of a `<select multiple>` element should be an array, but it received a non-array value. The selection will be kept as is.
	 */
	function select_multiple_invalid_value() {
		if (DEV) {
			console.warn(`%c[svelte] select_multiple_invalid_value\n%cThe \`value\` property of a \`<select multiple>\` element should be an array, but it received a non-array value. The selection will be kept as is.\nhttps://svelte.dev/e/select_multiple_invalid_value`, bold$1, normal$1);
		} else {
			console.warn(`https://svelte.dev/e/select_multiple_invalid_value`);
		}
	}

	/**
	 * Reactive `$state(...)` proxies and the values they proxy have different identities. Because of this, comparisons with `%operator%` will produce unexpected results
	 * @param {string} operator
	 */
	function state_proxy_equality_mismatch(operator) {
		if (DEV) {
			console.warn(`%c[svelte] state_proxy_equality_mismatch\n%cReactive \`$state(...)\` proxies and the values they proxy have different identities. Because of this, comparisons with \`${operator}\` will produce unexpected results\nhttps://svelte.dev/e/state_proxy_equality_mismatch`, bold$1, normal$1);
		} else {
			console.warn(`https://svelte.dev/e/state_proxy_equality_mismatch`);
		}
	}

	/** @import { TemplateNode } from '#client' */


	/**
	 * Use this variable to guard everything related to hydration code so it can be treeshaken out
	 * if the user doesn't use the `hydrate` method and these code paths are therefore not needed.
	 */
	let hydrating = false;

	/** @param {TemplateNode} node */
	function reset(node) {
		return;
	}

	/** @import { Equals } from '#client' */

	/** @type {Equals} */
	function equals$1(value) {
		return value === this.v;
	}

	/**
	 * @param {unknown} a
	 * @param {unknown} b
	 * @returns {boolean}
	 */
	function safe_not_equal(a, b) {
		return a != a
			? b == b
			: a !== b || (a !== null && typeof a === 'object') || typeof a === 'function';
	}

	/** @type {Equals} */
	function safe_equals(value) {
		return !safe_not_equal(value, this.v);
	}

	let tracing_mode_flag = false;

	/* This file is generated by scripts/process-messages/index.js. Do not edit! */


	var bold = 'font-weight: bold';
	var normal = 'font-weight: normal';

	/**
	 * The following properties cannot be cloned with `$state.snapshot` — the return value contains the originals:
	 * 
	 * %properties%
	 * @param {string | undefined | null} [properties]
	 */
	function state_snapshot_uncloneable(properties) {
		if (DEV) {
			console.warn(
				`%c[svelte] state_snapshot_uncloneable\n%c${properties
				? `The following properties cannot be cloned with \`$state.snapshot\` — the return value contains the originals:

${properties}`
				: 'Value cannot be cloned with `$state.snapshot` — the original value was returned'}\nhttps://svelte.dev/e/state_snapshot_uncloneable`,
				bold,
				normal
			);
		} else {
			console.warn(`https://svelte.dev/e/state_snapshot_uncloneable`);
		}
	}

	/** @import { Snapshot } from './types' */

	/**
	 * In dev, we keep track of which properties could not be cloned. In prod
	 * we don't bother, but we keep a dummy array around so that the
	 * signature stays the same
	 * @type {string[]}
	 */
	const empty = [];

	/**
	 * @template T
	 * @param {T} value
	 * @param {boolean} [skip_warning]
	 * @returns {Snapshot<T>}
	 */
	function snapshot(value, skip_warning = false) {
		if (DEV && !skip_warning) {
			/** @type {string[]} */
			const paths = [];

			const copy = clone$2(value, new Map(), '', paths);
			if (paths.length === 1 && paths[0] === '') {
				// value could not be cloned
				state_snapshot_uncloneable();
			} else if (paths.length > 0) {
				// some properties could not be cloned
				const slice = paths.length > 10 ? paths.slice(0, 7) : paths.slice(0, 10);
				const excess = paths.length - slice.length;

				let uncloned = slice.map((path) => `- <value>${path}`).join('\n');
				if (excess > 0) uncloned += `\n- ...and ${excess} more`;

				state_snapshot_uncloneable(uncloned);
			}

			return copy;
		}

		return clone$2(value, new Map(), '', empty);
	}

	/**
	 * @template T
	 * @param {T} value
	 * @param {Map<T, Snapshot<T>>} cloned
	 * @param {string} path
	 * @param {string[]} paths
	 * @param {null | T} original The original value, if `value` was produced from a `toJSON` call
	 * @returns {Snapshot<T>}
	 */
	function clone$2(value, cloned, path, paths, original = null) {
		if (typeof value === 'object' && value !== null) {
			var unwrapped = cloned.get(value);
			if (unwrapped !== undefined) return unwrapped;

			if (value instanceof Map) return /** @type {Snapshot<T>} */ (new Map(value));
			if (value instanceof Set) return /** @type {Snapshot<T>} */ (new Set(value));

			if (is_array(value)) {
				var copy = /** @type {Snapshot<any>} */ (Array(value.length));
				cloned.set(value, copy);

				if (original !== null) {
					cloned.set(original, copy);
				}

				for (var i = 0; i < value.length; i += 1) {
					var element = value[i];
					if (i in value) {
						copy[i] = clone$2(element, cloned, DEV ? `${path}[${i}]` : path, paths);
					}
				}

				return copy;
			}

			if (get_prototype_of(value) === object_prototype) {
				/** @type {Snapshot<any>} */
				copy = {};
				cloned.set(value, copy);

				if (original !== null) {
					cloned.set(original, copy);
				}

				for (var key in value) {
					// @ts-expect-error
					copy[key] = clone$2(value[key], cloned, DEV ? `${path}.${key}` : path, paths);
				}

				return copy;
			}

			if (value instanceof Date) {
				return /** @type {Snapshot<T>} */ (structuredClone(value));
			}

			if (typeof (/** @type {T & { toJSON?: any } } */ (value).toJSON) === 'function') {
				return clone$2(
					/** @type {T & { toJSON(): any } } */ (value).toJSON(),
					cloned,
					DEV ? `${path}.toJSON()` : path,
					paths,
					// Associate the instance with the toJSON clone
					value
				);
			}
		}

		if (value instanceof EventTarget) {
			// can't be cloned
			return /** @type {Snapshot<T>} */ (value);
		}

		try {
			return /** @type {Snapshot<T>} */ (structuredClone(value));
		} catch (e) {
			if (DEV) {
				paths.push(path);
			}

			return /** @type {Snapshot<T>} */ (value);
		}
	}

	/** @import { Derived, Reaction, Value } from '#client' */

	/**
	 * @param {string} label
	 */
	function get_stack(label) {
		let error = Error();
		const stack = error.stack;

		if (stack) {
			const lines = stack.split('\n');
			const new_lines = ['\n'];

			for (let i = 0; i < lines.length; i++) {
				const line = lines[i];

				if (line === 'Error') {
					continue;
				}
				if (line.includes('validate_each_keys')) {
					return null;
				}
				if (line.includes('svelte/src/internal')) {
					continue;
				}
				new_lines.push(line);
			}

			if (new_lines.length === 1) {
				return null;
			}

			define_property(error, 'stack', {
				value: new_lines.join('\n')
			});

			define_property(error, 'name', {
				// 'Error' suffix is required for stack traces to be rendered properly
				value: `${label}Error`
			});
		}
		return error;
	}

	/**
	 * @param {Value} source
	 * @param {string} label
	 */
	function tag(source, label) {
		source.label = label;
		tag_proxy(source.v, label);

		return source;
	}

	/**
	 * @param {unknown} value
	 * @param {string} label
	 */
	function tag_proxy(value, label) {
		// @ts-expect-error
		value?.[PROXY_PATH_SYMBOL]?.(label);
		return value;
	}

	/** @import { ComponentContext, DevStackEntry, Effect } from '#client' */

	/** @type {ComponentContext | null} */
	let component_context = null;

	/** @param {ComponentContext | null} context */
	function set_component_context(context) {
		component_context = context;
	}

	/** @type {DevStackEntry | null} */
	let dev_stack = null;

	/** @param {DevStackEntry | null} stack */
	function set_dev_stack(stack) {
		dev_stack = stack;
	}

	/**
	 * Execute a callback with a new dev stack entry
	 * @param {() => any} callback - Function to execute
	 * @param {DevStackEntry['type']} type - Type of block/component
	 * @param {any} component - Component function
	 * @param {number} line - Line number
	 * @param {number} column - Column number
	 * @param {Record<string, any>} [additional] - Any additional properties to add to the dev stack entry
	 * @returns {any}
	 */
	function add_svelte_meta(callback, type, component, line, column, additional) {
		const parent = dev_stack;

		dev_stack = {
			type,
			file: component[FILENAME],
			line,
			column,
			parent,
			...additional
		};

		try {
			return callback();
		} finally {
			dev_stack = parent;
		}
	}

	/**
	 * The current component function. Different from current component context:
	 * ```html
	 * <!-- App.svelte -->
	 * <Foo>
	 *   <Bar /> <!-- context == Foo.svelte, function == App.svelte -->
	 * </Foo>
	 * ```
	 * @type {ComponentContext['function']}
	 */
	let dev_current_component_function = null;

	/** @param {ComponentContext['function']} fn */
	function set_dev_current_component_function(fn) {
		dev_current_component_function = fn;
	}

	/**
	 * @param {Record<string, unknown>} props
	 * @param {any} runes
	 * @param {Function} [fn]
	 * @returns {void}
	 */
	function push(props, runes = false, fn) {
		component_context = {
			p: component_context,
			c: null,
			e: null,
			s: props,
			x: null,
			l: null
		};

		if (DEV) {
			// component function
			component_context.function = fn;
			dev_current_component_function = fn;
		}
	}

	/**
	 * @template {Record<string, any>} T
	 * @param {T} [component]
	 * @returns {T}
	 */
	function pop(component) {
		var context = /** @type {ComponentContext} */ (component_context);
		var effects = context.e;

		if (effects !== null) {
			context.e = null;

			for (var fn of effects) {
				create_user_effect(fn);
			}
		}

		if (component !== undefined) {
			context.x = component;
		}

		component_context = context.p;

		if (DEV) {
			dev_current_component_function = component_context?.function ?? null;
		}

		return component ?? /** @type {T} */ ({});
	}

	/** @returns {boolean} */
	function is_runes() {
		return true;
	}

	/** @import { Derived, Effect } from '#client' */
	/** @import { Boundary } from './dom/blocks/boundary.js' */

	const adjustments = new WeakMap();

	/**
	 * @param {unknown} error
	 */
	function handle_error(error) {
		var effect = active_effect;

		// for unowned deriveds, don't throw until we read the value
		if (effect === null) {
			/** @type {Derived} */ (active_reaction).f |= ERROR_VALUE;
			return error;
		}

		if (DEV && error instanceof Error && !adjustments.has(error)) {
			adjustments.set(error, get_adjustments(error, effect));
		}

		if ((effect.f & EFFECT_RAN) === 0) {
			// if the error occurred while creating this subtree, we let it
			// bubble up until it hits a boundary that can handle it
			if ((effect.f & BOUNDARY_EFFECT) === 0) {
				if (!effect.parent && error instanceof Error) {
					apply_adjustments(error);
				}

				throw error;
			}

			/** @type {Boundary} */ (effect.b).error(error);
		} else {
			// otherwise we bubble up the effect tree ourselves
			invoke_error_boundary(error, effect);
		}
	}

	/**
	 * @param {unknown} error
	 * @param {Effect | null} effect
	 */
	function invoke_error_boundary(error, effect) {
		while (effect !== null) {
			if ((effect.f & BOUNDARY_EFFECT) !== 0) {
				try {
					/** @type {Boundary} */ (effect.b).error(error);
					return;
				} catch {}
			}

			effect = effect.parent;
		}

		if (error instanceof Error) {
			apply_adjustments(error);
		}

		throw error;
	}

	/**
	 * Add useful information to the error message/stack in development
	 * @param {Error} error
	 * @param {Effect} effect
	 */
	function get_adjustments(error, effect) {
		const message_descriptor = get_descriptor(error, 'message');

		// if the message was already changed and it's not configurable we can't change it
		// or it will throw a different error swallowing the original error
		if (message_descriptor && !message_descriptor.configurable) return;

		var indent = is_firefox ? '  ' : '\t';
		var component_stack = `\n${indent}in ${effect.fn?.name || '<unknown>'}`;
		var context = effect.ctx;

		while (context !== null) {
			component_stack += `\n${indent}in ${context.function?.[FILENAME].split('/').pop()}`;
			context = context.p;
		}

		return {
			message: error.message + `\n${component_stack}\n`,
			stack: error.stack
				?.split('\n')
				.filter((line) => !line.includes('svelte/src/internal'))
				.join('\n')
		};
	}

	/**
	 * @param {Error} error
	 */
	function apply_adjustments(error) {
		const adjusted = adjustments.get(error);

		if (adjusted) {
			define_property(error, 'message', {
				value: adjusted.message
			});

			define_property(error, 'stack', {
				value: adjusted.stack
			});
		}
	}

	/** @type {Array<() => void>} */
	let micro_tasks = [];

	function run_micro_tasks() {
		var tasks = micro_tasks;
		micro_tasks = [];
		run_all(tasks);
	}

	/**
	 * @param {() => void} fn
	 */
	function queue_micro_task(fn) {
		if (micro_tasks.length === 0) {
			queueMicrotask(run_micro_tasks);
		}

		micro_tasks.push(fn);
	}

	/** @import { Effect, Source, TemplateNode, } from '#client' */

	function get_pending_boundary() {
		var boundary = /** @type {Effect} */ (active_effect).b;

		while (boundary !== null && !boundary.has_pending_snippet()) {
			boundary = boundary.parent;
		}

		if (boundary === null) {
			await_outside_boundary();
		}

		return boundary;
	}

	/** @import { Derived, Effect, Source } from '#client' */
	/** @import { Batch } from './batch.js'; */

	/** @type {Effect | null} */
	let current_async_effect = null;

	/** @param {Effect | null} v */
	function set_from_async_derived(v) {
		current_async_effect = v;
	}

	const recent_async_deriveds = new Set();

	/**
	 * @template V
	 * @param {() => V} fn
	 * @returns {Derived<V>}
	 */
	/*#__NO_SIDE_EFFECTS__*/
	function derived(fn) {
		var flags = DERIVED | DIRTY;
		var parent_derived =
			active_reaction !== null && (active_reaction.f & DERIVED) !== 0
				? /** @type {Derived} */ (active_reaction)
				: null;

		if (active_effect === null || (parent_derived !== null && (parent_derived.f & UNOWNED) !== 0)) {
			flags |= UNOWNED;
		} else {
			// Since deriveds are evaluated lazily, any effects created inside them are
			// created too late to ensure that the parent effect is added to the tree
			active_effect.f |= EFFECT_PRESERVED;
		}

		/** @type {Derived<V>} */
		const signal = {
			ctx: component_context,
			deps: null,
			effects: null,
			equals: equals$1,
			f: flags,
			fn,
			reactions: null,
			rv: 0,
			v: /** @type {V} */ (UNINITIALIZED),
			wv: 0,
			parent: parent_derived ?? active_effect,
			ac: null
		};

		return signal;
	}

	/**
	 * @template V
	 * @param {() => V | Promise<V>} fn
	 * @param {string} [location] If provided, print a warning if the value is not read immediately after update
	 * @returns {Promise<Source<V>>}
	 */
	/*#__NO_SIDE_EFFECTS__*/
	function async_derived(fn, location) {
		let parent = /** @type {Effect | null} */ (active_effect);

		if (parent === null) {
			async_derived_orphan();
		}

		var boundary = /** @type {Boundary} */ (parent.b);

		var promise = /** @type {Promise<V>} */ (/** @type {unknown} */ (undefined));
		var signal = source(/** @type {V} */ (UNINITIALIZED));

		/** @type {Promise<V> | null} */
		var prev = null;

		// only suspend in async deriveds created on initialisation
		var should_suspend = !active_reaction;

		async_effect(() => {
			if (DEV) current_async_effect = active_effect;

			try {
				var p = fn();
			} catch (error) {
				p = Promise.reject(error);
			}

			if (DEV) current_async_effect = null;

			var r = () => p;
			promise = prev?.then(r, r) ?? Promise.resolve(p);

			prev = promise;

			var batch = /** @type {Batch} */ (current_batch);
			var pending = boundary.pending;

			if (should_suspend) {
				boundary.update_pending_count(1);
				if (!pending) batch.increment();
			}

			/**
			 * @param {any} value
			 * @param {unknown} error
			 */
			const handler = (value, error = undefined) => {
				prev = null;

				current_async_effect = null;

				if (!pending) batch.activate();

				if (error) {
					if (error !== STALE_REACTION) {
						signal.f |= ERROR_VALUE;

						// @ts-expect-error the error is the wrong type, but we don't care
						internal_set(signal, error);
					}
				} else {
					if ((signal.f & ERROR_VALUE) !== 0) {
						signal.f ^= ERROR_VALUE;
					}

					internal_set(signal, value);
				}

				if (should_suspend) {
					boundary.update_pending_count(-1);
					if (!pending) batch.decrement();
				}

				unset_context();
			};

			promise.then(handler, (e) => handler(null, e || 'unknown'));

			if (batch) {
				return () => {
					queueMicrotask(() => batch.neuter());
				};
			}
		});

		if (DEV) {
			// add a flag that lets this be printed as a derived
			// when using `$inspect.trace()`
			signal.f |= ASYNC;
		}

		return new Promise((fulfil) => {
			/** @param {Promise<V>} p */
			function next(p) {
				function go() {
					if (p === promise) {
						fulfil(signal);
					} else {
						// if the effect re-runs before the initial promise
						// resolves, delay resolution until we have a value
						next(promise);
					}
				}

				p.then(go, go);
			}

			next(promise);
		});
	}

	/**
	 * @template V
	 * @param {() => V} fn
	 * @returns {Derived<V>}
	 */
	/*#__NO_SIDE_EFFECTS__*/
	function user_derived(fn) {
		const d = derived(fn);

		push_reaction_value(d);

		return d;
	}

	/**
	 * @template V
	 * @param {() => V} fn
	 * @returns {Derived<V>}
	 */
	/*#__NO_SIDE_EFFECTS__*/
	function derived_safe_equal(fn) {
		const signal = derived(fn);
		signal.equals = safe_equals;
		return signal;
	}

	/**
	 * @param {Derived} derived
	 * @returns {void}
	 */
	function destroy_derived_effects(derived) {
		var effects = derived.effects;

		if (effects !== null) {
			derived.effects = null;

			for (var i = 0; i < effects.length; i += 1) {
				destroy_effect(/** @type {Effect} */ (effects[i]));
			}
		}
	}

	/**
	 * The currently updating deriveds, used to detect infinite recursion
	 * in dev mode and provide a nicer error than 'too much recursion'
	 * @type {Derived[]}
	 */
	let stack = [];

	/**
	 * @param {Derived} derived
	 * @returns {Effect | null}
	 */
	function get_derived_parent_effect(derived) {
		var parent = derived.parent;
		while (parent !== null) {
			if ((parent.f & DERIVED) === 0) {
				return /** @type {Effect} */ (parent);
			}
			parent = parent.parent;
		}
		return null;
	}

	/**
	 * @template T
	 * @param {Derived} derived
	 * @returns {T}
	 */
	function execute_derived(derived) {
		var value;
		var prev_active_effect = active_effect;

		set_active_effect(get_derived_parent_effect(derived));

		if (DEV) {
			let prev_inspect_effects = inspect_effects;
			set_inspect_effects(new Set());
			try {
				if (stack.includes(derived)) {
					derived_references_self();
				}

				stack.push(derived);

				destroy_derived_effects(derived);
				value = update_reaction(derived);
			} finally {
				set_active_effect(prev_active_effect);
				set_inspect_effects(prev_inspect_effects);
				stack.pop();
			}
		} else {
			try {
				destroy_derived_effects(derived);
				value = update_reaction(derived);
			} finally {
				set_active_effect(prev_active_effect);
			}
		}

		return value;
	}

	/**
	 * @param {Derived} derived
	 * @returns {void}
	 */
	function update_derived(derived) {
		var value = execute_derived(derived);

		if (!derived.equals(value)) {
			derived.v = value;
			derived.wv = increment_write_version();
		}

		// don't mark derived clean if we're reading it inside a
		// cleanup function, or it will cache a stale value
		if (is_destroying_effect) return;

		if (batch_deriveds !== null) {
			batch_deriveds.set(derived, derived.v);
		} else {
			var status =
				(skip_reaction || (derived.f & UNOWNED) !== 0) && derived.deps !== null ? MAYBE_DIRTY : CLEAN;

			set_signal_status(derived, status);
		}
	}

	/** @import { Effect, Value } from '#client' */


	/**
	 *
	 * @param {Array<() => any>} sync
	 * @param {Array<() => Promise<any>>} async
	 * @param {(values: Value[]) => any} fn
	 */
	function flatten(sync, async, fn) {
		const d = derived ;

		if (async.length === 0) {
			fn(sync.map(d));
			return;
		}

		var batch = current_batch;
		var parent = /** @type {Effect} */ (active_effect);

		var restore = capture();
		var boundary = get_pending_boundary();

		Promise.all(async.map((expression) => async_derived(expression)))
			.then((result) => {
				batch?.activate();

				restore();

				try {
					fn([...sync.map(d), ...result]);
				} catch (error) {
					// ignore errors in blocks that have already been destroyed
					if ((parent.f & DESTROYED) === 0) {
						invoke_error_boundary(error, parent);
					}
				}

				batch?.deactivate();
				unset_context();
			})
			.catch((error) => {
				boundary.error(error);
			});
	}

	/**
	 * Captures the current effect context so that we can restore it after
	 * some asynchronous work has happened (so that e.g. `await a + b`
	 * causes `b` to be registered as a dependency).
	 */
	function capture() {
		var previous_effect = active_effect;
		var previous_reaction = active_reaction;
		var previous_component_context = component_context;

		return function restore() {
			set_active_effect(previous_effect);
			set_active_reaction(previous_reaction);
			set_component_context(previous_component_context);

			if (DEV) {
				set_from_async_derived(null);
			}
		};
	}

	function unset_context() {
		set_active_effect(null);
		set_active_reaction(null);
		set_component_context(null);
		if (DEV) set_from_async_derived(null);
	}

	/** @import { Derived, Effect, Source } from '#client' */

	/** @type {Set<Batch>} */
	const batches = new Set();

	/** @type {Batch | null} */
	let current_batch = null;

	/**
	 * When time travelling, we re-evaluate deriveds based on the temporary
	 * values of their dependencies rather than their actual values, and cache
	 * the results in this map rather than on the deriveds themselves
	 * @type {Map<Derived, any> | null}
	 */
	let batch_deriveds = null;

	/** @type {Effect[]} Stack of effects, dev only */
	let dev_effect_stack = [];

	/** @type {Effect[]} */
	let queued_root_effects = [];

	/** @type {Effect | null} */
	let last_scheduled_effect = null;

	let is_flushing = false;

	class Batch {
		/**
		 * The current values of any sources that are updated in this batch
		 * They keys of this map are identical to `this.#previous`
		 * @type {Map<Source, any>}
		 */
		#current = new Map();

		/**
		 * The values of any sources that are updated in this batch _before_ those updates took place.
		 * They keys of this map are identical to `this.#current`
		 * @type {Map<Source, any>}
		 */
		#previous = new Map();

		/**
		 * When the batch is committed (and the DOM is updated), we need to remove old branches
		 * and append new ones by calling the functions added inside (if/each/key/etc) blocks
		 * @type {Set<() => void>}
		 */
		#callbacks = new Set();

		/**
		 * The number of async effects that are currently in flight
		 */
		#pending = 0;

		/**
		 * A deferred that resolves when the batch is committed, used with `settled()`
		 * TODO replace with Promise.withResolvers once supported widely enough
		 * @type {{ promise: Promise<void>, resolve: (value?: any) => void, reject: (reason: unknown) => void } | null}
		 */
		#deferred = null;

		/**
		 * True if an async effect inside this batch resolved and
		 * its parent branch was already deleted
		 */
		#neutered = false;

		/**
		 * Async effects (created inside `async_derived`) encountered during processing.
		 * These run after the rest of the batch has updated, since they should
		 * always have the latest values
		 * @type {Effect[]}
		 */
		#async_effects = [];

		/**
		 * The same as `#async_effects`, but for effects inside a newly-created
		 * `<svelte:boundary>` — these do not prevent the batch from committing
		 * @type {Effect[]}
		 */
		#boundary_async_effects = [];

		/**
		 * Template effects and `$effect.pre` effects, which run when
		 * a batch is committed
		 * @type {Effect[]}
		 */
		#render_effects = [];

		/**
		 * The same as `#render_effects`, but for `$effect` (which runs after)
		 * @type {Effect[]}
		 */
		#effects = [];

		/**
		 * Block effects, which may need to re-run on subsequent flushes
		 * in order to update internal sources (e.g. each block items)
		 * @type {Effect[]}
		 */
		#block_effects = [];

		/**
		 * A set of branches that still exist, but will be destroyed when this batch
		 * is committed — we skip over these during `process`
		 * @type {Set<Effect>}
		 */
		skipped_effects = new Set();

		/**
		 *
		 * @param {Effect[]} root_effects
		 */
		#process(root_effects) {
			queued_root_effects = [];

			/** @type {Map<Source, { v: unknown, wv: number }> | null} */
			var current_values = null;

			// if there are multiple batches, we are 'time travelling' —
			// we need to undo the changes belonging to any batch
			// other than the current one
			if (batches.size > 1) {
				current_values = new Map();
				batch_deriveds = new Map();

				for (const [source, current] of this.#current) {
					current_values.set(source, { v: source.v, wv: source.wv });
					source.v = current;
				}

				for (const batch of batches) {
					if (batch === this) continue;

					for (const [source, previous] of batch.#previous) {
						if (!current_values.has(source)) {
							current_values.set(source, { v: source.v, wv: source.wv });
							source.v = previous;
						}
					}
				}
			}

			for (const root of root_effects) {
				this.#traverse_effect_tree(root);
			}

			// if we didn't start any new async work, and no async work
			// is outstanding from a previous flush, commit
			if (this.#async_effects.length === 0 && this.#pending === 0) {
				var render_effects = this.#render_effects;
				var effects = this.#effects;

				this.#render_effects = [];
				this.#effects = [];
				this.#block_effects = [];

				this.#commit();

				flush_queued_effects(render_effects);
				flush_queued_effects(effects);

				this.#deferred?.resolve();
			} else {
				// otherwise mark effects clean so they get scheduled on the next run
				for (const e of this.#render_effects) set_signal_status(e, CLEAN);
				for (const e of this.#effects) set_signal_status(e, CLEAN);
				for (const e of this.#block_effects) set_signal_status(e, CLEAN);
			}

			if (current_values) {
				for (const [source, { v, wv }] of current_values) {
					// reset the source to the current value (unless
					// it got a newer value as a result of effects running)
					if (source.wv <= wv) {
						source.v = v;
					}
				}

				batch_deriveds = null;
			}

			for (const effect of this.#async_effects) {
				update_effect(effect);
			}

			for (const effect of this.#boundary_async_effects) {
				update_effect(effect);
			}

			this.#async_effects = [];
			this.#boundary_async_effects = [];
		}

		/**
		 * Traverse the effect tree, executing effects or stashing
		 * them for later execution as appropriate
		 * @param {Effect} root
		 */
		#traverse_effect_tree(root) {
			root.f ^= CLEAN;

			var effect = root.first;

			while (effect !== null) {
				var flags = effect.f;
				var is_branch = (flags & (BRANCH_EFFECT | ROOT_EFFECT)) !== 0;
				var is_skippable_branch = is_branch && (flags & CLEAN) !== 0;

				var skip = is_skippable_branch || (flags & INERT) !== 0 || this.skipped_effects.has(effect);

				if (!skip && effect.fn !== null) {
					if (is_branch) {
						effect.f ^= CLEAN;
					} else if ((flags & EFFECT) !== 0) {
						this.#effects.push(effect);
					} else if (is_dirty(effect)) {
						if ((flags & ASYNC) !== 0) {
							var effects = effect.b?.pending ? this.#boundary_async_effects : this.#async_effects;
							effects.push(effect);
						} else {
							if ((effect.f & BLOCK_EFFECT) !== 0) this.#block_effects.push(effect);
							update_effect(effect);
						}
					}

					var child = effect.first;

					if (child !== null) {
						effect = child;
						continue;
					}
				}

				var parent = effect.parent;
				effect = effect.next;

				while (effect === null && parent !== null) {
					effect = parent.next;
					parent = parent.parent;
				}
			}
		}

		/**
		 * Associate a change to a given source with the current
		 * batch, noting its previous and current values
		 * @param {Source} source
		 * @param {any} value
		 */
		capture(source, value) {
			if (!this.#previous.has(source)) {
				this.#previous.set(source, value);
			}

			this.#current.set(source, source.v);
		}

		activate() {
			current_batch = this;
		}

		deactivate() {
			current_batch = null;
		}

		neuter() {
			this.#neutered = true;
		}

		flush() {
			if (queued_root_effects.length > 0) {
				this.flush_effects();
			} else {
				this.#commit();
			}

			if (current_batch !== this) {
				// this can happen if a `flushSync` occurred during `this.flush_effects()`,
				// which is permitted in legacy mode despite being a terrible idea
				return;
			}

			if (this.#pending === 0) {
				batches.delete(this);
			}

			current_batch = null;
		}

		flush_effects() {
			var was_updating_effect = is_updating_effect;
			is_flushing = true;

			try {
				var flush_count = 0;
				set_is_updating_effect(true);

				while (queued_root_effects.length > 0) {
					if (flush_count++ > 1000) {
						infinite_loop_guard();
					}

					this.#process(queued_root_effects);
					old_values.clear();
				}
			} finally {
				is_flushing = false;
				set_is_updating_effect(was_updating_effect);

				last_scheduled_effect = null;
				if (DEV) {
					dev_effect_stack = [];
				}
			}
		}

		/**
		 * Append and remove branches to/from the DOM
		 */
		#commit() {
			if (!this.#neutered) {
				for (const fn of this.#callbacks) {
					fn();
				}
			}

			this.#callbacks.clear();
		}

		increment() {
			this.#pending += 1;
		}

		decrement() {
			this.#pending -= 1;

			if (this.#pending === 0) {
				for (const e of this.#render_effects) {
					set_signal_status(e, DIRTY);
					schedule_effect(e);
				}

				for (const e of this.#effects) {
					set_signal_status(e, DIRTY);
					schedule_effect(e);
				}

				for (const e of this.#block_effects) {
					set_signal_status(e, DIRTY);
					schedule_effect(e);
				}

				this.#render_effects = [];
				this.#effects = [];

				this.flush();
			}
		}

		/** @param {() => void} fn */
		add_callback(fn) {
			this.#callbacks.add(fn);
		}

		settled() {
			return (this.#deferred ??= deferred()).promise;
		}

		static ensure() {
			if (current_batch === null) {
				const batch = (current_batch = new Batch());
				batches.add(current_batch);

				queueMicrotask(() => {
					if (current_batch !== batch) {
						// a flushSync happened in the meantime
						return;
					}

					batch.flush();
				});
			}

			return current_batch;
		}
	}

	function log_effect_stack() {
		// eslint-disable-next-line no-console
		console.error(
			'Last ten effects were: ',
			dev_effect_stack.slice(-10).map((d) => d.fn)
		);
		dev_effect_stack = [];
	}

	function infinite_loop_guard() {
		try {
			effect_update_depth_exceeded();
		} catch (error) {
			if (DEV) {
				// stack is garbage, ignore. Instead add a console.error message.
				define_property(error, 'stack', {
					value: ''
				});
			}
			// Try and handle the error so it can be caught at a boundary, that's
			// if there's an effect available from when it was last scheduled
			if (last_scheduled_effect !== null) {
				if (DEV) {
					try {
						invoke_error_boundary(error, last_scheduled_effect);
					} catch (e) {
						// Only log the effect stack if the error is re-thrown
						log_effect_stack();
						throw e;
					}
				} else {
					invoke_error_boundary(error, last_scheduled_effect);
				}
			} else {
				if (DEV) {
					log_effect_stack();
				}
				throw error;
			}
		}
	}

	/**
	 * @param {Array<Effect>} effects
	 * @returns {void}
	 */
	function flush_queued_effects(effects) {
		var length = effects.length;
		if (length === 0) return;

		for (var i = 0; i < length; i++) {
			var effect = effects[i];

			if ((effect.f & (DESTROYED | INERT)) === 0) {
				if (is_dirty(effect)) {
					var wv = write_version;

					update_effect(effect);

					// Effects with no dependencies or teardown do not get added to the effect tree.
					// Deferred effects (e.g. `$effect(...)`) _are_ added to the tree because we
					// don't know if we need to keep them until they are executed. Doing the check
					// here (rather than in `update_effect`) allows us to skip the work for
					// immediate effects.
					if (effect.deps === null && effect.first === null && effect.nodes_start === null) {
						if (effect.teardown === null) {
							// remove this effect from the graph
							unlink_effect(effect);
						} else {
							// keep the effect in the graph, but free up some memory
							effect.fn = null;
						}
					}

					// if state is written in a user effect, abort and re-schedule, lest we run
					// effects that should be removed as a result of the state change
					if (write_version > wv && (effect.f & USER_EFFECT) !== 0) {
						break;
					}
				}
			}
		}

		for (; i < length; i += 1) {
			schedule_effect(effects[i]);
		}
	}

	/**
	 * @param {Effect} signal
	 * @returns {void}
	 */
	function schedule_effect(signal) {
		var effect = (last_scheduled_effect = signal);

		while (effect.parent !== null) {
			effect = effect.parent;
			var flags = effect.f;

			// if the effect is being scheduled because a parent (each/await/etc) block
			// updated an internal source, bail out or we'll cause a second flush
			if (is_flushing && effect === active_effect && (flags & BLOCK_EFFECT) !== 0) {
				return;
			}

			if ((flags & (ROOT_EFFECT | BRANCH_EFFECT)) !== 0) {
				if ((flags & CLEAN) === 0) return;
				effect.f ^= CLEAN;
			}
		}

		queued_root_effects.push(effect);
	}

	/** @import { Derived, Effect, Source, Value } from '#client' */

	let inspect_effects = new Set();

	/** @type {Map<Source, any>} */
	const old_values = new Map();

	/**
	 * @param {Set<any>} v
	 */
	function set_inspect_effects(v) {
		inspect_effects = v;
	}

	/**
	 * @template V
	 * @param {V} v
	 * @param {Error | null} [stack]
	 * @returns {Source<V>}
	 */
	// TODO rename this to `state` throughout the codebase
	function source(v, stack) {
		/** @type {Value} */
		var signal = {
			f: 0, // TODO ideally we could skip this altogether, but it causes type errors
			v,
			reactions: null,
			equals: equals$1,
			rv: 0,
			wv: 0
		};

		return signal;
	}

	/**
	 * @template V
	 * @param {V} v
	 * @param {Error | null} [stack]
	 */
	/*#__NO_SIDE_EFFECTS__*/
	function state(v, stack) {
		const s = source(v);

		push_reaction_value(s);

		return s;
	}

	/**
	 * @template V
	 * @param {V} initial_value
	 * @param {boolean} [immutable]
	 * @returns {Source<V>}
	 */
	/*#__NO_SIDE_EFFECTS__*/
	function mutable_source(initial_value, immutable = false, trackable = true) {
		const s = source(initial_value);
		if (!immutable) {
			s.equals = safe_equals;
		}

		return s;
	}

	/**
	 * @template V
	 * @param {Source<V>} source
	 * @param {V} value
	 * @param {boolean} [should_proxy]
	 * @returns {V}
	 */
	function set$1(source, value, should_proxy = false) {
		if (
			active_reaction !== null &&
			// since we are untracking the function inside `$inspect.with` we need to add this check
			// to ensure we error if state is set inside an inspect effect
			(!untracking || (active_reaction.f & INSPECT_EFFECT) !== 0) &&
			is_runes() &&
			(active_reaction.f & (DERIVED | BLOCK_EFFECT | ASYNC | INSPECT_EFFECT)) !== 0 &&
			!current_sources?.includes(source)
		) {
			state_unsafe_mutation();
		}

		let new_value = should_proxy ? proxy(value) : value;

		if (DEV) {
			tag_proxy(new_value, /** @type {string} */ (source.label));
		}

		return internal_set(source, new_value);
	}

	/**
	 * @template V
	 * @param {Source<V>} source
	 * @param {V} value
	 * @returns {V}
	 */
	function internal_set(source, value) {
		if (!source.equals(value)) {
			var old_value = source.v;

			if (is_destroying_effect) {
				old_values.set(source, value);
			} else {
				old_values.set(source, old_value);
			}

			source.v = value;

			const batch = Batch.ensure();
			batch.capture(source, old_value);

			if ((source.f & DERIVED) !== 0) {
				// if we are assigning to a dirty derived we set it to clean/maybe dirty but we also eagerly execute it to track the dependencies
				if ((source.f & DIRTY) !== 0) {
					execute_derived(/** @type {Derived} */ (source));
				}
				set_signal_status(source, (source.f & UNOWNED) === 0 ? CLEAN : MAYBE_DIRTY);
			}

			source.wv = increment_write_version();

			mark_reactions(source, DIRTY);

			// It's possible that the current reaction might not have up-to-date dependencies
			// whilst it's actively running. So in the case of ensuring it registers the reaction
			// properly for itself, we need to ensure the current effect actually gets
			// scheduled. i.e: `$effect(() => x++)`
			if (
				active_effect !== null &&
				(active_effect.f & CLEAN) !== 0 &&
				(active_effect.f & (BRANCH_EFFECT | ROOT_EFFECT)) === 0
			) {
				if (untracked_writes === null) {
					set_untracked_writes([source]);
				} else {
					untracked_writes.push(source);
				}
			}

			if (DEV && inspect_effects.size > 0) {
				const inspects = Array.from(inspect_effects);

				for (const effect of inspects) {
					// Mark clean inspect-effects as maybe dirty and then check their dirtiness
					// instead of just updating the effects - this way we avoid overfiring.
					if ((effect.f & CLEAN) !== 0) {
						set_signal_status(effect, MAYBE_DIRTY);
					}

					if (is_dirty(effect)) {
						update_effect(effect);
					}
				}

				inspect_effects.clear();
			}
		}

		return value;
	}

	/**
	 * Silently (without using `get`) increment a source
	 * @param {Source<number>} source
	 */
	function increment(source) {
		set$1(source, source.v + 1);
	}

	/**
	 * @param {Value} signal
	 * @param {number} status should be DIRTY or MAYBE_DIRTY
	 * @returns {void}
	 */
	function mark_reactions(signal, status) {
		var reactions = signal.reactions;
		if (reactions === null) return;
		var length = reactions.length;

		for (var i = 0; i < length; i++) {
			var reaction = reactions[i];
			var flags = reaction.f;

			// Skip any effects that are already dirty
			if ((flags & DIRTY) !== 0) continue;

			// Inspect effects need to run immediately, so that the stack trace makes sense
			if (DEV && (flags & INSPECT_EFFECT) !== 0) {
				inspect_effects.add(reaction);
				continue;
			}

			set_signal_status(reaction, status);

			// If the signal a) was previously clean or b) is an unowned derived, then mark it
			if ((flags & (CLEAN | UNOWNED)) !== 0) {
				if ((flags & DERIVED) !== 0) {
					mark_reactions(/** @type {Derived} */ (reaction), MAYBE_DIRTY);
				} else {
					schedule_effect(/** @type {Effect} */ (reaction));
				}
			}
		}
	}

	/** @import { Source } from '#client' */

	// TODO move all regexes into shared module?
	const regex_is_valid_identifier = /^[a-zA-Z_$][a-zA-Z_$0-9]*$/;

	/**
	 * @template T
	 * @param {T} value
	 * @returns {T}
	 */
	function proxy(value) {
		// if non-proxyable, or is already a proxy, return `value`
		if (typeof value !== 'object' || value === null || STATE_SYMBOL in value) {
			return value;
		}

		const prototype = get_prototype_of(value);

		if (prototype !== object_prototype && prototype !== array_prototype) {
			return value;
		}

		/** @type {Map<any, Source<any>>} */
		var sources = new Map();
		var is_proxied_array = is_array(value);
		var version = state(0);
		var parent_version = update_version;

		/**
		 * Executes the proxy in the context of the reaction it was originally created in, if any
		 * @template T
		 * @param {() => T} fn
		 */
		var with_parent = (fn) => {
			if (update_version === parent_version) {
				return fn();
			}

			// child source is being created after the initial proxy —
			// prevent it from being associated with the current reaction
			var reaction = active_reaction;
			var version = update_version;

			set_active_reaction(null);
			set_update_version(parent_version);

			var result = fn();

			set_active_reaction(reaction);
			set_update_version(version);

			return result;
		};

		if (is_proxied_array) {
			// We need to create the length source eagerly to ensure that
			// mutations to the array are properly synced with our proxy
			sources.set('length', state(/** @type {any[]} */ (value).length));
		}

		/** Used in dev for $inspect.trace() */
		var path = '';

		/** @param {string} new_path */
		function update_path(new_path) {
			path = new_path;

			tag(version, `${path} version`);

			// rename all child sources and child proxies
			for (const [prop, source] of sources) {
				tag(source, get_label(path, prop));
			}
		}

		return new Proxy(/** @type {any} */ (value), {
			defineProperty(_, prop, descriptor) {
				if (
					!('value' in descriptor) ||
					descriptor.configurable === false ||
					descriptor.enumerable === false ||
					descriptor.writable === false
				) {
					// we disallow non-basic descriptors, because unless they are applied to the
					// target object — which we avoid, so that state can be forked — we will run
					// afoul of the various invariants
					// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getOwnPropertyDescriptor#invariants
					state_descriptors_fixed();
				}
				var s = sources.get(prop);
				if (s === undefined) {
					s = with_parent(() => {
						var s = state(descriptor.value);
						sources.set(prop, s);
						if (DEV && typeof prop === 'string') {
							tag(s, get_label(path, prop));
						}
						return s;
					});
				} else {
					set$1(s, descriptor.value, true);
				}

				return true;
			},

			deleteProperty(target, prop) {
				var s = sources.get(prop);

				if (s === undefined) {
					if (prop in target) {
						const s = with_parent(() => state(UNINITIALIZED));
						sources.set(prop, s);
						increment(version);

						if (DEV) {
							tag(s, get_label(path, prop));
						}
					}
				} else {
					// When working with arrays, we need to also ensure we update the length when removing
					// an indexed property
					if (is_proxied_array && typeof prop === 'string') {
						var ls = /** @type {Source<number>} */ (sources.get('length'));
						var n = Number(prop);

						if (Number.isInteger(n) && n < ls.v) {
							set$1(ls, n);
						}
					}
					set$1(s, UNINITIALIZED);
					increment(version);
				}

				return true;
			},

			get(target, prop, receiver) {
				if (prop === STATE_SYMBOL) {
					return value;
				}

				if (DEV && prop === PROXY_PATH_SYMBOL) {
					return update_path;
				}

				var s = sources.get(prop);
				var exists = prop in target;

				// create a source, but only if it's an own property and not a prototype property
				if (s === undefined && (!exists || get_descriptor(target, prop)?.writable)) {
					s = with_parent(() => {
						var p = proxy(exists ? target[prop] : UNINITIALIZED);
						var s = state(p);

						if (DEV) {
							tag(s, get_label(path, prop));
						}

						return s;
					});

					sources.set(prop, s);
				}

				if (s !== undefined) {
					var v = get(s);
					return v === UNINITIALIZED ? undefined : v;
				}

				return Reflect.get(target, prop, receiver);
			},

			getOwnPropertyDescriptor(target, prop) {
				var descriptor = Reflect.getOwnPropertyDescriptor(target, prop);

				if (descriptor && 'value' in descriptor) {
					var s = sources.get(prop);
					if (s) descriptor.value = get(s);
				} else if (descriptor === undefined) {
					var source = sources.get(prop);
					var value = source?.v;

					if (source !== undefined && value !== UNINITIALIZED) {
						return {
							enumerable: true,
							configurable: true,
							value,
							writable: true
						};
					}
				}

				return descriptor;
			},

			has(target, prop) {
				if (prop === STATE_SYMBOL) {
					return true;
				}

				var s = sources.get(prop);
				var has = (s !== undefined && s.v !== UNINITIALIZED) || Reflect.has(target, prop);

				if (
					s !== undefined ||
					(active_effect !== null && (!has || get_descriptor(target, prop)?.writable))
				) {
					if (s === undefined) {
						s = with_parent(() => {
							var p = has ? proxy(target[prop]) : UNINITIALIZED;
							var s = state(p);

							if (DEV) {
								tag(s, get_label(path, prop));
							}

							return s;
						});

						sources.set(prop, s);
					}

					var value = get(s);
					if (value === UNINITIALIZED) {
						return false;
					}
				}

				return has;
			},

			set(target, prop, value, receiver) {
				var s = sources.get(prop);
				var has = prop in target;

				// variable.length = value -> clear all signals with index >= value
				if (is_proxied_array && prop === 'length') {
					for (var i = value; i < /** @type {Source<number>} */ (s).v; i += 1) {
						var other_s = sources.get(i + '');
						if (other_s !== undefined) {
							set$1(other_s, UNINITIALIZED);
						} else if (i in target) {
							// If the item exists in the original, we need to create a uninitialized source,
							// else a later read of the property would result in a source being created with
							// the value of the original item at that index.
							other_s = with_parent(() => state(UNINITIALIZED));
							sources.set(i + '', other_s);

							if (DEV) {
								tag(other_s, get_label(path, i));
							}
						}
					}
				}

				// If we haven't yet created a source for this property, we need to ensure
				// we do so otherwise if we read it later, then the write won't be tracked and
				// the heuristics of effects will be different vs if we had read the proxied
				// object property before writing to that property.
				if (s === undefined) {
					if (!has || get_descriptor(target, prop)?.writable) {
						s = with_parent(() => state(undefined));
						set$1(s, proxy(value));

						sources.set(prop, s);

						if (DEV) {
							tag(s, get_label(path, prop));
						}
					}
				} else {
					has = s.v !== UNINITIALIZED;

					var p = with_parent(() => proxy(value));
					set$1(s, p);
				}

				var descriptor = Reflect.getOwnPropertyDescriptor(target, prop);

				// Set the new value before updating any signals so that any listeners get the new value
				if (descriptor?.set) {
					descriptor.set.call(receiver, value);
				}

				if (!has) {
					// If we have mutated an array directly, we might need to
					// signal that length has also changed. Do it before updating metadata
					// to ensure that iterating over the array as a result of a metadata update
					// will not cause the length to be out of sync.
					if (is_proxied_array && typeof prop === 'string') {
						var ls = /** @type {Source<number>} */ (sources.get('length'));
						var n = Number(prop);

						if (Number.isInteger(n) && n >= ls.v) {
							set$1(ls, n + 1);
						}
					}

					increment(version);
				}

				return true;
			},

			ownKeys(target) {
				get(version);

				var own_keys = Reflect.ownKeys(target).filter((key) => {
					var source = sources.get(key);
					return source === undefined || source.v !== UNINITIALIZED;
				});

				for (var [key, source] of sources) {
					if (source.v !== UNINITIALIZED && !(key in target)) {
						own_keys.push(key);
					}
				}

				return own_keys;
			},

			setPrototypeOf() {
				state_prototype_fixed();
			}
		});
	}

	/**
	 * @param {string} path
	 * @param {string | symbol} prop
	 */
	function get_label(path, prop) {
		if (typeof prop === 'symbol') return `${path}[Symbol(${prop.description ?? ''})]`;
		if (regex_is_valid_identifier.test(prop)) return `${path}.${prop}`;
		return /^\d+$/.test(prop) ? `${path}[${prop}]` : `${path}['${prop}']`;
	}

	/**
	 * @param {any} value
	 */
	function get_proxied_value(value) {
		try {
			if (value !== null && typeof value === 'object' && STATE_SYMBOL in value) {
				return value[STATE_SYMBOL];
			}
		} catch {
			// the above if check can throw an error if the value in question
			// is the contentWindow of an iframe on another domain, in which
			// case we want to just return the value (because it's definitely
			// not a proxied value) so we don't break any JavaScript interacting
			// with that iframe (such as various payment companies client side
			// JavaScript libraries interacting with their iframes on the same
			// domain)
		}

		return value;
	}

	/**
	 * @param {any} a
	 * @param {any} b
	 */
	function is(a, b) {
		return Object.is(get_proxied_value(a), get_proxied_value(b));
	}

	function init_array_prototype_warnings() {
		const array_prototype = Array.prototype;
		// The REPL ends up here over and over, and this prevents it from adding more and more patches
		// of the same kind to the prototype, which would slow down everything over time.
		// @ts-expect-error
		const cleanup = Array.__svelte_cleanup;
		if (cleanup) {
			cleanup();
		}

		const { indexOf, lastIndexOf, includes } = array_prototype;

		array_prototype.indexOf = function (item, from_index) {
			const index = indexOf.call(this, item, from_index);

			if (index === -1) {
				for (let i = from_index ?? 0; i < this.length; i += 1) {
					if (get_proxied_value(this[i]) === item) {
						state_proxy_equality_mismatch('array.indexOf(...)');
						break;
					}
				}
			}

			return index;
		};

		array_prototype.lastIndexOf = function (item, from_index) {
			// we need to specify this.length - 1 because it's probably using something like
			// `arguments` inside so passing undefined is different from not passing anything
			const index = lastIndexOf.call(this, item, from_index ?? this.length - 1);

			if (index === -1) {
				for (let i = 0; i <= (from_index ?? this.length - 1); i += 1) {
					if (get_proxied_value(this[i]) === item) {
						state_proxy_equality_mismatch('array.lastIndexOf(...)');
						break;
					}
				}
			}

			return index;
		};

		array_prototype.includes = function (item, from_index) {
			const has = includes.call(this, item, from_index);

			if (!has) {
				for (let i = 0; i < this.length; i += 1) {
					if (get_proxied_value(this[i]) === item) {
						state_proxy_equality_mismatch('array.includes(...)');
						break;
					}
				}
			}

			return has;
		};

		// @ts-expect-error
		Array.__svelte_cleanup = () => {
			array_prototype.indexOf = indexOf;
			array_prototype.lastIndexOf = lastIndexOf;
			array_prototype.includes = includes;
		};
	}

	/**
	 * @param {any} a
	 * @param {any} b
	 * @param {boolean} equal
	 * @returns {boolean}
	 */
	function strict_equals(a, b, equal = true) {
		// try-catch needed because this tries to read properties of `a` and `b`,
		// which could be disallowed for example in a secure context
		try {
			if ((a === b) !== (get_proxied_value(a) === get_proxied_value(b))) {
				state_proxy_equality_mismatch(equal ? '===' : '!==');
			}
		} catch {}

		return (a === b) === equal;
	}

	/**
	 * @param {any} a
	 * @param {any} b
	 * @param {boolean} equal
	 * @returns {boolean}
	 */
	function equals(a, b, equal = true) {
		if ((a == b) !== (get_proxied_value(a) == get_proxied_value(b))) {
			state_proxy_equality_mismatch(equal ? '==' : '!=');
		}

		return (a == b) === equal;
	}

	/** @import { Effect, TemplateNode } from '#client' */

	// export these for reference in the compiled code, making global name deduplication unnecessary
	/** @type {Window} */
	var $window;

	/** @type {boolean} */
	var is_firefox;

	/** @type {() => Node | null} */
	var first_child_getter;
	/** @type {() => Node | null} */
	var next_sibling_getter;

	/**
	 * Initialize these lazily to avoid issues when using the runtime in a server context
	 * where these globals are not available while avoiding a separate server entry point
	 */
	function init_operations() {
		if ($window !== undefined) {
			return;
		}

		$window = window;
		is_firefox = /Firefox/.test(navigator.userAgent);

		var element_prototype = Element.prototype;
		var node_prototype = Node.prototype;
		var text_prototype = Text.prototype;

		// @ts-ignore
		first_child_getter = get_descriptor(node_prototype, 'firstChild').get;
		// @ts-ignore
		next_sibling_getter = get_descriptor(node_prototype, 'nextSibling').get;

		if (is_extensible(element_prototype)) {
			// the following assignments improve perf of lookups on DOM nodes
			// @ts-expect-error
			element_prototype.__click = undefined;
			// @ts-expect-error
			element_prototype.__className = undefined;
			// @ts-expect-error
			element_prototype.__attributes = null;
			// @ts-expect-error
			element_prototype.__style = undefined;
			// @ts-expect-error
			element_prototype.__e = undefined;
		}

		if (is_extensible(text_prototype)) {
			// @ts-expect-error
			text_prototype.__t = undefined;
		}

		if (DEV) {
			// @ts-expect-error
			element_prototype.__svelte_meta = null;

			init_array_prototype_warnings();
		}
	}

	/**
	 * @param {string} value
	 * @returns {Text}
	 */
	function create_text(value = '') {
		return document.createTextNode(value);
	}

	/**
	 * @template {Node} N
	 * @param {N} node
	 * @returns {Node | null}
	 */
	/*@__NO_SIDE_EFFECTS__*/
	function get_first_child(node) {
		return first_child_getter.call(node);
	}

	/**
	 * @template {Node} N
	 * @param {N} node
	 * @returns {Node | null}
	 */
	/*@__NO_SIDE_EFFECTS__*/
	function get_next_sibling(node) {
		return next_sibling_getter.call(node);
	}

	/**
	 * Don't mark this as side-effect-free, hydration needs to walk all nodes
	 * @template {Node} N
	 * @param {N} node
	 * @param {boolean} is_text
	 * @returns {Node | null}
	 */
	function child(node, is_text) {
		{
			return get_first_child(node);
		}
	}

	/**
	 * Don't mark this as side-effect-free, hydration needs to walk all nodes
	 * @param {DocumentFragment | TemplateNode[]} fragment
	 * @param {boolean} is_text
	 * @returns {Node | null}
	 */
	function first_child(fragment, is_text) {
		{
			// when not hydrating, `fragment` is a `DocumentFragment` (the result of calling `open_frag`)
			var first = /** @type {DocumentFragment} */ (get_first_child(/** @type {Node} */ (fragment)));

			// TODO prevent user comments with the empty string when preserveComments is true
			if (first instanceof Comment && first.data === '') return get_next_sibling(first);

			return first;
		}
	}

	/**
	 * Don't mark this as side-effect-free, hydration needs to walk all nodes
	 * @param {TemplateNode} node
	 * @param {number} count
	 * @param {boolean} is_text
	 * @returns {Node | null}
	 */
	function sibling(node, count = 1, is_text = false) {
		let next_sibling = node;

		while (count--) {
			next_sibling = /** @type {TemplateNode} */ (get_next_sibling(next_sibling));
		}

		{
			return next_sibling;
		}
	}

	/**
	 * @template {Node} N
	 * @param {N} node
	 * @returns {void}
	 */
	function clear_text_content(node) {
		node.textContent = '';
	}

	/**
	 * Returns `true` if we're updating the current block, for example `condition` in
	 * an `{#if condition}` block just changed. In this case, the branch should be
	 * appended (or removed) at the same time as other updates within the
	 * current `<svelte:boundary>`
	 */
	function should_defer_append() {
		return false;
	}

	/** @import { ComponentContext, ComponentContextLegacy, Derived, Effect, TemplateNode, TransitionManager } from '#client' */

	/**
	 * @param {'$effect' | '$effect.pre' | '$inspect'} rune
	 */
	function validate_effect(rune) {
		if (active_effect === null && active_reaction === null) {
			effect_orphan(rune);
		}

		if (active_reaction !== null && (active_reaction.f & UNOWNED) !== 0 && active_effect === null) {
			effect_in_unowned_derived();
		}

		if (is_destroying_effect) {
			effect_in_teardown(rune);
		}
	}

	/**
	 * @param {Effect} effect
	 * @param {Effect} parent_effect
	 */
	function push_effect(effect, parent_effect) {
		var parent_last = parent_effect.last;
		if (parent_last === null) {
			parent_effect.last = parent_effect.first = effect;
		} else {
			parent_last.next = effect;
			effect.prev = parent_last;
			parent_effect.last = effect;
		}
	}

	/**
	 * @param {number} type
	 * @param {null | (() => void | (() => void))} fn
	 * @param {boolean} sync
	 * @param {boolean} push
	 * @returns {Effect}
	 */
	function create_effect(type, fn, sync, push = true) {
		var parent = active_effect;

		if (DEV) {
			// Ensure the parent is never an inspect effect
			while (parent !== null && (parent.f & INSPECT_EFFECT) !== 0) {
				parent = parent.parent;
			}
		}

		if (parent !== null && (parent.f & INERT) !== 0) {
			type |= INERT;
		}

		/** @type {Effect} */
		var effect = {
			ctx: component_context,
			deps: null,
			nodes_start: null,
			nodes_end: null,
			f: type | DIRTY,
			first: null,
			fn,
			last: null,
			next: null,
			parent,
			b: parent && parent.b,
			prev: null,
			teardown: null,
			transitions: null,
			wv: 0,
			ac: null
		};

		if (DEV) {
			effect.component_function = dev_current_component_function;
		}

		if (sync) {
			try {
				update_effect(effect);
				effect.f |= EFFECT_RAN;
			} catch (e) {
				destroy_effect(effect);
				throw e;
			}
		} else if (fn !== null) {
			schedule_effect(effect);
		}

		// if an effect has no dependencies, no DOM and no teardown function,
		// don't bother adding it to the effect tree
		var inert =
			sync &&
			effect.deps === null &&
			effect.first === null &&
			effect.nodes_start === null &&
			effect.teardown === null &&
			(effect.f & EFFECT_PRESERVED) === 0;

		if (!inert && push) {
			if (parent !== null) {
				push_effect(effect, parent);
			}

			// if we're in a derived, add the effect there too
			if (active_reaction !== null && (active_reaction.f & DERIVED) !== 0) {
				var derived = /** @type {Derived} */ (active_reaction);
				(derived.effects ??= []).push(effect);
			}
		}

		return effect;
	}

	/**
	 * @param {() => void} fn
	 */
	function teardown(fn) {
		const effect = create_effect(RENDER_EFFECT, null, false);
		set_signal_status(effect, CLEAN);
		effect.teardown = fn;
		return effect;
	}

	/**
	 * Internal representation of `$effect(...)`
	 * @param {() => void | (() => void)} fn
	 */
	function user_effect(fn) {
		validate_effect('$effect');

		if (DEV) {
			define_property(fn, 'name', {
				value: '$effect'
			});
		}

		// Non-nested `$effect(...)` in a component should be deferred
		// until the component is mounted
		var flags = /** @type {Effect} */ (active_effect).f;
		var defer = !active_reaction && (flags & BRANCH_EFFECT) !== 0 && (flags & EFFECT_RAN) === 0;

		if (defer) {
			// Top-level `$effect(...)` in an unmounted component — defer until mount
			var context = /** @type {ComponentContext} */ (component_context);
			(context.e ??= []).push(fn);
		} else {
			// Everything else — create immediately
			return create_user_effect(fn);
		}
	}

	/**
	 * @param {() => void | (() => void)} fn
	 */
	function create_user_effect(fn) {
		return create_effect(EFFECT | USER_EFFECT, fn, false);
	}

	/**
	 * Internal representation of `$effect.pre(...)`
	 * @param {() => void | (() => void)} fn
	 * @returns {Effect}
	 */
	function user_pre_effect(fn) {
		validate_effect('$effect.pre');
		if (DEV) {
			define_property(fn, 'name', {
				value: '$effect.pre'
			});
		}
		return create_effect(RENDER_EFFECT | USER_EFFECT, fn, true);
	}

	/**
	 * An effect root whose children can transition out
	 * @param {() => void} fn
	 * @returns {(options?: { outro?: boolean }) => Promise<void>}
	 */
	function component_root(fn) {
		Batch.ensure();
		const effect = create_effect(ROOT_EFFECT, fn, true);

		return (options = {}) => {
			return new Promise((fulfil) => {
				if (options.outro) {
					pause_effect(effect, () => {
						destroy_effect(effect);
						fulfil(undefined);
					});
				} else {
					destroy_effect(effect);
					fulfil(undefined);
				}
			});
		};
	}

	/**
	 * @param {() => void | (() => void)} fn
	 * @returns {Effect}
	 */
	function effect(fn) {
		return create_effect(EFFECT, fn, false);
	}

	/**
	 * @param {() => void | (() => void)} fn
	 * @returns {Effect}
	 */
	function async_effect(fn) {
		return create_effect(ASYNC | EFFECT_PRESERVED, fn, true);
	}

	/**
	 * @param {() => void | (() => void)} fn
	 * @returns {Effect}
	 */
	function render_effect(fn, flags = 0) {
		return create_effect(RENDER_EFFECT | flags, fn, true);
	}

	/**
	 * @param {(...expressions: any) => void | (() => void)} fn
	 * @param {Array<() => any>} sync
	 * @param {Array<() => Promise<any>>} async
	 */
	function template_effect(fn, sync = [], async = []) {
		flatten(sync, async, (values) => {
			create_effect(RENDER_EFFECT, () => fn(...values.map(get)), true);
		});
	}

	/**
	 * @param {(() => void)} fn
	 * @param {number} flags
	 */
	function block(fn, flags = 0) {
		var effect = create_effect(BLOCK_EFFECT | flags, fn, true);
		if (DEV) {
			effect.dev_stack = dev_stack;
		}
		return effect;
	}

	/**
	 * @param {(() => void)} fn
	 * @param {boolean} [push]
	 */
	function branch(fn, push = true) {
		return create_effect(BRANCH_EFFECT, fn, true, push);
	}

	/**
	 * @param {Effect} effect
	 */
	function execute_effect_teardown(effect) {
		var teardown = effect.teardown;
		if (teardown !== null) {
			const previously_destroying_effect = is_destroying_effect;
			const previous_reaction = active_reaction;
			set_is_destroying_effect(true);
			set_active_reaction(null);
			try {
				teardown.call(null);
			} finally {
				set_is_destroying_effect(previously_destroying_effect);
				set_active_reaction(previous_reaction);
			}
		}
	}

	/**
	 * @param {Effect} signal
	 * @param {boolean} remove_dom
	 * @returns {void}
	 */
	function destroy_effect_children(signal, remove_dom = false) {
		var effect = signal.first;
		signal.first = signal.last = null;

		while (effect !== null) {
			effect.ac?.abort(STALE_REACTION);

			var next = effect.next;

			if ((effect.f & ROOT_EFFECT) !== 0) {
				// this is now an independent root
				effect.parent = null;
			} else {
				destroy_effect(effect, remove_dom);
			}

			effect = next;
		}
	}

	/**
	 * @param {Effect} signal
	 * @returns {void}
	 */
	function destroy_block_effect_children(signal) {
		var effect = signal.first;

		while (effect !== null) {
			var next = effect.next;
			if ((effect.f & BRANCH_EFFECT) === 0) {
				destroy_effect(effect);
			}
			effect = next;
		}
	}

	/**
	 * @param {Effect} effect
	 * @param {boolean} [remove_dom]
	 * @returns {void}
	 */
	function destroy_effect(effect, remove_dom = true) {
		var removed = false;

		if (
			(remove_dom || (effect.f & HEAD_EFFECT) !== 0) &&
			effect.nodes_start !== null &&
			effect.nodes_end !== null
		) {
			remove_effect_dom(effect.nodes_start, /** @type {TemplateNode} */ (effect.nodes_end));
			removed = true;
		}

		destroy_effect_children(effect, remove_dom && !removed);
		remove_reactions(effect, 0);
		set_signal_status(effect, DESTROYED);

		var transitions = effect.transitions;

		if (transitions !== null) {
			for (const transition of transitions) {
				transition.stop();
			}
		}

		execute_effect_teardown(effect);

		var parent = effect.parent;

		// If the parent doesn't have any children, then skip this work altogether
		if (parent !== null && parent.first !== null) {
			unlink_effect(effect);
		}

		if (DEV) {
			effect.component_function = null;
		}

		// `first` and `child` are nulled out in destroy_effect_children
		// we don't null out `parent` so that error propagation can work correctly
		effect.next =
			effect.prev =
			effect.teardown =
			effect.ctx =
			effect.deps =
			effect.fn =
			effect.nodes_start =
			effect.nodes_end =
			effect.ac =
				null;
	}

	/**
	 *
	 * @param {TemplateNode | null} node
	 * @param {TemplateNode} end
	 */
	function remove_effect_dom(node, end) {
		while (node !== null) {
			/** @type {TemplateNode | null} */
			var next = node === end ? null : /** @type {TemplateNode} */ (get_next_sibling(node));

			node.remove();
			node = next;
		}
	}

	/**
	 * Detach an effect from the effect tree, freeing up memory and
	 * reducing the amount of work that happens on subsequent traversals
	 * @param {Effect} effect
	 */
	function unlink_effect(effect) {
		var parent = effect.parent;
		var prev = effect.prev;
		var next = effect.next;

		if (prev !== null) prev.next = next;
		if (next !== null) next.prev = prev;

		if (parent !== null) {
			if (parent.first === effect) parent.first = next;
			if (parent.last === effect) parent.last = prev;
		}
	}

	/**
	 * When a block effect is removed, we don't immediately destroy it or yank it
	 * out of the DOM, because it might have transitions. Instead, we 'pause' it.
	 * It stays around (in memory, and in the DOM) until outro transitions have
	 * completed, and if the state change is reversed then we _resume_ it.
	 * A paused effect does not update, and the DOM subtree becomes inert.
	 * @param {Effect} effect
	 * @param {() => void} [callback]
	 */
	function pause_effect(effect, callback) {
		/** @type {TransitionManager[]} */
		var transitions = [];

		pause_children(effect, transitions, true);

		run_out_transitions(transitions, () => {
			destroy_effect(effect);
			if (callback) callback();
		});
	}

	/**
	 * @param {TransitionManager[]} transitions
	 * @param {() => void} fn
	 */
	function run_out_transitions(transitions, fn) {
		var remaining = transitions.length;
		if (remaining > 0) {
			var check = () => --remaining || fn();
			for (var transition of transitions) {
				transition.out(check);
			}
		} else {
			fn();
		}
	}

	/**
	 * @param {Effect} effect
	 * @param {TransitionManager[]} transitions
	 * @param {boolean} local
	 */
	function pause_children(effect, transitions, local) {
		if ((effect.f & INERT) !== 0) return;
		effect.f ^= INERT;

		if (effect.transitions !== null) {
			for (const transition of effect.transitions) {
				if (transition.is_global || local) {
					transitions.push(transition);
				}
			}
		}

		var child = effect.first;

		while (child !== null) {
			var sibling = child.next;
			var transparent = (child.f & EFFECT_TRANSPARENT) !== 0 || (child.f & BRANCH_EFFECT) !== 0;
			// TODO we don't need to call pause_children recursively with a linked list in place
			// it's slightly more involved though as we have to account for `transparent` changing
			// through the tree.
			pause_children(child, transitions, transparent ? local : false);
			child = sibling;
		}
	}

	/**
	 * The opposite of `pause_effect`. We call this if (for example)
	 * `x` becomes falsy then truthy: `{#if x}...{/if}`
	 * @param {Effect} effect
	 */
	function resume_effect(effect) {
		resume_children(effect, true);
	}

	/**
	 * @param {Effect} effect
	 * @param {boolean} local
	 */
	function resume_children(effect, local) {
		if ((effect.f & INERT) === 0) return;
		effect.f ^= INERT;

		// If a dependency of this effect changed while it was paused,
		// schedule the effect to update. we don't use `is_dirty`
		// here because we don't want to eagerly recompute a derived like
		// `{#if foo}{foo.bar()}{/if}` if `foo` is now `undefined
		if ((effect.f & CLEAN) === 0) {
			set_signal_status(effect, DIRTY);
			schedule_effect(effect);
		}

		var child = effect.first;

		while (child !== null) {
			var sibling = child.next;
			var transparent = (child.f & EFFECT_TRANSPARENT) !== 0 || (child.f & BRANCH_EFFECT) !== 0;
			// TODO we don't need to call resume_children recursively with a linked list in place
			// it's slightly more involved though as we have to account for `transparent` changing
			// through the tree.
			resume_children(child, transparent ? local : false);
			child = sibling;
		}

		if (effect.transitions !== null) {
			for (const transition of effect.transitions) {
				if (transition.is_global || local) {
					transition.in();
				}
			}
		}
	}

	/** @import { Derived, Effect, Reaction, Signal, Source, Value } from '#client' */

	let is_updating_effect = false;

	/** @param {boolean} value */
	function set_is_updating_effect(value) {
		is_updating_effect = value;
	}

	let is_destroying_effect = false;

	/** @param {boolean} value */
	function set_is_destroying_effect(value) {
		is_destroying_effect = value;
	}

	/** @type {null | Reaction} */
	let active_reaction = null;

	let untracking = false;

	/** @param {null | Reaction} reaction */
	function set_active_reaction(reaction) {
		active_reaction = reaction;
	}

	/** @type {null | Effect} */
	let active_effect = null;

	/** @param {null | Effect} effect */
	function set_active_effect(effect) {
		active_effect = effect;
	}

	/**
	 * When sources are created within a reaction, reading and writing
	 * them within that reaction should not cause a re-run
	 * @type {null | Source[]}
	 */
	let current_sources = null;

	/** @param {Value} value */
	function push_reaction_value(value) {
		if (active_reaction !== null && (true)) {
			if (current_sources === null) {
				current_sources = [value];
			} else {
				current_sources.push(value);
			}
		}
	}

	/**
	 * The dependencies of the reaction that is currently being executed. In many cases,
	 * the dependencies are unchanged between runs, and so this will be `null` unless
	 * and until a new dependency is accessed — we track this via `skipped_deps`
	 * @type {null | Value[]}
	 */
	let new_deps = null;

	let skipped_deps = 0;

	/**
	 * Tracks writes that the effect it's executed in doesn't listen to yet,
	 * so that the dependency can be added to the effect later on if it then reads it
	 * @type {null | Source[]}
	 */
	let untracked_writes = null;

	/** @param {null | Source[]} value */
	function set_untracked_writes(value) {
		untracked_writes = value;
	}

	/**
	 * @type {number} Used by sources and deriveds for handling updates.
	 * Version starts from 1 so that unowned deriveds differentiate between a created effect and a run one for tracing
	 **/
	let write_version = 1;

	/** @type {number} Used to version each read of a source of derived to avoid duplicating depedencies inside a reaction */
	let read_version = 0;

	let update_version = read_version;

	/** @param {number} value */
	function set_update_version(value) {
		update_version = value;
	}

	// If we are working with a get() chain that has no active container,
	// to prevent memory leaks, we skip adding the reaction.
	let skip_reaction = false;

	function increment_write_version() {
		return ++write_version;
	}

	/**
	 * Determines whether a derived or effect is dirty.
	 * If it is MAYBE_DIRTY, will set the status to CLEAN
	 * @param {Reaction} reaction
	 * @returns {boolean}
	 */
	function is_dirty(reaction) {
		var flags = reaction.f;

		if ((flags & DIRTY) !== 0) {
			return true;
		}

		if ((flags & MAYBE_DIRTY) !== 0) {
			var dependencies = reaction.deps;
			var is_unowned = (flags & UNOWNED) !== 0;

			if (dependencies !== null) {
				var i;
				var dependency;
				var is_disconnected = (flags & DISCONNECTED) !== 0;
				var is_unowned_connected = is_unowned && active_effect !== null && !skip_reaction;
				var length = dependencies.length;

				// If we are working with a disconnected or an unowned signal that is now connected (due to an active effect)
				// then we need to re-connect the reaction to the dependency, unless the effect has already been destroyed
				// (which can happen if the derived is read by an async derived)
				if (
					(is_disconnected || is_unowned_connected) &&
					(active_effect === null || (active_effect.f & DESTROYED) === 0)
				) {
					var derived = /** @type {Derived} */ (reaction);
					var parent = derived.parent;

					for (i = 0; i < length; i++) {
						dependency = dependencies[i];

						// We always re-add all reactions (even duplicates) if the derived was
						// previously disconnected, however we don't if it was unowned as we
						// de-duplicate dependencies in that case
						if (is_disconnected || !dependency?.reactions?.includes(derived)) {
							(dependency.reactions ??= []).push(derived);
						}
					}

					if (is_disconnected) {
						derived.f ^= DISCONNECTED;
					}
					// If the unowned derived is now fully connected to the graph again (it's unowned and reconnected, has a parent
					// and the parent is not unowned), then we can mark it as connected again, removing the need for the unowned
					// flag
					if (is_unowned_connected && parent !== null && (parent.f & UNOWNED) === 0) {
						derived.f ^= UNOWNED;
					}
				}

				for (i = 0; i < length; i++) {
					dependency = dependencies[i];

					if (is_dirty(/** @type {Derived} */ (dependency))) {
						update_derived(/** @type {Derived} */ (dependency));
					}

					if (dependency.wv > reaction.wv) {
						return true;
					}
				}
			}

			// Unowned signals should never be marked as clean unless they
			// are used within an active_effect without skip_reaction
			if (!is_unowned || (active_effect !== null && !skip_reaction)) {
				set_signal_status(reaction, CLEAN);
			}
		}

		return false;
	}

	/**
	 * @param {Value} signal
	 * @param {Effect} effect
	 * @param {boolean} [root]
	 */
	function schedule_possible_effect_self_invalidation(signal, effect, root = true) {
		var reactions = signal.reactions;
		if (reactions === null) return;

		if (current_sources?.includes(signal)) {
			return;
		}

		for (var i = 0; i < reactions.length; i++) {
			var reaction = reactions[i];

			if ((reaction.f & DERIVED) !== 0) {
				schedule_possible_effect_self_invalidation(/** @type {Derived} */ (reaction), effect, false);
			} else if (effect === reaction) {
				if (root) {
					set_signal_status(reaction, DIRTY);
				} else if ((reaction.f & CLEAN) !== 0) {
					set_signal_status(reaction, MAYBE_DIRTY);
				}
				schedule_effect(/** @type {Effect} */ (reaction));
			}
		}
	}

	/** @param {Reaction} reaction */
	function update_reaction(reaction) {
		var previous_deps = new_deps;
		var previous_skipped_deps = skipped_deps;
		var previous_untracked_writes = untracked_writes;
		var previous_reaction = active_reaction;
		var previous_skip_reaction = skip_reaction;
		var previous_sources = current_sources;
		var previous_component_context = component_context;
		var previous_untracking = untracking;
		var previous_update_version = update_version;

		var flags = reaction.f;

		new_deps = /** @type {null | Value[]} */ (null);
		skipped_deps = 0;
		untracked_writes = null;
		skip_reaction =
			(flags & UNOWNED) !== 0 && (untracking || !is_updating_effect || active_reaction === null);
		active_reaction = (flags & (BRANCH_EFFECT | ROOT_EFFECT)) === 0 ? reaction : null;

		current_sources = null;
		set_component_context(reaction.ctx);
		untracking = false;
		update_version = ++read_version;

		if (reaction.ac !== null) {
			reaction.ac.abort(STALE_REACTION);
			reaction.ac = null;
		}

		try {
			reaction.f |= REACTION_IS_UPDATING;
			var result = /** @type {Function} */ (0, reaction.fn)();
			var deps = reaction.deps;

			if (new_deps !== null) {
				var i;

				remove_reactions(reaction, skipped_deps);

				if (deps !== null && skipped_deps > 0) {
					deps.length = skipped_deps + new_deps.length;
					for (i = 0; i < new_deps.length; i++) {
						deps[skipped_deps + i] = new_deps[i];
					}
				} else {
					reaction.deps = deps = new_deps;
				}

				if (
					!skip_reaction ||
					// Deriveds that already have reactions can cleanup, so we still add them as reactions
					((flags & DERIVED) !== 0 &&
						/** @type {import('#client').Derived} */ (reaction).reactions !== null)
				) {
					for (i = skipped_deps; i < deps.length; i++) {
						(deps[i].reactions ??= []).push(reaction);
					}
				}
			} else if (deps !== null && skipped_deps < deps.length) {
				remove_reactions(reaction, skipped_deps);
				deps.length = skipped_deps;
			}

			// If we're inside an effect and we have untracked writes, then we need to
			// ensure that if any of those untracked writes result in re-invalidation
			// of the current effect, then that happens accordingly
			if (
				is_runes() &&
				untracked_writes !== null &&
				!untracking &&
				deps !== null &&
				(reaction.f & (DERIVED | MAYBE_DIRTY | DIRTY)) === 0
			) {
				for (i = 0; i < /** @type {Source[]} */ (untracked_writes).length; i++) {
					schedule_possible_effect_self_invalidation(
						untracked_writes[i],
						/** @type {Effect} */ (reaction)
					);
				}
			}

			// If we are returning to an previous reaction then
			// we need to increment the read version to ensure that
			// any dependencies in this reaction aren't marked with
			// the same version
			if (previous_reaction !== null && previous_reaction !== reaction) {
				read_version++;

				if (untracked_writes !== null) {
					if (previous_untracked_writes === null) {
						previous_untracked_writes = untracked_writes;
					} else {
						previous_untracked_writes.push(.../** @type {Source[]} */ (untracked_writes));
					}
				}
			}

			if ((reaction.f & ERROR_VALUE) !== 0) {
				reaction.f ^= ERROR_VALUE;
			}

			return result;
		} catch (error) {
			return handle_error(error);
		} finally {
			reaction.f ^= REACTION_IS_UPDATING;
			new_deps = previous_deps;
			skipped_deps = previous_skipped_deps;
			untracked_writes = previous_untracked_writes;
			active_reaction = previous_reaction;
			skip_reaction = previous_skip_reaction;
			current_sources = previous_sources;
			set_component_context(previous_component_context);
			untracking = previous_untracking;
			update_version = previous_update_version;
		}
	}

	/**
	 * @template V
	 * @param {Reaction} signal
	 * @param {Value<V>} dependency
	 * @returns {void}
	 */
	function remove_reaction(signal, dependency) {
		let reactions = dependency.reactions;
		if (reactions !== null) {
			var index = index_of.call(reactions, signal);
			if (index !== -1) {
				var new_length = reactions.length - 1;
				if (new_length === 0) {
					reactions = dependency.reactions = null;
				} else {
					// Swap with last element and then remove.
					reactions[index] = reactions[new_length];
					reactions.pop();
				}
			}
		}

		// If the derived has no reactions, then we can disconnect it from the graph,
		// allowing it to either reconnect in the future, or be GC'd by the VM.
		if (
			reactions === null &&
			(dependency.f & DERIVED) !== 0 &&
			// Destroying a child effect while updating a parent effect can cause a dependency to appear
			// to be unused, when in fact it is used by the currently-updating parent. Checking `new_deps`
			// allows us to skip the expensive work of disconnecting and immediately reconnecting it
			(new_deps === null || !new_deps.includes(dependency))
		) {
			set_signal_status(dependency, MAYBE_DIRTY);
			// If we are working with a derived that is owned by an effect, then mark it as being
			// disconnected.
			if ((dependency.f & (UNOWNED | DISCONNECTED)) === 0) {
				dependency.f ^= DISCONNECTED;
			}
			// Disconnect any reactions owned by this reaction
			destroy_derived_effects(/** @type {Derived} **/ (dependency));
			remove_reactions(/** @type {Derived} **/ (dependency), 0);
		}
	}

	/**
	 * @param {Reaction} signal
	 * @param {number} start_index
	 * @returns {void}
	 */
	function remove_reactions(signal, start_index) {
		var dependencies = signal.deps;
		if (dependencies === null) return;

		for (var i = start_index; i < dependencies.length; i++) {
			remove_reaction(signal, dependencies[i]);
		}
	}

	/**
	 * @param {Effect} effect
	 * @returns {void}
	 */
	function update_effect(effect) {
		var flags = effect.f;

		if ((flags & DESTROYED) !== 0) {
			return;
		}

		set_signal_status(effect, CLEAN);

		var previous_effect = active_effect;
		var was_updating_effect = is_updating_effect;

		active_effect = effect;
		is_updating_effect = true;

		if (DEV) {
			var previous_component_fn = dev_current_component_function;
			set_dev_current_component_function(effect.component_function);
			var previous_stack = /** @type {any} */ (dev_stack);
			// only block effects have a dev stack, keep the current one otherwise
			set_dev_stack(effect.dev_stack ?? dev_stack);
		}

		try {
			if ((flags & BLOCK_EFFECT) !== 0) {
				destroy_block_effect_children(effect);
			} else {
				destroy_effect_children(effect);
			}

			execute_effect_teardown(effect);
			var teardown = update_reaction(effect);
			effect.teardown = typeof teardown === 'function' ? teardown : null;
			effect.wv = write_version;

			// In DEV, increment versions of any sources that were written to during the effect,
			// so that they are correctly marked as dirty when the effect re-runs
			var dep; if (DEV && tracing_mode_flag && (effect.f & DIRTY) !== 0 && effect.deps !== null) ;

			if (DEV) {
				dev_effect_stack.push(effect);
			}
		} finally {
			is_updating_effect = was_updating_effect;
			active_effect = previous_effect;

			if (DEV) {
				set_dev_current_component_function(previous_component_fn);
				set_dev_stack(previous_stack);
			}
		}
	}

	/**
	 * @template V
	 * @param {Value<V>} signal
	 * @returns {V}
	 */
	function get(signal) {
		var flags = signal.f;
		var is_derived = (flags & DERIVED) !== 0;

		// Register the dependency on the current reaction signal.
		if (active_reaction !== null && !untracking) {
			// if we're in a derived that is being read inside an _async_ derived,
			// it's possible that the effect was already destroyed. In this case,
			// we don't add the dependency, because that would create a memory leak
			var destroyed = active_effect !== null && (active_effect.f & DESTROYED) !== 0;

			if (!destroyed && !current_sources?.includes(signal)) {
				var deps = active_reaction.deps;

				if ((active_reaction.f & REACTION_IS_UPDATING) !== 0) {
					// we're in the effect init/update cycle
					if (signal.rv < read_version) {
						signal.rv = read_version;

						// If the signal is accessing the same dependencies in the same
						// order as it did last time, increment `skipped_deps`
						// rather than updating `new_deps`, which creates GC cost
						if (new_deps === null && deps !== null && deps[skipped_deps] === signal) {
							skipped_deps++;
						} else if (new_deps === null) {
							new_deps = [signal];
						} else if (!skip_reaction || !new_deps.includes(signal)) {
							// Normally we can push duplicated dependencies to `new_deps`, but if we're inside
							// an unowned derived because skip_reaction is true, then we need to ensure that
							// we don't have duplicates
							new_deps.push(signal);
						}
					}
				} else {
					// we're adding a dependency outside the init/update cycle
					// (i.e. after an `await`)
					(active_reaction.deps ??= []).push(signal);

					var reactions = signal.reactions;

					if (reactions === null) {
						signal.reactions = [active_reaction];
					} else if (!reactions.includes(active_reaction)) {
						reactions.push(active_reaction);
					}
				}
			}
		} else if (
			is_derived &&
			/** @type {Derived} */ (signal).deps === null &&
			/** @type {Derived} */ (signal).effects === null
		) {
			var derived = /** @type {Derived} */ (signal);
			var parent = derived.parent;

			if (parent !== null && (parent.f & UNOWNED) === 0) {
				// If the derived is owned by another derived then mark it as unowned
				// as the derived value might have been referenced in a different context
				// since and thus its parent might not be its true owner anymore
				derived.f ^= UNOWNED;
			}
		}

		if (DEV) {
			if (current_async_effect) {
				var tracking = (current_async_effect.f & REACTION_IS_UPDATING) !== 0;
				var was_read = current_async_effect.deps?.includes(signal);

				if (!tracking && !was_read) {
					await_reactivity_loss(/** @type {string} */ (signal.label));

					var trace = get_stack('TracedAt');
					// eslint-disable-next-line no-console
					if (trace) console.warn(trace);
				}
			}

			recent_async_deriveds.delete(signal);
		}

		if (is_destroying_effect) {
			if (old_values.has(signal)) {
				return old_values.get(signal);
			}

			if (is_derived) {
				derived = /** @type {Derived} */ (signal);

				var value = derived.v;

				// if the derived is dirty, or depends on the values that just changed, re-execute
				if ((derived.f & CLEAN) !== 0 || depends_on_old_values(derived)) {
					value = execute_derived(derived);
				}

				old_values.set(derived, value);

				return value;
			}
		} else if (is_derived) {
			derived = /** @type {Derived} */ (signal);

			if (batch_deriveds?.has(derived)) {
				return batch_deriveds.get(derived);
			}

			if (is_dirty(derived)) {
				update_derived(derived);
			}
		}

		if ((signal.f & ERROR_VALUE) !== 0) {
			throw signal.v;
		}

		return signal.v;
	}

	/** @param {Derived} derived */
	function depends_on_old_values(derived) {
		if (derived.v === UNINITIALIZED) return true; // we don't know, so assume the worst
		if (derived.deps === null) return false;

		for (const dep of derived.deps) {
			if (old_values.has(dep)) {
				return true;
			}

			if ((dep.f & DERIVED) !== 0 && depends_on_old_values(/** @type {Derived} */ (dep))) {
				return true;
			}
		}

		return false;
	}

	/**
	 * When used inside a [`$derived`](https://svelte.dev/docs/svelte/$derived) or [`$effect`](https://svelte.dev/docs/svelte/$effect),
	 * any state read inside `fn` will not be treated as a dependency.
	 *
	 * ```ts
	 * $effect(() => {
	 *   // this will run when `data` changes, but not when `time` changes
	 *   save(data, {
	 *     timestamp: untrack(() => time)
	 *   });
	 * });
	 * ```
	 * @template T
	 * @param {() => T} fn
	 * @returns {T}
	 */
	function untrack(fn) {
		var previous_untracking = untracking;
		try {
			untracking = true;
			return fn();
		} finally {
			untracking = previous_untracking;
		}
	}

	const STATUS_MASK = -7169;

	/**
	 * @param {Signal} signal
	 * @param {number} status
	 * @returns {void}
	 */
	function set_signal_status(signal, status) {
		signal.f = (signal.f & STATUS_MASK) | status;
	}

	/**
	 * Subset of delegated events which should be passive by default.
	 * These two are already passive via browser defaults on window, document and body.
	 * But since
	 * - we're delegating them
	 * - they happen often
	 * - they apply to mobile which is generally less performant
	 * we're marking them as passive by default for other elements, too.
	 */
	const PASSIVE_EVENTS = ['touchstart', 'touchmove'];

	/**
	 * Returns `true` if `name` is a passive event
	 * @param {string} name
	 */
	function is_passive_event(name) {
		return PASSIVE_EVENTS.includes(name);
	}

	/** @import { SourceLocation } from '#client' */

	/**
	 * @param {any} fn
	 * @param {string} filename
	 * @param {SourceLocation[]} locations
	 * @returns {any}
	 */
	function add_locations(fn, filename, locations) {
		return (/** @type {any[]} */ ...args) => {
			const dom = fn(...args);

			var node = dom.nodeType === DOCUMENT_FRAGMENT_NODE ? dom.firstChild : dom;
			assign_locations(node, filename, locations);

			return dom;
		};
	}

	/**
	 * @param {Element} element
	 * @param {string} filename
	 * @param {SourceLocation} location
	 */
	function assign_location(element, filename, location) {
		// @ts-expect-error
		element.__svelte_meta = {
			parent: dev_stack,
			loc: { file: filename, line: location[0], column: location[1] }
		};

		if (location[2]) {
			assign_locations(element.firstChild, filename, location[2]);
		}
	}

	/**
	 * @param {Node | null} node
	 * @param {string} filename
	 * @param {SourceLocation[]} locations
	 */
	function assign_locations(node, filename, locations) {
		var i = 0;

		while (node && i < locations.length) {

			if (node.nodeType === ELEMENT_NODE) {
				assign_location(/** @type {Element} */ (node), filename, locations[i++]);
			}

			node = node.nextSibling;
		}
	}

	let listening_to_form_reset = false;

	function add_form_reset_listener() {
		if (!listening_to_form_reset) {
			listening_to_form_reset = true;
			document.addEventListener(
				'reset',
				(evt) => {
					// Needs to happen one tick later or else the dom properties of the form
					// elements have not updated to their reset values yet
					Promise.resolve().then(() => {
						if (!evt.defaultPrevented) {
							for (const e of /**@type {HTMLFormElement} */ (evt.target).elements) {
								// @ts-expect-error
								e.__on_r?.();
							}
						}
					});
				},
				// In the capture phase to guarantee we get noticed of it (no possiblity of stopPropagation)
				{ capture: true }
			);
		}
	}

	/**
	 * @template T
	 * @param {() => T} fn
	 */
	function without_reactive_context(fn) {
		var previous_reaction = active_reaction;
		var previous_effect = active_effect;
		set_active_reaction(null);
		set_active_effect(null);
		try {
			return fn();
		} finally {
			set_active_reaction(previous_reaction);
			set_active_effect(previous_effect);
		}
	}

	/**
	 * Listen to the given event, and then instantiate a global form reset listener if not already done,
	 * to notify all bindings when the form is reset
	 * @param {HTMLElement} element
	 * @param {string} event
	 * @param {(is_reset?: true) => void} handler
	 * @param {(is_reset?: true) => void} [on_reset]
	 */
	function listen_to_event_and_reset_event(element, event, handler, on_reset = handler) {
		element.addEventListener(event, () => without_reactive_context(handler));
		// @ts-expect-error
		const prev = element.__on_r;
		if (prev) {
			// special case for checkbox that can have multiple binds (group & checked)
			// @ts-expect-error
			element.__on_r = () => {
				prev();
				on_reset(true);
			};
		} else {
			// @ts-expect-error
			element.__on_r = () => on_reset(true);
		}

		add_form_reset_listener();
	}

	/** @type {Set<string>} */
	const all_registered_events = new Set();

	/** @type {Set<(events: Array<string>) => void>} */
	const root_event_handles = new Set();

	/**
	 * @param {string} event_name
	 * @param {EventTarget} dom
	 * @param {EventListener} [handler]
	 * @param {AddEventListenerOptions} [options]
	 */
	function create_event(event_name, dom, handler, options = {}) {
		/**
		 * @this {EventTarget}
		 */
		function target_handler(/** @type {Event} */ event) {
			if (!options.capture) {
				// Only call in the bubble phase, else delegated events would be called before the capturing events
				handle_event_propagation.call(dom, event);
			}
			if (!event.cancelBubble) {
				return without_reactive_context(() => {
					return handler?.call(this, event);
				});
			}
		}

		// Chrome has a bug where pointer events don't work when attached to a DOM element that has been cloned
		// with cloneNode() and the DOM element is disconnected from the document. To ensure the event works, we
		// defer the attachment till after it's been appended to the document. TODO: remove this once Chrome fixes
		// this bug. The same applies to wheel events and touch events.
		if (
			event_name.startsWith('pointer') ||
			event_name.startsWith('touch') ||
			event_name === 'wheel'
		) {
			queue_micro_task(() => {
				dom.addEventListener(event_name, target_handler, options);
			});
		} else {
			dom.addEventListener(event_name, target_handler, options);
		}

		return target_handler;
	}

	/**
	 * @param {string} event_name
	 * @param {Element} dom
	 * @param {EventListener} [handler]
	 * @param {boolean} [capture]
	 * @param {boolean} [passive]
	 * @returns {void}
	 */
	function event(event_name, dom, handler, capture, passive) {
		var options = { capture, passive };
		var target_handler = create_event(event_name, dom, handler, options);

		if (
			dom === document.body ||
			// @ts-ignore
			dom === window ||
			// @ts-ignore
			dom === document ||
			// Firefox has quirky behavior, it can happen that we still get "canplay" events when the element is already removed
			dom instanceof HTMLMediaElement
		) {
			teardown(() => {
				dom.removeEventListener(event_name, target_handler, options);
			});
		}
	}

	/**
	 * @this {EventTarget}
	 * @param {Event} event
	 * @returns {void}
	 */
	function handle_event_propagation(event) {
		var handler_element = this;
		var owner_document = /** @type {Node} */ (handler_element).ownerDocument;
		var event_name = event.type;
		var path = event.composedPath?.() || [];
		var current_target = /** @type {null | Element} */ (path[0] || event.target);

		// composedPath contains list of nodes the event has propagated through.
		// We check __root to skip all nodes below it in case this is a
		// parent of the __root node, which indicates that there's nested
		// mounted apps. In this case we don't want to trigger events multiple times.
		var path_idx = 0;

		// @ts-expect-error is added below
		var handled_at = event.__root;

		if (handled_at) {
			var at_idx = path.indexOf(handled_at);
			if (
				at_idx !== -1 &&
				(handler_element === document || handler_element === /** @type {any} */ (window))
			) {
				// This is the fallback document listener or a window listener, but the event was already handled
				// -> ignore, but set handle_at to document/window so that we're resetting the event
				// chain in case someone manually dispatches the same event object again.
				// @ts-expect-error
				event.__root = handler_element;
				return;
			}

			// We're deliberately not skipping if the index is higher, because
			// someone could create an event programmatically and emit it multiple times,
			// in which case we want to handle the whole propagation chain properly each time.
			// (this will only be a false negative if the event is dispatched multiple times and
			// the fallback document listener isn't reached in between, but that's super rare)
			var handler_idx = path.indexOf(handler_element);
			if (handler_idx === -1) {
				// handle_idx can theoretically be -1 (happened in some JSDOM testing scenarios with an event listener on the window object)
				// so guard against that, too, and assume that everything was handled at this point.
				return;
			}

			if (at_idx <= handler_idx) {
				path_idx = at_idx;
			}
		}

		current_target = /** @type {Element} */ (path[path_idx] || event.target);
		// there can only be one delegated event per element, and we either already handled the current target,
		// or this is the very first target in the chain which has a non-delegated listener, in which case it's safe
		// to handle a possible delegated event on it later (through the root delegation listener for example).
		if (current_target === handler_element) return;

		// Proxy currentTarget to correct target
		define_property(event, 'currentTarget', {
			configurable: true,
			get() {
				return current_target || owner_document;
			}
		});

		// This started because of Chromium issue https://chromestatus.com/feature/5128696823545856,
		// where removal or moving of of the DOM can cause sync `blur` events to fire, which can cause logic
		// to run inside the current `active_reaction`, which isn't what we want at all. However, on reflection,
		// it's probably best that all event handled by Svelte have this behaviour, as we don't really want
		// an event handler to run in the context of another reaction or effect.
		var previous_reaction = active_reaction;
		var previous_effect = active_effect;
		set_active_reaction(null);
		set_active_effect(null);

		try {
			/**
			 * @type {unknown}
			 */
			var throw_error;
			/**
			 * @type {unknown[]}
			 */
			var other_errors = [];

			while (current_target !== null) {
				/** @type {null | Element} */
				var parent_element =
					current_target.assignedSlot ||
					current_target.parentNode ||
					/** @type {any} */ (current_target).host ||
					null;

				try {
					// @ts-expect-error
					var delegated = current_target['__' + event_name];

					if (
						delegated != null &&
						(!(/** @type {any} */ (current_target).disabled) ||
							// DOM could've been updated already by the time this is reached, so we check this as well
							// -> the target could not have been disabled because it emits the event in the first place
							event.target === current_target)
					) {
						if (is_array(delegated)) {
							var [fn, ...data] = delegated;
							fn.apply(current_target, [event, ...data]);
						} else {
							delegated.call(current_target, event);
						}
					}
				} catch (error) {
					if (throw_error) {
						other_errors.push(error);
					} else {
						throw_error = error;
					}
				}
				if (event.cancelBubble || parent_element === handler_element || parent_element === null) {
					break;
				}
				current_target = parent_element;
			}

			if (throw_error) {
				for (let error of other_errors) {
					// Throw the rest of the errors, one-by-one on a microtask
					queueMicrotask(() => {
						throw error;
					});
				}
				throw throw_error;
			}
		} finally {
			// @ts-expect-error is used above
			event.__root = handler_element;
			// @ts-ignore remove proxy on currentTarget
			delete event.currentTarget;
			set_active_reaction(previous_reaction);
			set_active_effect(previous_effect);
		}
	}

	/** @param {string} html */
	function create_fragment_from_html(html) {
		var elem = document.createElement('template');
		elem.innerHTML = html.replaceAll('<!>', '<!---->'); // XHTML compliance
		return elem.content;
	}

	/** @import { Effect, TemplateNode } from '#client' */
	/** @import { TemplateStructure } from './types' */

	/**
	 * @param {TemplateNode} start
	 * @param {TemplateNode | null} end
	 */
	function assign_nodes(start, end) {
		var effect = /** @type {Effect} */ (active_effect);
		if (effect.nodes_start === null) {
			effect.nodes_start = start;
			effect.nodes_end = end;
		}
	}

	/**
	 * @param {string} content
	 * @param {number} flags
	 * @returns {() => Node | Node[]}
	 */
	/*#__NO_SIDE_EFFECTS__*/
	function from_html(content, flags) {
		var is_fragment = (flags & TEMPLATE_FRAGMENT) !== 0;
		var use_import_node = (flags & TEMPLATE_USE_IMPORT_NODE) !== 0;

		/** @type {Node} */
		var node;

		/**
		 * Whether or not the first item is a text/element node. If not, we need to
		 * create an additional comment node to act as `effect.nodes.start`
		 */
		var has_start = !content.startsWith('<!>');

		return () => {

			if (node === undefined) {
				node = create_fragment_from_html(has_start ? content : '<!>' + content);
				if (!is_fragment) node = /** @type {Node} */ (get_first_child(node));
			}

			var clone = /** @type {TemplateNode} */ (
				use_import_node || is_firefox ? document.importNode(node, true) : node.cloneNode(true)
			);

			if (is_fragment) {
				var start = /** @type {TemplateNode} */ (get_first_child(clone));
				var end = /** @type {TemplateNode} */ (clone.lastChild);

				assign_nodes(start, end);
			} else {
				assign_nodes(clone, clone);
			}

			return clone;
		};
	}

	/**
	 * Assign the created (or in hydration mode, traversed) dom elements to the current block
	 * and insert the elements into the dom (in client mode).
	 * @param {Text | Comment | Element} anchor
	 * @param {DocumentFragment | Element} dom
	 */
	function append(anchor, dom) {

		if (anchor === null) {
			// edge case — void `<svelte:element>` with content
			return;
		}

		anchor.before(/** @type {Node} */ (dom));
	}

	/** @import { ComponentContext, Effect, TemplateNode } from '#client' */
	/** @import { Component, ComponentType, SvelteComponent, MountOptions } from '../../index.js' */

	/**
	 * @param {Element} text
	 * @param {string} value
	 * @returns {void}
	 */
	function set_text(text, value) {
		// For objects, we apply string coercion (which might make things like $state array references in the template reactive) before diffing
		var str = value == null ? '' : typeof value === 'object' ? value + '' : value;
		// @ts-expect-error
		if (str !== (text.__t ??= text.nodeValue)) {
			// @ts-expect-error
			text.__t = str;
			text.nodeValue = str + '';
		}
	}

	/**
	 * Mounts a component to the given target and returns the exports and potentially the props (if compiled with `accessors: true`) of the component.
	 * Transitions will play during the initial render unless the `intro` option is set to `false`.
	 *
	 * @template {Record<string, any>} Props
	 * @template {Record<string, any>} Exports
	 * @param {ComponentType<SvelteComponent<Props>> | Component<Props, Exports, any>} component
	 * @param {MountOptions<Props>} options
	 * @returns {Exports}
	 */
	function mount(component, options) {
		return _mount(component, options);
	}

	/** @type {Map<string, number>} */
	const document_listeners = new Map();

	/**
	 * @template {Record<string, any>} Exports
	 * @param {ComponentType<SvelteComponent<any>> | Component<any>} Component
	 * @param {MountOptions} options
	 * @returns {Exports}
	 */
	function _mount(Component, { target, anchor, props = {}, events, context, intro = true }) {
		init_operations();

		var registered_events = new Set();

		/** @param {Array<string>} events */
		var event_handle = (events) => {
			for (var i = 0; i < events.length; i++) {
				var event_name = events[i];

				if (registered_events.has(event_name)) continue;
				registered_events.add(event_name);

				var passive = is_passive_event(event_name);

				// Add the event listener to both the container and the document.
				// The container listener ensures we catch events from within in case
				// the outer content stops propagation of the event.
				target.addEventListener(event_name, handle_event_propagation, { passive });

				var n = document_listeners.get(event_name);

				if (n === undefined) {
					// The document listener ensures we catch events that originate from elements that were
					// manually moved outside of the container (e.g. via manual portals).
					document.addEventListener(event_name, handle_event_propagation, { passive });
					document_listeners.set(event_name, 1);
				} else {
					document_listeners.set(event_name, n + 1);
				}
			}
		};

		event_handle(array_from(all_registered_events));
		root_event_handles.add(event_handle);

		/** @type {Exports} */
		// @ts-expect-error will be defined because the render effect runs synchronously
		var component = undefined;

		var unmount = component_root(() => {
			var anchor_node = anchor ?? target.appendChild(create_text());

			branch(() => {
				if (context) {
					push({});
					var ctx = /** @type {ComponentContext} */ (component_context);
					ctx.c = context;
				}

				if (events) {
					// We can't spread the object or else we'd lose the state proxy stuff, if it is one
					/** @type {any} */ (props).$$events = events;
				}
				// @ts-expect-error the public typings are not what the actual function looks like
				component = Component(anchor_node, props) || {};

				if (context) {
					pop();
				}
			});

			return () => {
				for (var event_name of registered_events) {
					target.removeEventListener(event_name, handle_event_propagation);

					var n = /** @type {number} */ (document_listeners.get(event_name));

					if (--n === 0) {
						document.removeEventListener(event_name, handle_event_propagation);
						document_listeners.delete(event_name);
					} else {
						document_listeners.set(event_name, n);
					}
				}

				root_event_handles.delete(event_handle);

				if (anchor_node !== anchor) {
					anchor_node.parentNode?.removeChild(anchor_node);
				}
			};
		});

		mounted_components.set(component, unmount);
		return component;
	}

	/**
	 * References of the components that were mounted or hydrated.
	 * Uses a `WeakMap` to avoid memory leaks.
	 */
	let mounted_components = new WeakMap();

	/** @param {Function & { [FILENAME]: string }} target */
	function check_target(target) {
		if (target) {
			component_api_invalid_new(target[FILENAME] ?? 'a component', target.name);
		}
	}

	function legacy_api() {
		const component = component_context?.function;

		/** @param {string} method */
		function error(method) {
			component_api_changed(method, component[FILENAME]);
		}

		return {
			$destroy: () => error('$destroy()'),
			$on: () => error('$on(...)'),
			$set: () => error('$set(...)')
		};
	}

	/** @import { Effect, TemplateNode } from '#client' */
	/** @import { Batch } from '../../reactivity/batch.js'; */

	// TODO reinstate https://github.com/sveltejs/svelte/pull/15250

	/**
	 * @param {TemplateNode} node
	 * @param {(branch: (fn: (anchor: Node) => void, flag?: boolean) => void) => void} fn
	 * @param {boolean} [elseif] True if this is an `{:else if ...}` block rather than an `{#if ...}`, as that affects which transitions are considered 'local'
	 * @returns {void}
	 */
	function if_block(node, fn, elseif = false) {

		var anchor = node;

		/** @type {Effect | null} */
		var consequent_effect = null;

		/** @type {Effect | null} */
		var alternate_effect = null;

		/** @type {UNINITIALIZED | boolean | null} */
		var condition = UNINITIALIZED;

		var flags = elseif ? EFFECT_TRANSPARENT : 0;

		var has_branch = false;

		const set_branch = (/** @type {(anchor: Node) => void} */ fn, flag = true) => {
			has_branch = true;
			update_branch(flag, fn);
		};

		/** @type {DocumentFragment | null} */
		var offscreen_fragment = null;

		function commit() {
			if (offscreen_fragment !== null) {
				// remove the anchor
				/** @type {Text} */ (offscreen_fragment.lastChild).remove();

				anchor.before(offscreen_fragment);
				offscreen_fragment = null;
			}

			var active = condition ? consequent_effect : alternate_effect;
			var inactive = condition ? alternate_effect : consequent_effect;

			if (active) {
				resume_effect(active);
			}

			if (inactive) {
				pause_effect(inactive, () => {
					if (condition) {
						alternate_effect = null;
					} else {
						consequent_effect = null;
					}
				});
			}
		}

		const update_branch = (
			/** @type {boolean | null} */ new_condition,
			/** @type {null | ((anchor: Node) => void)} */ fn
		) => {
			if (condition === (condition = new_condition)) return;

			var defer = should_defer_append();
			var target = anchor;

			if (defer) {
				offscreen_fragment = document.createDocumentFragment();
				offscreen_fragment.append((target = create_text()));
			}

			if (condition) {
				consequent_effect ??= fn && branch(() => fn(target));
			} else {
				alternate_effect ??= fn && branch(() => fn(target));
			}

			if (defer) {
				var batch = /** @type {Batch} */ (current_batch);

				var active = condition ? consequent_effect : alternate_effect;
				var inactive = condition ? alternate_effect : consequent_effect;

				if (active) batch.skipped_effects.delete(active);
				if (inactive) batch.skipped_effects.add(inactive);

				batch.add_callback(commit);
			} else {
				commit();
			}
		};

		block(() => {
			has_branch = false;
			fn(set_branch);
			if (!has_branch) {
				update_branch(null, null);
			}
		}, flags);
	}

	/** @import { EachItem, EachState, Effect, MaybeSource, Source, TemplateNode, TransitionManager, Value } from '#client' */
	/** @import { Batch } from '../../reactivity/batch.js'; */

	/**
	 * @param {any} _
	 * @param {number} i
	 */
	function index(_, i) {
		return i;
	}

	/**
	 * Pause multiple effects simultaneously, and coordinate their
	 * subsequent destruction. Used in each blocks
	 * @param {EachState} state
	 * @param {EachItem[]} items
	 * @param {null | Node} controlled_anchor
	 */
	function pause_effects(state, items, controlled_anchor) {
		var items_map = state.items;

		/** @type {TransitionManager[]} */
		var transitions = [];
		var length = items.length;

		for (var i = 0; i < length; i++) {
			pause_children(items[i].e, transitions, true);
		}

		var is_controlled = length > 0 && transitions.length === 0 && controlled_anchor !== null;
		// If we have a controlled anchor, it means that the each block is inside a single
		// DOM element, so we can apply a fast-path for clearing the contents of the element.
		if (is_controlled) {
			var parent_node = /** @type {Element} */ (
				/** @type {Element} */ (controlled_anchor).parentNode
			);
			clear_text_content(parent_node);
			parent_node.append(/** @type {Element} */ (controlled_anchor));
			items_map.clear();
			link(state, items[0].prev, items[length - 1].next);
		}

		run_out_transitions(transitions, () => {
			for (var i = 0; i < length; i++) {
				var item = items[i];
				if (!is_controlled) {
					items_map.delete(item.k);
					link(state, item.prev, item.next);
				}
				destroy_effect(item.e, !is_controlled);
			}
		});
	}

	/**
	 * @template V
	 * @param {Element | Comment} node The next sibling node, or the parent node if this is a 'controlled' block
	 * @param {number} flags
	 * @param {() => V[]} get_collection
	 * @param {(value: V, index: number) => any} get_key
	 * @param {(anchor: Node, item: MaybeSource<V>, index: MaybeSource<number>) => void} render_fn
	 * @param {null | ((anchor: Node) => void)} fallback_fn
	 * @returns {void}
	 */
	function each$1(node, flags, get_collection, get_key, render_fn, fallback_fn = null) {
		var anchor = node;

		/** @type {EachState} */
		var state = { flags, items: new Map(), first: null };

		{
			var parent_node = /** @type {Element} */ (node);

			anchor = parent_node.appendChild(create_text());
		}

		/** @type {Effect | null} */
		var fallback = null;

		var was_empty = false;

		/** @type {Map<any, EachItem>} */
		var offscreen_items = new Map();

		// TODO: ideally we could use derived for runes mode but because of the ability
		// to use a store which can be mutated, we can't do that here as mutating a store
		// will still result in the collection array being the same from the store
		var each_array = derived_safe_equal(() => {
			var collection = get_collection();

			return is_array(collection) ? collection : collection == null ? [] : array_from(collection);
		});

		/** @type {V[]} */
		var array;

		/** @type {Effect} */
		var each_effect;

		function commit() {
			reconcile(
				each_effect,
				array,
				state,
				offscreen_items,
				anchor,
				render_fn,
				flags,
				get_key,
				get_collection
			);

			if (fallback_fn !== null) {
				if (array.length === 0) {
					if (fallback) {
						resume_effect(fallback);
					} else {
						fallback = branch(() => fallback_fn(anchor));
					}
				} else if (fallback !== null) {
					pause_effect(fallback, () => {
						fallback = null;
					});
				}
			}
		}

		block(() => {
			// store a reference to the effect so that we can update the start/end nodes in reconciliation
			each_effect ??= /** @type {Effect} */ (active_effect);

			array = get(each_array);
			var length = array.length;

			if (was_empty && length === 0) {
				// ignore updates if the array is empty,
				// and it already was empty on previous run
				return;
			}
			was_empty = length === 0;

			// this is separate to the previous block because `hydrating` might change
			var item, i, value, key; 

			{
				if (should_defer_append()) {
					var keys = new Set();
					var batch = /** @type {Batch} */ (current_batch);

					for (i = 0; i < length; i += 1) {
						value = array[i];
						key = get_key(value, i);

						var existing = state.items.get(key) ?? offscreen_items.get(key);

						if (existing) {
							// update before reconciliation, to trigger any async updates
							{
								update_item(existing, value, i);
							}
						} else {
							item = create_item(
								null,
								state,
								null,
								null,
								value,
								key,
								i,
								render_fn,
								flags,
								get_collection,
								true
							);

							offscreen_items.set(key, item);
						}

						keys.add(key);
					}

					for (const [key, item] of state.items) {
						if (!keys.has(key)) {
							batch.skipped_effects.add(item.e);
						}
					}

					batch.add_callback(commit);
				} else {
					commit();
				}
			}

			// When we mount the each block for the first time, the collection won't be
			// connected to this effect as the effect hasn't finished running yet and its deps
			// won't be assigned. However, it's possible that when reconciling the each block
			// that a mutation occurred and it's made the collection MAYBE_DIRTY, so reading the
			// collection again can provide consistency to the reactive graph again as the deriveds
			// will now be `CLEAN`.
			get(each_array);
		});
	}

	/**
	 * Add, remove, or reorder items output by an each block as its input changes
	 * @template V
	 * @param {Effect} each_effect
	 * @param {Array<V>} array
	 * @param {EachState} state
	 * @param {Map<any, EachItem>} offscreen_items
	 * @param {Element | Comment | Text} anchor
	 * @param {(anchor: Node, item: MaybeSource<V>, index: number | Source<number>, collection: () => V[]) => void} render_fn
	 * @param {number} flags
	 * @param {(value: V, index: number) => any} get_key
	 * @param {() => V[]} get_collection
	 * @returns {void}
	 */
	function reconcile(
		each_effect,
		array,
		state,
		offscreen_items,
		anchor,
		render_fn,
		flags,
		get_key,
		get_collection
	) {

		var length = array.length;
		var items = state.items;
		var first = state.first;
		var current = first;

		/** @type {undefined | Set<EachItem>} */
		var seen;

		/** @type {EachItem | null} */
		var prev = null;

		/** @type {EachItem[]} */
		var matched = [];

		/** @type {EachItem[]} */
		var stashed = [];

		/** @type {V} */
		var value;

		/** @type {any} */
		var key;

		/** @type {EachItem | undefined} */
		var item;

		/** @type {number} */
		var i;

		for (i = 0; i < length; i += 1) {
			value = array[i];
			key = get_key(value, i);

			item = items.get(key);

			if (item === undefined) {
				var pending = offscreen_items.get(key);

				if (pending !== undefined) {
					offscreen_items.delete(key);
					items.set(key, pending);

					var next = prev ? prev.next : current;

					link(state, prev, pending);
					link(state, pending, next);

					move(pending, next, anchor);
					prev = pending;
				} else {
					var child_anchor = current ? /** @type {TemplateNode} */ (current.e.nodes_start) : anchor;

					prev = create_item(
						child_anchor,
						state,
						prev,
						prev === null ? state.first : prev.next,
						value,
						key,
						i,
						render_fn,
						flags,
						get_collection
					);
				}

				items.set(key, prev);

				matched = [];
				stashed = [];

				current = prev.next;
				continue;
			}

			{
				update_item(item, value, i);
			}

			if ((item.e.f & INERT) !== 0) {
				resume_effect(item.e);
			}

			if (item !== current) {
				if (seen !== undefined && seen.has(item)) {
					if (matched.length < stashed.length) {
						// more efficient to move later items to the front
						var start = stashed[0];
						var j;

						prev = start.prev;

						var a = matched[0];
						var b = matched[matched.length - 1];

						for (j = 0; j < matched.length; j += 1) {
							move(matched[j], start, anchor);
						}

						for (j = 0; j < stashed.length; j += 1) {
							seen.delete(stashed[j]);
						}

						link(state, a.prev, b.next);
						link(state, prev, a);
						link(state, b, start);

						current = start;
						prev = b;
						i -= 1;

						matched = [];
						stashed = [];
					} else {
						// more efficient to move earlier items to the back
						seen.delete(item);
						move(item, current, anchor);

						link(state, item.prev, item.next);
						link(state, item, prev === null ? state.first : prev.next);
						link(state, prev, item);

						prev = item;
					}

					continue;
				}

				matched = [];
				stashed = [];

				while (current !== null && current.k !== key) {
					// If the each block isn't inert and an item has an effect that is already inert,
					// skip over adding it to our seen Set as the item is already being handled
					if ((current.e.f & INERT) === 0) {
						(seen ??= new Set()).add(current);
					}
					stashed.push(current);
					current = current.next;
				}

				if (current === null) {
					continue;
				}

				item = current;
			}

			matched.push(item);
			prev = item;
			current = item.next;
		}

		if (current !== null || seen !== undefined) {
			var to_destroy = seen === undefined ? [] : array_from(seen);

			while (current !== null) {
				// If the each block isn't inert, then inert effects are currently outroing and will be removed once the transition is finished
				if ((current.e.f & INERT) === 0) {
					to_destroy.push(current);
				}
				current = current.next;
			}

			var destroy_length = to_destroy.length;

			if (destroy_length > 0) {
				var controlled_anchor = length === 0 ? anchor : null;

				pause_effects(state, to_destroy, controlled_anchor);
			}
		}

		each_effect.first = state.first && state.first.e;
		each_effect.last = prev && prev.e;

		for (var unused of offscreen_items.values()) {
			destroy_effect(unused.e);
		}

		offscreen_items.clear();
	}

	/**
	 * @param {EachItem} item
	 * @param {any} value
	 * @param {number} index
	 * @param {number} type
	 * @returns {void}
	 */
	function update_item(item, value, index, type) {
		{
			internal_set(item.v, value);
		}

		{
			item.i = index;
		}
	}

	/**
	 * @template V
	 * @param {Node | null} anchor
	 * @param {EachState} state
	 * @param {EachItem | null} prev
	 * @param {EachItem | null} next
	 * @param {V} value
	 * @param {unknown} key
	 * @param {number} index
	 * @param {(anchor: Node, item: V | Source<V>, index: number | Value<number>, collection: () => V[]) => void} render_fn
	 * @param {number} flags
	 * @param {() => V[]} get_collection
	 * @param {boolean} [deferred]
	 * @returns {EachItem}
	 */
	function create_item(
		anchor,
		state,
		prev,
		next,
		value,
		key,
		index,
		render_fn,
		flags,
		get_collection,
		deferred
	) {
		var reactive = (flags & EACH_ITEM_REACTIVE) !== 0;
		var mutable = (flags & EACH_ITEM_IMMUTABLE) === 0;

		var v = reactive ? (mutable ? mutable_source(value, false, false) : source(value)) : value;
		var i = (flags & EACH_INDEX_REACTIVE) === 0 ? index : source(index);

		if (DEV && reactive) {
			// For tracing purposes, we need to link the source signal we create with the
			// collection + index so that tracing works as intended
			/** @type {Value} */ (v).trace = () => {
				var collection_index = typeof i === 'number' ? index : i.v;
				// eslint-disable-next-line @typescript-eslint/no-unused-expressions
				get_collection()[collection_index];
			};
		}

		/** @type {EachItem} */
		var item = {
			i,
			v,
			k: key,
			a: null,
			// @ts-expect-error
			e: null,
			prev,
			next
		};

		try {
			if (anchor === null) {
				var fragment = document.createDocumentFragment();
				fragment.append((anchor = create_text()));
			}

			item.e = branch(() => render_fn(/** @type {Node} */ (anchor), v, i, get_collection), hydrating);

			item.e.prev = prev && prev.e;
			item.e.next = next && next.e;

			if (prev === null) {
				if (!deferred) {
					state.first = item;
				}
			} else {
				prev.next = item;
				prev.e.next = item.e;
			}

			if (next !== null) {
				next.prev = item;
				next.e.prev = item.e;
			}

			return item;
		} finally {
		}
	}

	/**
	 * @param {EachItem} item
	 * @param {EachItem | null} next
	 * @param {Text | Element | Comment} anchor
	 */
	function move(item, next, anchor) {
		var end = item.next ? /** @type {TemplateNode} */ (item.next.e.nodes_start) : anchor;

		var dest = next ? /** @type {TemplateNode} */ (next.e.nodes_start) : anchor;
		var node = /** @type {TemplateNode} */ (item.e.nodes_start);

		while (node !== null && node !== end) {
			var next_node = /** @type {TemplateNode} */ (get_next_sibling(node));
			dest.before(node);
			node = next_node;
		}
	}

	/**
	 * @param {EachState} state
	 * @param {EachItem | null} prev
	 * @param {EachItem | null} next
	 */
	function link(state, prev, next) {
		if (prev === null) {
			state.first = next;
		} else {
			prev.next = next;
			prev.e.next = next && next.e;
		}

		if (next !== null) {
			next.prev = prev;
			next.e.prev = prev && prev.e;
		}
	}

	/**
	 * Selects the correct option(s) (depending on whether this is a multiple select)
	 * @template V
	 * @param {HTMLSelectElement} select
	 * @param {V} value
	 * @param {boolean} mounting
	 */
	function select_option(select, value, mounting = false) {
		if (select.multiple) {
			// If value is null or undefined, keep the selection as is
			if (value == undefined) {
				return;
			}

			// If not an array, warn and keep the selection as is
			if (!is_array(value)) {
				return select_multiple_invalid_value();
			}

			// Otherwise, update the selection
			for (var option of select.options) {
				option.selected = value.includes(get_option_value(option));
			}

			return;
		}

		for (option of select.options) {
			var option_value = get_option_value(option);
			if (is(option_value, value)) {
				option.selected = true;
				return;
			}
		}

		if (!mounting || value !== undefined) {
			select.selectedIndex = -1; // no option should be selected
		}
	}

	/**
	 * Selects the correct option(s) if `value` is given,
	 * and then sets up a mutation observer to sync the
	 * current selection to the dom when it changes. Such
	 * changes could for example occur when options are
	 * inside an `#each` block.
	 * @param {HTMLSelectElement} select
	 */
	function init_select(select) {
		var observer = new MutationObserver(() => {
			// @ts-ignore
			select_option(select, select.__value);
			// Deliberately don't update the potential binding value,
			// the model should be preserved unless explicitly changed
		});

		observer.observe(select, {
			// Listen to option element changes
			childList: true,
			subtree: true, // because of <optgroup>
			// Listen to option element value attribute changes
			// (doesn't get notified of select value changes,
			// because that property is not reflected as an attribute)
			attributes: true,
			attributeFilter: ['value']
		});

		teardown(() => {
			observer.disconnect();
		});
	}

	/**
	 * @param {HTMLSelectElement} select
	 * @param {() => unknown} get
	 * @param {(value: unknown) => void} set
	 * @returns {void}
	 */
	function bind_select_value(select, get, set = get) {
		var mounting = true;

		listen_to_event_and_reset_event(select, 'change', (is_reset) => {
			var query = is_reset ? '[selected]' : ':checked';
			/** @type {unknown} */
			var value;

			if (select.multiple) {
				value = [].map.call(select.querySelectorAll(query), get_option_value);
			} else {
				/** @type {HTMLOptionElement | null} */
				var selected_option =
					select.querySelector(query) ??
					// will fall back to first non-disabled option if no option is selected
					select.querySelector('option:not([disabled])');
				value = selected_option && get_option_value(selected_option);
			}

			set(value);
		});

		// Needs to be an effect, not a render_effect, so that in case of each loops the logic runs after the each block has updated
		effect(() => {
			var value = get();
			select_option(select, value, mounting);

			// Mounting and value undefined -> take selection from dom
			if (mounting && value === undefined) {
				/** @type {HTMLOptionElement | null} */
				var selected_option = select.querySelector(':checked');
				if (selected_option !== null) {
					value = get_option_value(selected_option);
					set(value);
				}
			}

			// @ts-ignore
			select.__value = value;
			mounting = false;
		});

		init_select(select);
	}

	/** @param {HTMLOptionElement} option */
	function get_option_value(option) {
		// __value only exists if the <option> has a value attribute
		if ('__value' in option) {
			return option.__value;
		} else {
			return option.value;
		}
	}

	/**
	 * @param {any} bound_value
	 * @param {Element} element_or_component
	 * @returns {boolean}
	 */
	function is_bound_this(bound_value, element_or_component) {
		return (
			bound_value === element_or_component || bound_value?.[STATE_SYMBOL] === element_or_component
		);
	}

	/**
	 * @param {any} element_or_component
	 * @param {(value: unknown, ...parts: unknown[]) => void} update
	 * @param {(...parts: unknown[]) => unknown} get_value
	 * @param {() => unknown[]} [get_parts] Set if the this binding is used inside an each block,
	 * 										returns all the parts of the each block context that are used in the expression
	 * @returns {void}
	 */
	function bind_this(element_or_component = {}, update, get_value, get_parts) {
		effect(() => {
			/** @type {unknown[]} */
			var old_parts;

			/** @type {unknown[]} */
			var parts;

			render_effect(() => {
				old_parts = parts;
				// We only track changes to the parts, not the value itself to avoid unnecessary reruns.
				parts = [];

				untrack(() => {
					if (element_or_component !== get_value(...parts)) {
						update(element_or_component, ...parts);
						// If this is an effect rerun (cause: each block context changes), then nullfiy the binding at
						// the previous position if it isn't already taken over by a different effect.
						if (old_parts && is_bound_this(get_value(...old_parts), element_or_component)) {
							update(null, ...old_parts);
						}
					}
				});
			});

			return () => {
				// We cannot use effects in the teardown phase, we we use a microtask instead.
				queue_micro_task(() => {
					if (parts && is_bound_this(get_value(...parts), element_or_component)) {
						update(null, ...parts);
					}
				});
			};
		});

		return element_or_component;
	}

	/** @import { StoreReferencesContainer } from '#client' */
	/** @import { Store } from '#shared' */

	/**
	 * Whether or not the prop currently being read is a store binding, as in
	 * `<Child bind:x={$y} />`. If it is, we treat the prop as mutable even in
	 * runes mode, and skip `binding_property_non_reactive` validation
	 */
	let is_store_binding = false;

	/**
	 * Returns a tuple that indicates whether `fn()` reads a prop that is a store binding.
	 * Used to prevent `binding_property_non_reactive` validation false positives and
	 * ensure that these props are treated as mutable even in runes mode
	 * @template T
	 * @param {() => T} fn
	 * @returns {[T, boolean]}
	 */
	function capture_store_binding(fn) {
		var previous_is_store_binding = is_store_binding;

		try {
			is_store_binding = false;
			return [fn(), is_store_binding];
		} finally {
			is_store_binding = previous_is_store_binding;
		}
	}

	/** @import { ComponentContext } from '#client' */
	/** @import { Derived, Effect, Source } from './types.js' */

	/**
	 * This function is responsible for synchronizing a possibly bound prop with the inner component state.
	 * It is used whenever the compiler sees that the component writes to the prop, or when it has a default prop_value.
	 * @template V
	 * @param {Record<string, unknown>} props
	 * @param {string} key
	 * @param {number} flags
	 * @param {V | (() => V)} [fallback]
	 * @returns {(() => V | ((arg: V) => V) | ((arg: V, mutation: boolean) => V))}
	 */
	function prop(props, key, flags, fallback) {
		var bindable = (flags & PROPS_IS_BINDABLE) !== 0;
		var lazy = (flags & PROPS_IS_LAZY_INITIAL) !== 0;

		var fallback_value = /** @type {V} */ (fallback);
		var fallback_dirty = true;

		var get_fallback = () => {
			if (fallback_dirty) {
				fallback_dirty = false;

				fallback_value = lazy
					? untrack(/** @type {() => V} */ (fallback))
					: /** @type {V} */ (fallback);
			}

			return fallback_value;
		};

		/** @type {((v: V) => void) | undefined} */
		var setter;

		if (bindable) {
			// Can be the case when someone does `mount(Component, props)` with `let props = $state({...})`
			// or `createClassComponent(Component, props)`
			var is_entry_props = STATE_SYMBOL in props || LEGACY_PROPS in props;

			setter =
				get_descriptor(props, key)?.set ??
				(is_entry_props && key in props ? (v) => (props[key] = v) : undefined);
		}

		var initial_value;
		var is_store_sub = false;

		if (bindable) {
			[initial_value, is_store_sub] = capture_store_binding(() => /** @type {V} */ (props[key]));
		} else {
			initial_value = /** @type {V} */ (props[key]);
		}

		if (initial_value === undefined && fallback !== undefined) {
			initial_value = get_fallback();

			if (setter) {
				props_invalid_value(key);
				setter(initial_value);
			}
		}

		/** @type {() => V} */
		var getter;

		{
			getter = () => {
				var value = /** @type {V} */ (props[key]);
				if (value === undefined) return get_fallback();
				fallback_dirty = true;
				return value;
			};
		}

		// prop is never written to — we only need a getter
		if ((flags & PROPS_IS_UPDATED) === 0) {
			return getter;
		}

		// prop is written to, but the parent component had `bind:foo` which
		// means we can just call `$$props.foo = value` directly
		if (setter) {
			var legacy_parent = props.$$legacy;

			return function (/** @type {any} */ value, /** @type {boolean} */ mutation) {
				if (arguments.length > 0) {
					// We don't want to notify if the value was mutated and the parent is in runes mode.
					// In that case the state proxy (if it exists) should take care of the notification.
					// If the parent is not in runes mode, we need to notify on mutation, too, that the prop
					// has changed because the parent will not be able to detect the change otherwise.
					if (!mutation || legacy_parent || is_store_sub) {
						/** @type {Function} */ (setter)(mutation ? getter() : value);
					}

					return value;
				}

				return getter();
			};
		}

		// Either prop is written to, but there's no binding, which means we
		// create a derived that we can write to locally.
		// Or we are in legacy mode where we always create a derived to replicate that
		// Svelte 4 did not trigger updates when a primitive value was updated to the same value.
		var overridden = false;

		var d = ((flags & PROPS_IS_IMMUTABLE) !== 0 ? derived : derived_safe_equal)(() => {
			overridden = false;
			return getter();
		});

		// Capture the initial value if it's bindable
		if (bindable) get(d);

		var parent_effect = /** @type {Effect} */ (active_effect);

		return function (/** @type {any} */ value, /** @type {boolean} */ mutation) {
			if (arguments.length > 0) {
				const new_value = mutation ? get(d) : bindable ? proxy(value) : value;

				set$1(d, new_value);
				overridden = true;

				if (fallback_value !== undefined) {
					fallback_value = new_value;
				}

				return value;
			}

			// special case — avoid recalculating the derived if we're in a
			// teardown function and the prop was overridden locally, or the
			// component was already destroyed (this latter part is necessary
			// because `bind:this` can read props after the component has
			// been destroyed. TODO simplify `bind:this`
			if ((is_destroying_effect && overridden) || (parent_effect.f & DESTROYED) !== 0) {
				return d.v;
			}

			return get(d);
		};
	}

	/** @import { ComponentConstructorOptions, ComponentType, SvelteComponent, Component } from 'svelte' */

	/**
	 * Runs the given function once immediately on the server, and works like `$effect.pre` on the client.
	 *
	 * @deprecated Use this only as a temporary solution to migrate your component code to Svelte 5.
	 * @param {() => void | (() => void)} fn
	 * @returns {void}
	 */
	function run(fn) {
		user_pre_effect(() => {
			fn();
			var effect = /** @type {import('#client').Effect} */ (active_effect);
			// If the effect is immediately made dirty again, mark it as maybe dirty to emulate legacy behaviour
			if ((effect.f & DIRTY) !== 0) {
				let filename = "a file (we can't know which one)";
				if (DEV) {
					// @ts-ignore
					filename = dev_current_component_function?.[FILENAME] ?? filename;
				}
				legacy_recursive_reactive_block(filename);
				set_signal_status(effect, MAYBE_DIRTY);
			}
		});
	}

	/**
	 * @param {string} method
	 * @param  {...any} objects
	 */
	function log_if_contains_state(method, ...objects) {
		untrack(() => {
			try {
				let has_state = false;
				const transformed = [];

				for (const obj of objects) {
					if (obj && typeof obj === 'object' && STATE_SYMBOL in obj) {
						transformed.push(snapshot(obj, true));
						has_state = true;
					} else {
						transformed.push(obj);
					}
				}

				if (has_state) {
					console_log_state(method);

					// eslint-disable-next-line no-console
					console.log('%c[snapshot]', 'color: grey', ...transformed);
				}
			} catch {}
		});

		return objects;
	}

	/** @import { ComponentContext, ComponentContextLegacy } from '#client' */
	/** @import { EventDispatcher } from './index.js' */
	/** @import { NotFunction } from './internal/types.js' */

	if (DEV) {
		/**
		 * @param {string} rune
		 */
		function throw_rune_error(rune) {
			if (!(rune in globalThis)) {
				// TODO if people start adjusting the "this can contain runes" config through v-p-s more, adjust this message
				/** @type {any} */
				let value; // let's hope noone modifies this global, but belts and braces
				Object.defineProperty(globalThis, rune, {
					configurable: true,
					// eslint-disable-next-line getter-return
					get: () => {
						if (value !== undefined) {
							return value;
						}

						rune_outside_svelte(rune);
					},
					set: (v) => {
						value = v;
					}
				});
			}
		}

		throw_rune_error('$state');
		throw_rune_error('$effect');
		throw_rune_error('$derived');
		throw_rune_error('$inspect');
		throw_rune_error('$props');
		throw_rune_error('$bindable');
	}

	/**
	 * `onMount`, like [`$effect`](https://svelte.dev/docs/svelte/$effect), schedules a function to run as soon as the component has been mounted to the DOM.
	 * Unlike `$effect`, the provided function only runs once.
	 *
	 * It must be called during the component's initialisation (but doesn't need to live _inside_ the component;
	 * it can be called from an external module). If a function is returned _synchronously_ from `onMount`,
	 * it will be called when the component is unmounted.
	 *
	 * `onMount` functions do not run during [server-side rendering](https://svelte.dev/docs/svelte/svelte-server#render).
	 *
	 * @template T
	 * @param {() => NotFunction<T> | Promise<NotFunction<T>> | (() => any)} fn
	 * @returns {void}
	 */
	function onMount(fn) {
		if (component_context === null) {
			lifecycle_outside_component('onMount');
		}

		{
			user_effect(() => {
				const cleanup = untrack(fn);
				if (typeof cleanup === 'function') return /** @type {() => void} */ (cleanup);
			});
		}
	}

	/**
	 * Schedules a callback to run immediately before the component is unmounted.
	 *
	 * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the
	 * only one that runs inside a server-side component.
	 *
	 * @param {() => any} fn
	 * @returns {void}
	 */
	function onDestroy(fn) {
		if (component_context === null) {
			lifecycle_outside_component('onDestroy');
		}

		onMount(() => () => untrack(fn));
	}

	/**
	 * @template [T=any]
	 * @param {string} type
	 * @param {T} [detail]
	 * @param {any}params_0
	 * @returns {CustomEvent<T>}
	 */
	function create_custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
		return new CustomEvent(type, { detail, bubbles, cancelable });
	}

	/**
	 * Creates an event dispatcher that can be used to dispatch [component events](https://svelte.dev/docs/svelte/legacy-on#Component-events).
	 * Event dispatchers are functions that can take two arguments: `name` and `detail`.
	 *
	 * Component events created with `createEventDispatcher` create a
	 * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).
	 * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).
	 * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)
	 * property and can contain any type of data.
	 *
	 * The event dispatcher can be typed to narrow the allowed event names and the type of the `detail` argument:
	 * ```ts
	 * const dispatch = createEventDispatcher<{
	 *  loaded: null; // does not take a detail argument
	 *  change: string; // takes a detail argument of type string, which is required
	 *  optional: number | null; // takes an optional detail argument of type number
	 * }>();
	 * ```
	 *
	 * @deprecated Use callback props and/or the `$host()` rune instead — see [migration guide](https://svelte.dev/docs/svelte/v5-migration-guide#Event-changes-Component-events)
	 * @template {Record<string, any>} [EventMap = any]
	 * @returns {EventDispatcher<EventMap>}
	 */
	function createEventDispatcher() {
		const active_component_context = component_context;
		if (active_component_context === null) {
			lifecycle_outside_component('createEventDispatcher');
		}

		return (type, detail, options) => {
			const events = /** @type {Record<string, Function | Function[]>} */ (
				active_component_context.s.$$events
			)?.[/** @type {any} */ (type)];

			if (events) {
				const callbacks = is_array(events) ? events.slice() : [events];
				// TODO are there situations where events could be dispatched
				// in a server (non-DOM) environment?
				const event = create_custom_event(/** @type {string} */ (type), detail, options);
				for (const fn of callbacks) {
					fn.call(active_component_context.x, event);
				}
				return !event.defaultPrevented;
			}

			return true;
		};
	}

	// generated during release, do not modify

	const PUBLIC_VERSION = '5';

	if (typeof window !== 'undefined') {
		// @ts-expect-error
		((window.__svelte ??= {}).v ??= new Set()).add(PUBLIC_VERSION);
	}

	/*!
	 * @kurkle/color v0.3.4
	 * https://github.com/kurkle/color#readme
	 * (c) 2024 Jukka Kurkela
	 * Released under the MIT License
	 */
	function round(v) {
	  return v + 0.5 | 0;
	}
	const lim = (v, l, h) => Math.max(Math.min(v, h), l);
	function p2b(v) {
	  return lim(round(v * 2.55), 0, 255);
	}
	function n2b(v) {
	  return lim(round(v * 255), 0, 255);
	}
	function b2n(v) {
	  return lim(round(v / 2.55) / 100, 0, 1);
	}
	function n2p(v) {
	  return lim(round(v * 100), 0, 100);
	}

	const map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};
	const hex = [...'0123456789ABCDEF'];
	const h1 = b => hex[b & 0xF];
	const h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];
	const eq = b => ((b & 0xF0) >> 4) === (b & 0xF);
	const isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);
	function hexParse(str) {
	  var len = str.length;
	  var ret;
	  if (str[0] === '#') {
	    if (len === 4 || len === 5) {
	      ret = {
	        r: 255 & map$1[str[1]] * 17,
	        g: 255 & map$1[str[2]] * 17,
	        b: 255 & map$1[str[3]] * 17,
	        a: len === 5 ? map$1[str[4]] * 17 : 255
	      };
	    } else if (len === 7 || len === 9) {
	      ret = {
	        r: map$1[str[1]] << 4 | map$1[str[2]],
	        g: map$1[str[3]] << 4 | map$1[str[4]],
	        b: map$1[str[5]] << 4 | map$1[str[6]],
	        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255
	      };
	    }
	  }
	  return ret;
	}
	const alpha = (a, f) => a < 255 ? f(a) : '';
	function hexString(v) {
	  var f = isShort(v) ? h1 : h2;
	  return v
	    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)
	    : undefined;
	}

	const HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
	function hsl2rgbn(h, s, l) {
	  const a = s * Math.min(l, 1 - l);
	  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
	  return [f(0), f(8), f(4)];
	}
	function hsv2rgbn(h, s, v) {
	  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);
	  return [f(5), f(3), f(1)];
	}
	function hwb2rgbn(h, w, b) {
	  const rgb = hsl2rgbn(h, 1, 0.5);
	  let i;
	  if (w + b > 1) {
	    i = 1 / (w + b);
	    w *= i;
	    b *= i;
	  }
	  for (i = 0; i < 3; i++) {
	    rgb[i] *= 1 - w - b;
	    rgb[i] += w;
	  }
	  return rgb;
	}
	function hueValue(r, g, b, d, max) {
	  if (r === max) {
	    return ((g - b) / d) + (g < b ? 6 : 0);
	  }
	  if (g === max) {
	    return (b - r) / d + 2;
	  }
	  return (r - g) / d + 4;
	}
	function rgb2hsl(v) {
	  const range = 255;
	  const r = v.r / range;
	  const g = v.g / range;
	  const b = v.b / range;
	  const max = Math.max(r, g, b);
	  const min = Math.min(r, g, b);
	  const l = (max + min) / 2;
	  let h, s, d;
	  if (max !== min) {
	    d = max - min;
	    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
	    h = hueValue(r, g, b, d, max);
	    h = h * 60 + 0.5;
	  }
	  return [h | 0, s || 0, l];
	}
	function calln(f, a, b, c) {
	  return (
	    Array.isArray(a)
	      ? f(a[0], a[1], a[2])
	      : f(a, b, c)
	  ).map(n2b);
	}
	function hsl2rgb(h, s, l) {
	  return calln(hsl2rgbn, h, s, l);
	}
	function hwb2rgb(h, w, b) {
	  return calln(hwb2rgbn, h, w, b);
	}
	function hsv2rgb(h, s, v) {
	  return calln(hsv2rgbn, h, s, v);
	}
	function hue(h) {
	  return (h % 360 + 360) % 360;
	}
	function hueParse(str) {
	  const m = HUE_RE.exec(str);
	  let a = 255;
	  let v;
	  if (!m) {
	    return;
	  }
	  if (m[5] !== v) {
	    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);
	  }
	  const h = hue(+m[2]);
	  const p1 = +m[3] / 100;
	  const p2 = +m[4] / 100;
	  if (m[1] === 'hwb') {
	    v = hwb2rgb(h, p1, p2);
	  } else if (m[1] === 'hsv') {
	    v = hsv2rgb(h, p1, p2);
	  } else {
	    v = hsl2rgb(h, p1, p2);
	  }
	  return {
	    r: v[0],
	    g: v[1],
	    b: v[2],
	    a: a
	  };
	}
	function rotate(v, deg) {
	  var h = rgb2hsl(v);
	  h[0] = hue(h[0] + deg);
	  h = hsl2rgb(h);
	  v.r = h[0];
	  v.g = h[1];
	  v.b = h[2];
	}
	function hslString(v) {
	  if (!v) {
	    return;
	  }
	  const a = rgb2hsl(v);
	  const h = a[0];
	  const s = n2p(a[1]);
	  const l = n2p(a[2]);
	  return v.a < 255
	    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`
	    : `hsl(${h}, ${s}%, ${l}%)`;
	}

	const map = {
		x: 'dark',
		Z: 'light',
		Y: 're',
		X: 'blu',
		W: 'gr',
		V: 'medium',
		U: 'slate',
		A: 'ee',
		T: 'ol',
		S: 'or',
		B: 'ra',
		C: 'lateg',
		D: 'ights',
		R: 'in',
		Q: 'turquois',
		E: 'hi',
		P: 'ro',
		O: 'al',
		N: 'le',
		M: 'de',
		L: 'yello',
		F: 'en',
		K: 'ch',
		G: 'arks',
		H: 'ea',
		I: 'ightg',
		J: 'wh'
	};
	const names$1 = {
		OiceXe: 'f0f8ff',
		antiquewEte: 'faebd7',
		aqua: 'ffff',
		aquamarRe: '7fffd4',
		azuY: 'f0ffff',
		beige: 'f5f5dc',
		bisque: 'ffe4c4',
		black: '0',
		blanKedOmond: 'ffebcd',
		Xe: 'ff',
		XeviTet: '8a2be2',
		bPwn: 'a52a2a',
		burlywood: 'deb887',
		caMtXe: '5f9ea0',
		KartYuse: '7fff00',
		KocTate: 'd2691e',
		cSO: 'ff7f50',
		cSnflowerXe: '6495ed',
		cSnsilk: 'fff8dc',
		crimson: 'dc143c',
		cyan: 'ffff',
		xXe: '8b',
		xcyan: '8b8b',
		xgTMnPd: 'b8860b',
		xWay: 'a9a9a9',
		xgYF: '6400',
		xgYy: 'a9a9a9',
		xkhaki: 'bdb76b',
		xmagFta: '8b008b',
		xTivegYF: '556b2f',
		xSange: 'ff8c00',
		xScEd: '9932cc',
		xYd: '8b0000',
		xsOmon: 'e9967a',
		xsHgYF: '8fbc8f',
		xUXe: '483d8b',
		xUWay: '2f4f4f',
		xUgYy: '2f4f4f',
		xQe: 'ced1',
		xviTet: '9400d3',
		dAppRk: 'ff1493',
		dApskyXe: 'bfff',
		dimWay: '696969',
		dimgYy: '696969',
		dodgerXe: '1e90ff',
		fiYbrick: 'b22222',
		flSOwEte: 'fffaf0',
		foYstWAn: '228b22',
		fuKsia: 'ff00ff',
		gaRsbSo: 'dcdcdc',
		ghostwEte: 'f8f8ff',
		gTd: 'ffd700',
		gTMnPd: 'daa520',
		Way: '808080',
		gYF: '8000',
		gYFLw: 'adff2f',
		gYy: '808080',
		honeyMw: 'f0fff0',
		hotpRk: 'ff69b4',
		RdianYd: 'cd5c5c',
		Rdigo: '4b0082',
		ivSy: 'fffff0',
		khaki: 'f0e68c',
		lavFMr: 'e6e6fa',
		lavFMrXsh: 'fff0f5',
		lawngYF: '7cfc00',
		NmoncEffon: 'fffacd',
		ZXe: 'add8e6',
		ZcSO: 'f08080',
		Zcyan: 'e0ffff',
		ZgTMnPdLw: 'fafad2',
		ZWay: 'd3d3d3',
		ZgYF: '90ee90',
		ZgYy: 'd3d3d3',
		ZpRk: 'ffb6c1',
		ZsOmon: 'ffa07a',
		ZsHgYF: '20b2aa',
		ZskyXe: '87cefa',
		ZUWay: '778899',
		ZUgYy: '778899',
		ZstAlXe: 'b0c4de',
		ZLw: 'ffffe0',
		lime: 'ff00',
		limegYF: '32cd32',
		lRF: 'faf0e6',
		magFta: 'ff00ff',
		maPon: '800000',
		VaquamarRe: '66cdaa',
		VXe: 'cd',
		VScEd: 'ba55d3',
		VpurpN: '9370db',
		VsHgYF: '3cb371',
		VUXe: '7b68ee',
		VsprRggYF: 'fa9a',
		VQe: '48d1cc',
		VviTetYd: 'c71585',
		midnightXe: '191970',
		mRtcYam: 'f5fffa',
		mistyPse: 'ffe4e1',
		moccasR: 'ffe4b5',
		navajowEte: 'ffdead',
		navy: '80',
		Tdlace: 'fdf5e6',
		Tive: '808000',
		TivedBb: '6b8e23',
		Sange: 'ffa500',
		SangeYd: 'ff4500',
		ScEd: 'da70d6',
		pOegTMnPd: 'eee8aa',
		pOegYF: '98fb98',
		pOeQe: 'afeeee',
		pOeviTetYd: 'db7093',
		papayawEp: 'ffefd5',
		pHKpuff: 'ffdab9',
		peru: 'cd853f',
		pRk: 'ffc0cb',
		plum: 'dda0dd',
		powMrXe: 'b0e0e6',
		purpN: '800080',
		YbeccapurpN: '663399',
		Yd: 'ff0000',
		Psybrown: 'bc8f8f',
		PyOXe: '4169e1',
		saddNbPwn: '8b4513',
		sOmon: 'fa8072',
		sandybPwn: 'f4a460',
		sHgYF: '2e8b57',
		sHshell: 'fff5ee',
		siFna: 'a0522d',
		silver: 'c0c0c0',
		skyXe: '87ceeb',
		UXe: '6a5acd',
		UWay: '708090',
		UgYy: '708090',
		snow: 'fffafa',
		sprRggYF: 'ff7f',
		stAlXe: '4682b4',
		tan: 'd2b48c',
		teO: '8080',
		tEstN: 'd8bfd8',
		tomato: 'ff6347',
		Qe: '40e0d0',
		viTet: 'ee82ee',
		JHt: 'f5deb3',
		wEte: 'ffffff',
		wEtesmoke: 'f5f5f5',
		Lw: 'ffff00',
		LwgYF: '9acd32'
	};
	function unpack() {
	  const unpacked = {};
	  const keys = Object.keys(names$1);
	  const tkeys = Object.keys(map);
	  let i, j, k, ok, nk;
	  for (i = 0; i < keys.length; i++) {
	    ok = nk = keys[i];
	    for (j = 0; j < tkeys.length; j++) {
	      k = tkeys[j];
	      nk = nk.replace(k, map[k]);
	    }
	    k = parseInt(names$1[ok], 16);
	    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];
	  }
	  return unpacked;
	}

	let names;
	function nameParse(str) {
	  if (!names) {
	    names = unpack();
	    names.transparent = [0, 0, 0, 0];
	  }
	  const a = names[str.toLowerCase()];
	  return a && {
	    r: a[0],
	    g: a[1],
	    b: a[2],
	    a: a.length === 4 ? a[3] : 255
	  };
	}

	const RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
	function rgbParse(str) {
	  const m = RGB_RE.exec(str);
	  let a = 255;
	  let r, g, b;
	  if (!m) {
	    return;
	  }
	  if (m[7] !== r) {
	    const v = +m[7];
	    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);
	  }
	  r = +m[1];
	  g = +m[3];
	  b = +m[5];
	  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));
	  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));
	  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));
	  return {
	    r: r,
	    g: g,
	    b: b,
	    a: a
	  };
	}
	function rgbString(v) {
	  return v && (
	    v.a < 255
	      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`
	      : `rgb(${v.r}, ${v.g}, ${v.b})`
	  );
	}

	const to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;
	const from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
	function interpolate$1(rgb1, rgb2, t) {
	  const r = from(b2n(rgb1.r));
	  const g = from(b2n(rgb1.g));
	  const b = from(b2n(rgb1.b));
	  return {
	    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),
	    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),
	    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),
	    a: rgb1.a + t * (rgb2.a - rgb1.a)
	  };
	}

	function modHSL(v, i, ratio) {
	  if (v) {
	    let tmp = rgb2hsl(v);
	    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));
	    tmp = hsl2rgb(tmp);
	    v.r = tmp[0];
	    v.g = tmp[1];
	    v.b = tmp[2];
	  }
	}
	function clone$1(v, proto) {
	  return v ? Object.assign(proto || {}, v) : v;
	}
	function fromObject(input) {
	  var v = {r: 0, g: 0, b: 0, a: 255};
	  if (Array.isArray(input)) {
	    if (input.length >= 3) {
	      v = {r: input[0], g: input[1], b: input[2], a: 255};
	      if (input.length > 3) {
	        v.a = n2b(input[3]);
	      }
	    }
	  } else {
	    v = clone$1(input, {r: 0, g: 0, b: 0, a: 1});
	    v.a = n2b(v.a);
	  }
	  return v;
	}
	function functionParse(str) {
	  if (str.charAt(0) === 'r') {
	    return rgbParse(str);
	  }
	  return hueParse(str);
	}
	class Color {
	  constructor(input) {
	    if (input instanceof Color) {
	      return input;
	    }
	    const type = typeof input;
	    let v;
	    if (type === 'object') {
	      v = fromObject(input);
	    } else if (type === 'string') {
	      v = hexParse(input) || nameParse(input) || functionParse(input);
	    }
	    this._rgb = v;
	    this._valid = !!v;
	  }
	  get valid() {
	    return this._valid;
	  }
	  get rgb() {
	    var v = clone$1(this._rgb);
	    if (v) {
	      v.a = b2n(v.a);
	    }
	    return v;
	  }
	  set rgb(obj) {
	    this._rgb = fromObject(obj);
	  }
	  rgbString() {
	    return this._valid ? rgbString(this._rgb) : undefined;
	  }
	  hexString() {
	    return this._valid ? hexString(this._rgb) : undefined;
	  }
	  hslString() {
	    return this._valid ? hslString(this._rgb) : undefined;
	  }
	  mix(color, weight) {
	    if (color) {
	      const c1 = this.rgb;
	      const c2 = color.rgb;
	      let w2;
	      const p = weight === w2 ? 0.5 : weight;
	      const w = 2 * p - 1;
	      const a = c1.a - c2.a;
	      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
	      w2 = 1 - w1;
	      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;
	      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;
	      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;
	      c1.a = p * c1.a + (1 - p) * c2.a;
	      this.rgb = c1;
	    }
	    return this;
	  }
	  interpolate(color, t) {
	    if (color) {
	      this._rgb = interpolate$1(this._rgb, color._rgb, t);
	    }
	    return this;
	  }
	  clone() {
	    return new Color(this.rgb);
	  }
	  alpha(a) {
	    this._rgb.a = n2b(a);
	    return this;
	  }
	  clearer(ratio) {
	    const rgb = this._rgb;
	    rgb.a *= 1 - ratio;
	    return this;
	  }
	  greyscale() {
	    const rgb = this._rgb;
	    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
	    rgb.r = rgb.g = rgb.b = val;
	    return this;
	  }
	  opaquer(ratio) {
	    const rgb = this._rgb;
	    rgb.a *= 1 + ratio;
	    return this;
	  }
	  negate() {
	    const v = this._rgb;
	    v.r = 255 - v.r;
	    v.g = 255 - v.g;
	    v.b = 255 - v.b;
	    return this;
	  }
	  lighten(ratio) {
	    modHSL(this._rgb, 2, ratio);
	    return this;
	  }
	  darken(ratio) {
	    modHSL(this._rgb, 2, -ratio);
	    return this;
	  }
	  saturate(ratio) {
	    modHSL(this._rgb, 1, ratio);
	    return this;
	  }
	  desaturate(ratio) {
	    modHSL(this._rgb, 1, -ratio);
	    return this;
	  }
	  rotate(deg) {
	    rotate(this._rgb, deg);
	    return this;
	  }
	}

	/*!
	 * Chart.js v4.5.0
	 * https://www.chartjs.org
	 * (c) 2025 Chart.js Contributors
	 * Released under the MIT License
	 */

	/**
	 * @namespace Chart.helpers
	 */ /**
	 * An empty function that can be used, for example, for optional callback.
	 */ function noop() {
	/* noop */ }
	/**
	 * Returns a unique id, sequentially generated from a global variable.
	 */ const uid = (()=>{
	    let id = 0;
	    return ()=>id++;
	})();
	/**
	 * Returns true if `value` is neither null nor undefined, else returns false.
	 * @param value - The value to test.
	 * @since 2.7.0
	 */ function isNullOrUndef(value) {
	    return value === null || value === undefined;
	}
	/**
	 * Returns true if `value` is an array (including typed arrays), else returns false.
	 * @param value - The value to test.
	 * @function
	 */ function isArray(value) {
	    if (Array.isArray && Array.isArray(value)) {
	        return true;
	    }
	    const type = Object.prototype.toString.call(value);
	    if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {
	        return true;
	    }
	    return false;
	}
	/**
	 * Returns true if `value` is an object (excluding null), else returns false.
	 * @param value - The value to test.
	 * @since 2.7.0
	 */ function isObject(value) {
	    return value !== null && Object.prototype.toString.call(value) === '[object Object]';
	}
	/**
	 * Returns true if `value` is a finite number, else returns false
	 * @param value  - The value to test.
	 */ function isNumberFinite(value) {
	    return (typeof value === 'number' || value instanceof Number) && isFinite(+value);
	}
	/**
	 * Returns `value` if finite, else returns `defaultValue`.
	 * @param value - The value to return if defined.
	 * @param defaultValue - The value to return if `value` is not finite.
	 */ function finiteOrDefault(value, defaultValue) {
	    return isNumberFinite(value) ? value : defaultValue;
	}
	/**
	 * Returns `value` if defined, else returns `defaultValue`.
	 * @param value - The value to return if defined.
	 * @param defaultValue - The value to return if `value` is undefined.
	 */ function valueOrDefault(value, defaultValue) {
	    return typeof value === 'undefined' ? defaultValue : value;
	}
	const toPercentage = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : +value / dimension;
	const toDimension = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;
	/**
	 * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
	 * value returned by `fn`. If `fn` is not a function, this method returns undefined.
	 * @param fn - The function to call.
	 * @param args - The arguments with which `fn` should be called.
	 * @param [thisArg] - The value of `this` provided for the call to `fn`.
	 */ function callback(fn, args, thisArg) {
	    if (fn && typeof fn.call === 'function') {
	        return fn.apply(thisArg, args);
	    }
	}
	function each(loopable, fn, thisArg, reverse) {
	    let i, len, keys;
	    if (isArray(loopable)) {
	        len = loopable.length;
	        {
	            for(i = 0; i < len; i++){
	                fn.call(thisArg, loopable[i], i);
	            }
	        }
	    } else if (isObject(loopable)) {
	        keys = Object.keys(loopable);
	        len = keys.length;
	        for(i = 0; i < len; i++){
	            fn.call(thisArg, loopable[keys[i]], keys[i]);
	        }
	    }
	}
	/**
	 * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
	 * @param a0 - The array to compare
	 * @param a1 - The array to compare
	 * @private
	 */ function _elementsEqual(a0, a1) {
	    let i, ilen, v0, v1;
	    if (!a0 || !a1 || a0.length !== a1.length) {
	        return false;
	    }
	    for(i = 0, ilen = a0.length; i < ilen; ++i){
	        v0 = a0[i];
	        v1 = a1[i];
	        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {
	            return false;
	        }
	    }
	    return true;
	}
	/**
	 * Returns a deep copy of `source` without keeping references on objects and arrays.
	 * @param source - The value to clone.
	 */ function clone(source) {
	    if (isArray(source)) {
	        return source.map(clone);
	    }
	    if (isObject(source)) {
	        const target = Object.create(null);
	        const keys = Object.keys(source);
	        const klen = keys.length;
	        let k = 0;
	        for(; k < klen; ++k){
	            target[keys[k]] = clone(source[keys[k]]);
	        }
	        return target;
	    }
	    return source;
	}
	function isValidKey(key) {
	    return [
	        '__proto__',
	        'prototype',
	        'constructor'
	    ].indexOf(key) === -1;
	}
	/**
	 * The default merger when Chart.helpers.merge is called without merger option.
	 * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.
	 * @private
	 */ function _merger(key, target, source, options) {
	    if (!isValidKey(key)) {
	        return;
	    }
	    const tval = target[key];
	    const sval = source[key];
	    if (isObject(tval) && isObject(sval)) {
	        // eslint-disable-next-line @typescript-eslint/no-use-before-define
	        merge(tval, sval, options);
	    } else {
	        target[key] = clone(sval);
	    }
	}
	function merge(target, source, options) {
	    const sources = isArray(source) ? source : [
	        source
	    ];
	    const ilen = sources.length;
	    if (!isObject(target)) {
	        return target;
	    }
	    options = options || {};
	    const merger = options.merger || _merger;
	    let current;
	    for(let i = 0; i < ilen; ++i){
	        current = sources[i];
	        if (!isObject(current)) {
	            continue;
	        }
	        const keys = Object.keys(current);
	        for(let k = 0, klen = keys.length; k < klen; ++k){
	            merger(keys[k], target, current, options);
	        }
	    }
	    return target;
	}
	function mergeIf(target, source) {
	    // eslint-disable-next-line @typescript-eslint/no-use-before-define
	    return merge(target, source, {
	        merger: _mergerIf
	    });
	}
	/**
	 * Merges source[key] in target[key] only if target[key] is undefined.
	 * @private
	 */ function _mergerIf(key, target, source) {
	    if (!isValidKey(key)) {
	        return;
	    }
	    const tval = target[key];
	    const sval = source[key];
	    if (isObject(tval) && isObject(sval)) {
	        mergeIf(tval, sval);
	    } else if (!Object.prototype.hasOwnProperty.call(target, key)) {
	        target[key] = clone(sval);
	    }
	}
	// resolveObjectKey resolver cache
	const keyResolvers = {
	    // Chart.helpers.core resolveObjectKey should resolve empty key to root object
	    '': (v)=>v,
	    // default resolvers
	    x: (o)=>o.x,
	    y: (o)=>o.y
	};
	/**
	 * @private
	 */ function _splitKey(key) {
	    const parts = key.split('.');
	    const keys = [];
	    let tmp = '';
	    for (const part of parts){
	        tmp += part;
	        if (tmp.endsWith('\\')) {
	            tmp = tmp.slice(0, -1) + '.';
	        } else {
	            keys.push(tmp);
	            tmp = '';
	        }
	    }
	    return keys;
	}
	function _getKeyResolver(key) {
	    const keys = _splitKey(key);
	    return (obj)=>{
	        for (const k of keys){
	            if (k === '') {
	                break;
	            }
	            obj = obj && obj[k];
	        }
	        return obj;
	    };
	}
	function resolveObjectKey(obj, key) {
	    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));
	    return resolver(obj);
	}
	/**
	 * @private
	 */ function _capitalize(str) {
	    return str.charAt(0).toUpperCase() + str.slice(1);
	}
	const defined = (value)=>typeof value !== 'undefined';
	const isFunction = (value)=>typeof value === 'function';
	// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384
	const setsEqual = (a, b)=>{
	    if (a.size !== b.size) {
	        return false;
	    }
	    for (const item of a){
	        if (!b.has(item)) {
	            return false;
	        }
	    }
	    return true;
	};
	/**
	 * @param e - The event
	 * @private
	 */ function _isClickEvent(e) {
	    return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';
	}

	/**
	 * @alias Chart.helpers.math
	 * @namespace
	 */ const PI = Math.PI;
	const TAU = 2 * PI;
	const INFINITY = Number.POSITIVE_INFINITY;
	const RAD_PER_DEG = PI / 180;
	const HALF_PI = PI / 2;
	const QUARTER_PI = PI / 4;
	const TWO_THIRDS_PI = PI * 2 / 3;
	const log10 = Math.log10;
	const sign = Math.sign;
	function almostEquals(x, y, epsilon) {
	    return Math.abs(x - y) < epsilon;
	}
	/**
	 * Implementation of the nice number algorithm used in determining where axis labels will go
	 */ function niceNum(range) {
	    const roundedRange = Math.round(range);
	    range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;
	    const niceRange = Math.pow(10, Math.floor(log10(range)));
	    const fraction = range / niceRange;
	    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
	    return niceFraction * niceRange;
	}
	/**
	 * Returns an array of factors sorted from 1 to sqrt(value)
	 * @private
	 */ function _factorize(value) {
	    const result = [];
	    const sqrt = Math.sqrt(value);
	    let i;
	    for(i = 1; i < sqrt; i++){
	        if (value % i === 0) {
	            result.push(i);
	            result.push(value / i);
	        }
	    }
	    if (sqrt === (sqrt | 0)) {
	        result.push(sqrt);
	    }
	    result.sort((a, b)=>a - b).pop();
	    return result;
	}
	/**
	 * Verifies that attempting to coerce n to string or number won't throw a TypeError.
	 */ function isNonPrimitive(n) {
	    return typeof n === 'symbol' || typeof n === 'object' && n !== null && !(Symbol.toPrimitive in n || 'toString' in n || 'valueOf' in n);
	}
	function isNumber(n) {
	    return !isNonPrimitive(n) && !isNaN(parseFloat(n)) && isFinite(n);
	}
	function almostWhole(x, epsilon) {
	    const rounded = Math.round(x);
	    return rounded - epsilon <= x && rounded + epsilon >= x;
	}
	/**
	 * @private
	 */ function _setMinAndMaxByKey(array, target, property) {
	    let i, ilen, value;
	    for(i = 0, ilen = array.length; i < ilen; i++){
	        value = array[i][property];
	        if (!isNaN(value)) {
	            target.min = Math.min(target.min, value);
	            target.max = Math.max(target.max, value);
	        }
	    }
	}
	function toRadians(degrees) {
	    return degrees * (PI / 180);
	}
	function toDegrees(radians) {
	    return radians * (180 / PI);
	}
	/**
	 * Returns the number of decimal places
	 * i.e. the number of digits after the decimal point, of the value of this Number.
	 * @param x - A number.
	 * @returns The number of decimal places.
	 * @private
	 */ function _decimalPlaces(x) {
	    if (!isNumberFinite(x)) {
	        return;
	    }
	    let e = 1;
	    let p = 0;
	    while(Math.round(x * e) / e !== x){
	        e *= 10;
	        p++;
	    }
	    return p;
	}
	// Gets the angle from vertical upright to the point about a centre.
	function getAngleFromPoint(centrePoint, anglePoint) {
	    const distanceFromXCenter = anglePoint.x - centrePoint.x;
	    const distanceFromYCenter = anglePoint.y - centrePoint.y;
	    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
	    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
	    if (angle < -0.5 * PI) {
	        angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
	    }
	    return {
	        angle,
	        distance: radialDistanceFromCenter
	    };
	}
	function distanceBetweenPoints(pt1, pt2) {
	    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
	}
	/**
	 * Normalize angle to be between 0 and 2*PI
	 * @private
	 */ function _normalizeAngle(a) {
	    return (a % TAU + TAU) % TAU;
	}
	/**
	 * @private
	 */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {
	    const a = _normalizeAngle(angle);
	    const s = _normalizeAngle(start);
	    const e = _normalizeAngle(end);
	    const angleToStart = _normalizeAngle(s - a);
	    const angleToEnd = _normalizeAngle(e - a);
	    const startToAngle = _normalizeAngle(a - s);
	    const endToAngle = _normalizeAngle(a - e);
	    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;
	}
	/**
	 * Limit `value` between `min` and `max`
	 * @param value
	 * @param min
	 * @param max
	 * @private
	 */ function _limitValue(value, min, max) {
	    return Math.max(min, Math.min(max, value));
	}
	/**
	 * @param {number} value
	 * @private
	 */ function _int16Range(value) {
	    return _limitValue(value, -32768, 32767);
	}
	/**
	 * @param value
	 * @param start
	 * @param end
	 * @param [epsilon]
	 * @private
	 */ function _isBetween(value, start, end, epsilon = 1e-6) {
	    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;
	}

	function _lookup(table, value, cmp) {
	    cmp = cmp || ((index)=>table[index] < value);
	    let hi = table.length - 1;
	    let lo = 0;
	    let mid;
	    while(hi - lo > 1){
	        mid = lo + hi >> 1;
	        if (cmp(mid)) {
	            lo = mid;
	        } else {
	            hi = mid;
	        }
	    }
	    return {
	        lo,
	        hi
	    };
	}
	/**
	 * Binary search
	 * @param table - the table search. must be sorted!
	 * @param key - property name for the value in each entry
	 * @param value - value to find
	 * @param last - lookup last index
	 * @private
	 */ const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>{
	        const ti = table[index][key];
	        return ti < value || ti === value && table[index + 1][key] === value;
	    } : (index)=>table[index][key] < value);
	/**
	 * Reverse binary search
	 * @param table - the table search. must be sorted!
	 * @param key - property name for the value in each entry
	 * @param value - value to find
	 * @private
	 */ const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);
	/**
	 * Return subset of `values` between `min` and `max` inclusive.
	 * Values are assumed to be in sorted order.
	 * @param values - sorted array of values
	 * @param min - min value
	 * @param max - max value
	 */ function _filterBetween(values, min, max) {
	    let start = 0;
	    let end = values.length;
	    while(start < end && values[start] < min){
	        start++;
	    }
	    while(end > start && values[end - 1] > max){
	        end--;
	    }
	    return start > 0 || end < values.length ? values.slice(start, end) : values;
	}
	const arrayEvents = [
	    'push',
	    'pop',
	    'shift',
	    'splice',
	    'unshift'
	];
	function listenArrayEvents(array, listener) {
	    if (array._chartjs) {
	        array._chartjs.listeners.push(listener);
	        return;
	    }
	    Object.defineProperty(array, '_chartjs', {
	        configurable: true,
	        enumerable: false,
	        value: {
	            listeners: [
	                listener
	            ]
	        }
	    });
	    arrayEvents.forEach((key)=>{
	        const method = '_onData' + _capitalize(key);
	        const base = array[key];
	        Object.defineProperty(array, key, {
	            configurable: true,
	            enumerable: false,
	            value (...args) {
	                const res = base.apply(this, args);
	                array._chartjs.listeners.forEach((object)=>{
	                    if (typeof object[method] === 'function') {
	                        object[method](...args);
	                    }
	                });
	                return res;
	            }
	        });
	    });
	}
	function unlistenArrayEvents(array, listener) {
	    const stub = array._chartjs;
	    if (!stub) {
	        return;
	    }
	    const listeners = stub.listeners;
	    const index = listeners.indexOf(listener);
	    if (index !== -1) {
	        listeners.splice(index, 1);
	    }
	    if (listeners.length > 0) {
	        return;
	    }
	    arrayEvents.forEach((key)=>{
	        delete array[key];
	    });
	    delete array._chartjs;
	}
	/**
	 * @param items
	 */ function _arrayUnique(items) {
	    const set = new Set(items);
	    if (set.size === items.length) {
	        return items;
	    }
	    return Array.from(set);
	}
	/**
	* Request animation polyfill
	*/ const requestAnimFrame = function() {
	    if (typeof window === 'undefined') {
	        return function(callback) {
	            return callback();
	        };
	    }
	    return window.requestAnimationFrame;
	}();
	/**
	 * Throttles calling `fn` once per animation frame
	 * Latest arguments are used on the actual call
	 */ function throttled(fn, thisArg) {
	    let argsToUse = [];
	    let ticking = false;
	    return function(...args) {
	        // Save the args for use later
	        argsToUse = args;
	        if (!ticking) {
	            ticking = true;
	            requestAnimFrame.call(window, ()=>{
	                ticking = false;
	                fn.apply(thisArg, argsToUse);
	            });
	        }
	    };
	}
	/**
	 * Debounces calling `fn` for `delay` ms
	 */ function debounce(fn, delay) {
	    let timeout;
	    return function(...args) {
	        if (delay) {
	            clearTimeout(timeout);
	            timeout = setTimeout(fn, delay, args);
	        } else {
	            fn.apply(this, args);
	        }
	        return delay;
	    };
	}
	/**
	 * Converts 'start' to 'left', 'end' to 'right' and others to 'center'
	 * @private
	 */ const _toLeftRightCenter = (align)=>align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';
	/**
	 * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`
	 * @private
	 */ const _alignStartEnd = (align, start, end)=>align === 'start' ? start : align === 'end' ? end : (start + end) / 2;
	/**
	 * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`
	 * @private
	 */ const _textX = (align, left, right, rtl)=>{
	    const check = rtl ? 'left' : 'right';
	    return align === check ? right : align === 'center' ? (left + right) / 2 : left;
	};
	/**
	 * Return start and count of visible points.
	 * @private
	 */ function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
	    const pointCount = points.length;
	    let start = 0;
	    let count = pointCount;
	    if (meta._sorted) {
	        const { iScale , vScale , _parsed  } = meta;
	        const spanGaps = meta.dataset ? meta.dataset.options ? meta.dataset.options.spanGaps : null : null;
	        const axis = iScale.axis;
	        const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();
	        if (minDefined) {
	            start = Math.min(// @ts-expect-error Need to type _parsed
	            _lookupByKey(_parsed, axis, min).lo, // @ts-expect-error Need to fix types on _lookupByKey
	            animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo);
	            if (spanGaps) {
	                const distanceToDefinedLo = _parsed.slice(0, start + 1).reverse().findIndex((point)=>!isNullOrUndef(point[vScale.axis]));
	                start -= Math.max(0, distanceToDefinedLo);
	            }
	            start = _limitValue(start, 0, pointCount - 1);
	        }
	        if (maxDefined) {
	            let end = Math.max(// @ts-expect-error Need to type _parsed
	            _lookupByKey(_parsed, iScale.axis, max, true).hi + 1, // @ts-expect-error Need to fix types on _lookupByKey
	            animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1);
	            if (spanGaps) {
	                const distanceToDefinedHi = _parsed.slice(end - 1).findIndex((point)=>!isNullOrUndef(point[vScale.axis]));
	                end += Math.max(0, distanceToDefinedHi);
	            }
	            count = _limitValue(end, start, pointCount) - start;
	        } else {
	            count = pointCount - start;
	        }
	    }
	    return {
	        start,
	        count
	    };
	}
	/**
	 * Checks if the scale ranges have changed.
	 * @param {object} meta - dataset meta.
	 * @returns {boolean}
	 * @private
	 */ function _scaleRangesChanged(meta) {
	    const { xScale , yScale , _scaleRanges  } = meta;
	    const newRanges = {
	        xmin: xScale.min,
	        xmax: xScale.max,
	        ymin: yScale.min,
	        ymax: yScale.max
	    };
	    if (!_scaleRanges) {
	        meta._scaleRanges = newRanges;
	        return true;
	    }
	    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;
	    Object.assign(_scaleRanges, newRanges);
	    return changed;
	}

	const atEdge = (t)=>t === 0 || t === 1;
	const elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));
	const elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;
	/**
	 * Easing functions adapted from Robert Penner's easing equations.
	 * @namespace Chart.helpers.easing.effects
	 * @see http://www.robertpenner.com/easing/
	 */ const effects = {
	    linear: (t)=>t,
	    easeInQuad: (t)=>t * t,
	    easeOutQuad: (t)=>-t * (t - 2),
	    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),
	    easeInCubic: (t)=>t * t * t,
	    easeOutCubic: (t)=>(t -= 1) * t * t + 1,
	    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),
	    easeInQuart: (t)=>t * t * t * t,
	    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),
	    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),
	    easeInQuint: (t)=>t * t * t * t * t,
	    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,
	    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),
	    easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,
	    easeOutSine: (t)=>Math.sin(t * HALF_PI),
	    easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),
	    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),
	    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,
	    easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),
	    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),
	    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),
	    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),
	    easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),
	    easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),
	    easeInOutElastic (t) {
	        const s = 0.1125;
	        const p = 0.45;
	        return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);
	    },
	    easeInBack (t) {
	        const s = 1.70158;
	        return t * t * ((s + 1) * t - s);
	    },
	    easeOutBack (t) {
	        const s = 1.70158;
	        return (t -= 1) * t * ((s + 1) * t + s) + 1;
	    },
	    easeInOutBack (t) {
	        let s = 1.70158;
	        if ((t /= 0.5) < 1) {
	            return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));
	        }
	        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
	    },
	    easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),
	    easeOutBounce (t) {
	        const m = 7.5625;
	        const d = 2.75;
	        if (t < 1 / d) {
	            return m * t * t;
	        }
	        if (t < 2 / d) {
	            return m * (t -= 1.5 / d) * t + 0.75;
	        }
	        if (t < 2.5 / d) {
	            return m * (t -= 2.25 / d) * t + 0.9375;
	        }
	        return m * (t -= 2.625 / d) * t + 0.984375;
	    },
	    easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5
	};

	function isPatternOrGradient(value) {
	    if (value && typeof value === 'object') {
	        const type = value.toString();
	        return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';
	    }
	    return false;
	}
	function color(value) {
	    return isPatternOrGradient(value) ? value : new Color(value);
	}
	function getHoverColor(value) {
	    return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();
	}

	const numbers = [
	    'x',
	    'y',
	    'borderWidth',
	    'radius',
	    'tension'
	];
	const colors = [
	    'color',
	    'borderColor',
	    'backgroundColor'
	];
	function applyAnimationsDefaults(defaults) {
	    defaults.set('animation', {
	        delay: undefined,
	        duration: 1000,
	        easing: 'easeOutQuart',
	        fn: undefined,
	        from: undefined,
	        loop: undefined,
	        to: undefined,
	        type: undefined
	    });
	    defaults.describe('animation', {
	        _fallback: false,
	        _indexable: false,
	        _scriptable: (name)=>name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'
	    });
	    defaults.set('animations', {
	        colors: {
	            type: 'color',
	            properties: colors
	        },
	        numbers: {
	            type: 'number',
	            properties: numbers
	        }
	    });
	    defaults.describe('animations', {
	        _fallback: 'animation'
	    });
	    defaults.set('transitions', {
	        active: {
	            animation: {
	                duration: 400
	            }
	        },
	        resize: {
	            animation: {
	                duration: 0
	            }
	        },
	        show: {
	            animations: {
	                colors: {
	                    from: 'transparent'
	                },
	                visible: {
	                    type: 'boolean',
	                    duration: 0
	                }
	            }
	        },
	        hide: {
	            animations: {
	                colors: {
	                    to: 'transparent'
	                },
	                visible: {
	                    type: 'boolean',
	                    easing: 'linear',
	                    fn: (v)=>v | 0
	                }
	            }
	        }
	    });
	}

	function applyLayoutsDefaults(defaults) {
	    defaults.set('layout', {
	        autoPadding: true,
	        padding: {
	            top: 0,
	            right: 0,
	            bottom: 0,
	            left: 0
	        }
	    });
	}

	const intlCache = new Map();
	function getNumberFormat(locale, options) {
	    options = options || {};
	    const cacheKey = locale + JSON.stringify(options);
	    let formatter = intlCache.get(cacheKey);
	    if (!formatter) {
	        formatter = new Intl.NumberFormat(locale, options);
	        intlCache.set(cacheKey, formatter);
	    }
	    return formatter;
	}
	function formatNumber(num, locale, options) {
	    return getNumberFormat(locale, options).format(num);
	}

	const formatters = {
	 values (value) {
	        return isArray(value) ?  value : '' + value;
	    },
	 numeric (tickValue, index, ticks) {
	        if (tickValue === 0) {
	            return '0';
	        }
	        const locale = this.chart.options.locale;
	        let notation;
	        let delta = tickValue;
	        if (ticks.length > 1) {
	            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
	            if (maxTick < 1e-4 || maxTick > 1e+15) {
	                notation = 'scientific';
	            }
	            delta = calculateDelta(tickValue, ticks);
	        }
	        const logDelta = log10(Math.abs(delta));
	        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
	        const options = {
	            notation,
	            minimumFractionDigits: numDecimal,
	            maximumFractionDigits: numDecimal
	        };
	        Object.assign(options, this.options.ticks.format);
	        return formatNumber(tickValue, locale, options);
	    }};
	function calculateDelta(tickValue, ticks) {
	    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
	    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {
	        delta = tickValue - Math.floor(tickValue);
	    }
	    return delta;
	}
	 var Ticks = {
	    formatters
	};

	function applyScaleDefaults(defaults) {
	    defaults.set('scale', {
	        display: true,
	        offset: false,
	        reverse: false,
	        beginAtZero: false,
	 bounds: 'ticks',
	        clip: true,
	 grace: 0,
	        grid: {
	            display: true,
	            lineWidth: 1,
	            drawOnChartArea: true,
	            drawTicks: true,
	            tickLength: 8,
	            tickWidth: (_ctx, options)=>options.lineWidth,
	            tickColor: (_ctx, options)=>options.color,
	            offset: false
	        },
	        border: {
	            display: true,
	            dash: [],
	            dashOffset: 0.0,
	            width: 1
	        },
	        title: {
	            display: false,
	            text: '',
	            padding: {
	                top: 4,
	                bottom: 4
	            }
	        },
	        ticks: {
	            minRotation: 0,
	            maxRotation: 50,
	            mirror: false,
	            textStrokeWidth: 0,
	            textStrokeColor: '',
	            padding: 3,
	            display: true,
	            autoSkip: true,
	            autoSkipPadding: 3,
	            labelOffset: 0,
	            callback: Ticks.formatters.values,
	            minor: {},
	            major: {},
	            align: 'center',
	            crossAlign: 'near',
	            showLabelBackdrop: false,
	            backdropColor: 'rgba(255, 255, 255, 0.75)',
	            backdropPadding: 2
	        }
	    });
	    defaults.route('scale.ticks', 'color', '', 'color');
	    defaults.route('scale.grid', 'color', '', 'borderColor');
	    defaults.route('scale.border', 'color', '', 'borderColor');
	    defaults.route('scale.title', 'color', '', 'color');
	    defaults.describe('scale', {
	        _fallback: false,
	        _scriptable: (name)=>!name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',
	        _indexable: (name)=>name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash'
	    });
	    defaults.describe('scales', {
	        _fallback: 'scale'
	    });
	    defaults.describe('scale.ticks', {
	        _scriptable: (name)=>name !== 'backdropPadding' && name !== 'callback',
	        _indexable: (name)=>name !== 'backdropPadding'
	    });
	}

	const overrides = Object.create(null);
	const descriptors = Object.create(null);
	 function getScope$1(node, key) {
	    if (!key) {
	        return node;
	    }
	    const keys = key.split('.');
	    for(let i = 0, n = keys.length; i < n; ++i){
	        const k = keys[i];
	        node = node[k] || (node[k] = Object.create(null));
	    }
	    return node;
	}
	function set(root, scope, values) {
	    if (typeof scope === 'string') {
	        return merge(getScope$1(root, scope), values);
	    }
	    return merge(getScope$1(root, ''), scope);
	}
	 class Defaults {
	    constructor(_descriptors, _appliers){
	        this.animation = undefined;
	        this.backgroundColor = 'rgba(0,0,0,0.1)';
	        this.borderColor = 'rgba(0,0,0,0.1)';
	        this.color = '#666';
	        this.datasets = {};
	        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();
	        this.elements = {};
	        this.events = [
	            'mousemove',
	            'mouseout',
	            'click',
	            'touchstart',
	            'touchmove'
	        ];
	        this.font = {
	            family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
	            size: 12,
	            style: 'normal',
	            lineHeight: 1.2,
	            weight: null
	        };
	        this.hover = {};
	        this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);
	        this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);
	        this.hoverColor = (ctx, options)=>getHoverColor(options.color);
	        this.indexAxis = 'x';
	        this.interaction = {
	            mode: 'nearest',
	            intersect: true,
	            includeInvisible: false
	        };
	        this.maintainAspectRatio = true;
	        this.onHover = null;
	        this.onClick = null;
	        this.parsing = true;
	        this.plugins = {};
	        this.responsive = true;
	        this.scale = undefined;
	        this.scales = {};
	        this.showLine = true;
	        this.drawActiveElementsOnTop = true;
	        this.describe(_descriptors);
	        this.apply(_appliers);
	    }
	 set(scope, values) {
	        return set(this, scope, values);
	    }
	 get(scope) {
	        return getScope$1(this, scope);
	    }
	 describe(scope, values) {
	        return set(descriptors, scope, values);
	    }
	    override(scope, values) {
	        return set(overrides, scope, values);
	    }
	 route(scope, name, targetScope, targetName) {
	        const scopeObject = getScope$1(this, scope);
	        const targetScopeObject = getScope$1(this, targetScope);
	        const privateName = '_' + name;
	        Object.defineProperties(scopeObject, {
	            [privateName]: {
	                value: scopeObject[name],
	                writable: true
	            },
	            [name]: {
	                enumerable: true,
	                get () {
	                    const local = this[privateName];
	                    const target = targetScopeObject[targetName];
	                    if (isObject(local)) {
	                        return Object.assign({}, target, local);
	                    }
	                    return valueOrDefault(local, target);
	                },
	                set (value) {
	                    this[privateName] = value;
	                }
	            }
	        });
	    }
	    apply(appliers) {
	        appliers.forEach((apply)=>apply(this));
	    }
	}
	var defaults$1 = /* #__PURE__ */ new Defaults({
	    _scriptable: (name)=>!name.startsWith('on'),
	    _indexable: (name)=>name !== 'events',
	    hover: {
	        _fallback: 'interaction'
	    },
	    interaction: {
	        _scriptable: false,
	        _indexable: false
	    }
	}, [
	    applyAnimationsDefaults,
	    applyLayoutsDefaults,
	    applyScaleDefaults
	]);

	/**
	 * Converts the given font object into a CSS font string.
	 * @param font - A font object.
	 * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font
	 * @private
	 */ function toFontString(font) {
	    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {
	        return null;
	    }
	    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;
	}
	/**
	 * @private
	 */ function _measureText(ctx, data, gc, longest, string) {
	    let textWidth = data[string];
	    if (!textWidth) {
	        textWidth = data[string] = ctx.measureText(string).width;
	        gc.push(string);
	    }
	    if (textWidth > longest) {
	        longest = textWidth;
	    }
	    return longest;
	}
	/**
	 * Returns the aligned pixel value to avoid anti-aliasing blur
	 * @param chart - The chart instance.
	 * @param pixel - A pixel value.
	 * @param width - The width of the element.
	 * @returns The aligned pixel value.
	 * @private
	 */ function _alignPixel(chart, pixel, width) {
	    const devicePixelRatio = chart.currentDevicePixelRatio;
	    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
	    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
	}
	/**
	 * Clears the entire canvas.
	 */ function clearCanvas(canvas, ctx) {
	    if (!ctx && !canvas) {
	        return;
	    }
	    ctx = ctx || canvas.getContext('2d');
	    ctx.save();
	    // canvas.width and canvas.height do not consider the canvas transform,
	    // while clearRect does
	    ctx.resetTransform();
	    ctx.clearRect(0, 0, canvas.width, canvas.height);
	    ctx.restore();
	}
	function drawPoint$1(ctx, options, x, y) {
	    // eslint-disable-next-line @typescript-eslint/no-use-before-define
	    drawPointLegend(ctx, options, x, y, null);
	}
	// eslint-disable-next-line complexity
	function drawPointLegend(ctx, options, x, y, w) {
	    let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;
	    const style = options.pointStyle;
	    const rotation = options.rotation;
	    const radius = options.radius;
	    let rad = (rotation || 0) * RAD_PER_DEG;
	    if (style && typeof style === 'object') {
	        type = style.toString();
	        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
	            ctx.save();
	            ctx.translate(x, y);
	            ctx.rotate(rad);
	            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
	            ctx.restore();
	            return;
	        }
	    }
	    if (isNaN(radius) || radius <= 0) {
	        return;
	    }
	    ctx.beginPath();
	    switch(style){
	        // Default includes circle
	        default:
	            if (w) {
	                ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);
	            } else {
	                ctx.arc(x, y, radius, 0, TAU);
	            }
	            ctx.closePath();
	            break;
	        case 'triangle':
	            width = w ? w / 2 : radius;
	            ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
	            rad += TWO_THIRDS_PI;
	            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
	            rad += TWO_THIRDS_PI;
	            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
	            ctx.closePath();
	            break;
	        case 'rectRounded':
	            // NOTE: the rounded rect implementation changed to use `arc` instead of
	            // `quadraticCurveTo` since it generates better results when rect is
	            // almost a circle. 0.516 (instead of 0.5) produces results with visually
	            // closer proportion to the previous impl and it is inscribed in the
	            // circle with `radius`. For more details, see the following PRs:
	            // https://github.com/chartjs/Chart.js/issues/5597
	            // https://github.com/chartjs/Chart.js/issues/5858
	            cornerRadius = radius * 0.516;
	            size = radius - cornerRadius;
	            xOffset = Math.cos(rad + QUARTER_PI) * size;
	            xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);
	            yOffset = Math.sin(rad + QUARTER_PI) * size;
	            yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);
	            ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
	            ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);
	            ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);
	            ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
	            ctx.closePath();
	            break;
	        case 'rect':
	            if (!rotation) {
	                size = Math.SQRT1_2 * radius;
	                width = w ? w / 2 : size;
	                ctx.rect(x - width, y - size, 2 * width, 2 * size);
	                break;
	            }
	            rad += QUARTER_PI;
	        /* falls through */ case 'rectRot':
	            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
	            xOffset = Math.cos(rad) * radius;
	            yOffset = Math.sin(rad) * radius;
	            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
	            ctx.moveTo(x - xOffsetW, y - yOffset);
	            ctx.lineTo(x + yOffsetW, y - xOffset);
	            ctx.lineTo(x + xOffsetW, y + yOffset);
	            ctx.lineTo(x - yOffsetW, y + xOffset);
	            ctx.closePath();
	            break;
	        case 'crossRot':
	            rad += QUARTER_PI;
	        /* falls through */ case 'cross':
	            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
	            xOffset = Math.cos(rad) * radius;
	            yOffset = Math.sin(rad) * radius;
	            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
	            ctx.moveTo(x - xOffsetW, y - yOffset);
	            ctx.lineTo(x + xOffsetW, y + yOffset);
	            ctx.moveTo(x + yOffsetW, y - xOffset);
	            ctx.lineTo(x - yOffsetW, y + xOffset);
	            break;
	        case 'star':
	            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
	            xOffset = Math.cos(rad) * radius;
	            yOffset = Math.sin(rad) * radius;
	            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
	            ctx.moveTo(x - xOffsetW, y - yOffset);
	            ctx.lineTo(x + xOffsetW, y + yOffset);
	            ctx.moveTo(x + yOffsetW, y - xOffset);
	            ctx.lineTo(x - yOffsetW, y + xOffset);
	            rad += QUARTER_PI;
	            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
	            xOffset = Math.cos(rad) * radius;
	            yOffset = Math.sin(rad) * radius;
	            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
	            ctx.moveTo(x - xOffsetW, y - yOffset);
	            ctx.lineTo(x + xOffsetW, y + yOffset);
	            ctx.moveTo(x + yOffsetW, y - xOffset);
	            ctx.lineTo(x - yOffsetW, y + xOffset);
	            break;
	        case 'line':
	            xOffset = w ? w / 2 : Math.cos(rad) * radius;
	            yOffset = Math.sin(rad) * radius;
	            ctx.moveTo(x - xOffset, y - yOffset);
	            ctx.lineTo(x + xOffset, y + yOffset);
	            break;
	        case 'dash':
	            ctx.moveTo(x, y);
	            ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);
	            break;
	        case false:
	            ctx.closePath();
	            break;
	    }
	    ctx.fill();
	    if (options.borderWidth > 0) {
	        ctx.stroke();
	    }
	}
	/**
	 * Returns true if the point is inside the rectangle
	 * @param point - The point to test
	 * @param area - The rectangle
	 * @param margin - allowed margin
	 * @private
	 */ function _isPointInArea(point, area, margin) {
	    margin = margin || 0.5; // margin - default is to match rounded decimals
	    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;
	}
	function clipArea(ctx, area) {
	    ctx.save();
	    ctx.beginPath();
	    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
	    ctx.clip();
	}
	function unclipArea(ctx) {
	    ctx.restore();
	}
	function setRenderOpts(ctx, opts) {
	    if (opts.translation) {
	        ctx.translate(opts.translation[0], opts.translation[1]);
	    }
	    if (!isNullOrUndef(opts.rotation)) {
	        ctx.rotate(opts.rotation);
	    }
	    if (opts.color) {
	        ctx.fillStyle = opts.color;
	    }
	    if (opts.textAlign) {
	        ctx.textAlign = opts.textAlign;
	    }
	    if (opts.textBaseline) {
	        ctx.textBaseline = opts.textBaseline;
	    }
	}
	function decorateText(ctx, x, y, line, opts) {
	    if (opts.strikethrough || opts.underline) {
	        /**
	     * Now that IE11 support has been dropped, we can use more
	     * of the TextMetrics object. The actual bounding boxes
	     * are unflagged in Chrome, Firefox, Edge, and Safari so they
	     * can be safely used.
	     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility
	     */ const metrics = ctx.measureText(line);
	        const left = x - metrics.actualBoundingBoxLeft;
	        const right = x + metrics.actualBoundingBoxRight;
	        const top = y - metrics.actualBoundingBoxAscent;
	        const bottom = y + metrics.actualBoundingBoxDescent;
	        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
	        ctx.strokeStyle = ctx.fillStyle;
	        ctx.beginPath();
	        ctx.lineWidth = opts.decorationWidth || 2;
	        ctx.moveTo(left, yDecoration);
	        ctx.lineTo(right, yDecoration);
	        ctx.stroke();
	    }
	}
	function drawBackdrop(ctx, opts) {
	    const oldColor = ctx.fillStyle;
	    ctx.fillStyle = opts.color;
	    ctx.fillRect(opts.left, opts.top, opts.width, opts.height);
	    ctx.fillStyle = oldColor;
	}
	/**
	 * Render text onto the canvas
	 */ function renderText(ctx, text, x, y, font, opts = {}) {
	    const lines = isArray(text) ? text : [
	        text
	    ];
	    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';
	    let i, line;
	    ctx.save();
	    ctx.font = font.string;
	    setRenderOpts(ctx, opts);
	    for(i = 0; i < lines.length; ++i){
	        line = lines[i];
	        if (opts.backdrop) {
	            drawBackdrop(ctx, opts.backdrop);
	        }
	        if (stroke) {
	            if (opts.strokeColor) {
	                ctx.strokeStyle = opts.strokeColor;
	            }
	            if (!isNullOrUndef(opts.strokeWidth)) {
	                ctx.lineWidth = opts.strokeWidth;
	            }
	            ctx.strokeText(line, x, y, opts.maxWidth);
	        }
	        ctx.fillText(line, x, y, opts.maxWidth);
	        decorateText(ctx, x, y, line, opts);
	        y += Number(font.lineHeight);
	    }
	    ctx.restore();
	}
	/**
	 * Add a path of a rectangle with rounded corners to the current sub-path
	 * @param ctx - Context
	 * @param rect - Bounding rect
	 */ function addRoundedRectPath(ctx, rect) {
	    const { x , y , w , h , radius  } = rect;
	    // top left arc
	    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);
	    // line from top left to bottom left
	    ctx.lineTo(x, y + h - radius.bottomLeft);
	    // bottom left arc
	    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
	    // line from bottom left to bottom right
	    ctx.lineTo(x + w - radius.bottomRight, y + h);
	    // bottom right arc
	    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
	    // line from bottom right to top right
	    ctx.lineTo(x + w, y + radius.topRight);
	    // top right arc
	    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);
	    // line from top right to top left
	    ctx.lineTo(x + radius.topLeft, y);
	}

	const LINE_HEIGHT = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/;
	const FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;
	/**
	 * @alias Chart.helpers.options
	 * @namespace
	 */ /**
	 * Converts the given line height `value` in pixels for a specific font `size`.
	 * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
	 * @param size - The font size (in pixels) used to resolve relative `value`.
	 * @returns The effective line height in pixels (size * 1.2 if value is invalid).
	 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
	 * @since 2.7.0
	 */ function toLineHeight(value, size) {
	    const matches = ('' + value).match(LINE_HEIGHT);
	    if (!matches || matches[1] === 'normal') {
	        return size * 1.2;
	    }
	    value = +matches[2];
	    switch(matches[3]){
	        case 'px':
	            return value;
	        case '%':
	            value /= 100;
	            break;
	    }
	    return size * value;
	}
	const numberOrZero = (v)=>+v || 0;
	function _readValueToProps(value, props) {
	    const ret = {};
	    const objProps = isObject(props);
	    const keys = objProps ? Object.keys(props) : props;
	    const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;
	    for (const prop of keys){
	        ret[prop] = numberOrZero(read(prop));
	    }
	    return ret;
	}
	/**
	 * Converts the given value into a TRBL object.
	 * @param value - If a number, set the value to all TRBL component,
	 *  else, if an object, use defined properties and sets undefined ones to 0.
	 *  x / y are shorthands for same value for left/right and top/bottom.
	 * @returns The padding values (top, right, bottom, left)
	 * @since 3.0.0
	 */ function toTRBL(value) {
	    return _readValueToProps(value, {
	        top: 'y',
	        right: 'x',
	        bottom: 'y',
	        left: 'x'
	    });
	}
	/**
	 * Converts the given value into a TRBL corners object (similar with css border-radius).
	 * @param value - If a number, set the value to all TRBL corner components,
	 *  else, if an object, use defined properties and sets undefined ones to 0.
	 * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)
	 * @since 3.0.0
	 */ function toTRBLCorners(value) {
	    return _readValueToProps(value, [
	        'topLeft',
	        'topRight',
	        'bottomLeft',
	        'bottomRight'
	    ]);
	}
	/**
	 * Converts the given value into a padding object with pre-computed width/height.
	 * @param value - If a number, set the value to all TRBL component,
	 *  else, if an object, use defined properties and sets undefined ones to 0.
	 *  x / y are shorthands for same value for left/right and top/bottom.
	 * @returns The padding values (top, right, bottom, left, width, height)
	 * @since 2.7.0
	 */ function toPadding(value) {
	    const obj = toTRBL(value);
	    obj.width = obj.left + obj.right;
	    obj.height = obj.top + obj.bottom;
	    return obj;
	}
	/**
	 * Parses font options and returns the font object.
	 * @param options - A object that contains font options to be parsed.
	 * @param fallback - A object that contains fallback font options.
	 * @return The font object.
	 * @private
	 */ function toFont(options, fallback) {
	    options = options || {};
	    fallback = fallback || defaults$1.font;
	    let size = valueOrDefault(options.size, fallback.size);
	    if (typeof size === 'string') {
	        size = parseInt(size, 10);
	    }
	    let style = valueOrDefault(options.style, fallback.style);
	    if (style && !('' + style).match(FONT_STYLE)) {
	        console.warn('Invalid font style specified: "' + style + '"');
	        style = undefined;
	    }
	    const font = {
	        family: valueOrDefault(options.family, fallback.family),
	        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),
	        size,
	        style,
	        weight: valueOrDefault(options.weight, fallback.weight),
	        string: ''
	    };
	    font.string = toFontString(font);
	    return font;
	}
	/**
	 * Evaluates the given `inputs` sequentially and returns the first defined value.
	 * @param inputs - An array of values, falling back to the last value.
	 * @param context - If defined and the current value is a function, the value
	 * is called with `context` as first argument and the result becomes the new input.
	 * @param index - If defined and the current value is an array, the value
	 * at `index` become the new input.
	 * @param info - object to return information about resolution in
	 * @param info.cacheable - Will be set to `false` if option is not cacheable.
	 * @since 2.7.0
	 */ function resolve$1(inputs, context, index, info) {
	    let i, ilen, value;
	    for(i = 0, ilen = inputs.length; i < ilen; ++i){
	        value = inputs[i];
	        if (value === undefined) {
	            continue;
	        }
	        if (context !== undefined && typeof value === 'function') {
	            value = value(context);
	        }
	        if (index !== undefined && isArray(value)) {
	            value = value[index % value.length];
	        }
	        if (value !== undefined) {
	            return value;
	        }
	    }
	}
	/**
	 * @param minmax
	 * @param grace
	 * @param beginAtZero
	 * @private
	 */ function _addGrace(minmax, grace, beginAtZero) {
	    const { min , max  } = minmax;
	    const change = toDimension(grace, (max - min) / 2);
	    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;
	    return {
	        min: keepZero(min, -Math.abs(change)),
	        max: keepZero(max, change)
	    };
	}
	function createContext(parentContext, context) {
	    return Object.assign(Object.create(parentContext), context);
	}

	/**
	 * Creates a Proxy for resolving raw values for options.
	 * @param scopes - The option scopes to look for values, in resolution order
	 * @param prefixes - The prefixes for values, in resolution order.
	 * @param rootScopes - The root option scopes
	 * @param fallback - Parent scopes fallback
	 * @param getTarget - callback for getting the target for changed values
	 * @returns Proxy
	 * @private
	 */ function _createResolver(scopes, prefixes = [
	    ''
	], rootScopes, fallback, getTarget = ()=>scopes[0]) {
	    const finalRootScopes = rootScopes || scopes;
	    if (typeof fallback === 'undefined') {
	        fallback = _resolve('_fallback', scopes);
	    }
	    const cache = {
	        [Symbol.toStringTag]: 'Object',
	        _cacheable: true,
	        _scopes: scopes,
	        _rootScopes: finalRootScopes,
	        _fallback: fallback,
	        _getTarget: getTarget,
	        override: (scope)=>_createResolver([
	                scope,
	                ...scopes
	            ], prefixes, finalRootScopes, fallback)
	    };
	    return new Proxy(cache, {
	        /**
	     * A trap for the delete operator.
	     */ deleteProperty (target, prop) {
	            delete target[prop]; // remove from cache
	            delete target._keys; // remove cached keys
	            delete scopes[0][prop]; // remove from top level scope
	            return true;
	        },
	        /**
	     * A trap for getting property values.
	     */ get (target, prop) {
	            return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));
	        },
	        /**
	     * A trap for Object.getOwnPropertyDescriptor.
	     * Also used by Object.hasOwnProperty.
	     */ getOwnPropertyDescriptor (target, prop) {
	            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
	        },
	        /**
	     * A trap for Object.getPrototypeOf.
	     */ getPrototypeOf () {
	            return Reflect.getPrototypeOf(scopes[0]);
	        },
	        /**
	     * A trap for the in operator.
	     */ has (target, prop) {
	            return getKeysFromAllScopes(target).includes(prop);
	        },
	        /**
	     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
	     */ ownKeys (target) {
	            return getKeysFromAllScopes(target);
	        },
	        /**
	     * A trap for setting property values.
	     */ set (target, prop, value) {
	            const storage = target._storage || (target._storage = getTarget());
	            target[prop] = storage[prop] = value; // set to top level scope + cache
	            delete target._keys; // remove cached keys
	            return true;
	        }
	    });
	}
	/**
	 * Returns an Proxy for resolving option values with context.
	 * @param proxy - The Proxy returned by `_createResolver`
	 * @param context - Context object for scriptable/indexable options
	 * @param subProxy - The proxy provided for scriptable options
	 * @param descriptorDefaults - Defaults for descriptors
	 * @private
	 */ function _attachContext(proxy, context, subProxy, descriptorDefaults) {
	    const cache = {
	        _cacheable: false,
	        _proxy: proxy,
	        _context: context,
	        _subProxy: subProxy,
	        _stack: new Set(),
	        _descriptors: _descriptors(proxy, descriptorDefaults),
	        setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),
	        override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)
	    };
	    return new Proxy(cache, {
	        /**
	     * A trap for the delete operator.
	     */ deleteProperty (target, prop) {
	            delete target[prop]; // remove from cache
	            delete proxy[prop]; // remove from proxy
	            return true;
	        },
	        /**
	     * A trap for getting property values.
	     */ get (target, prop, receiver) {
	            return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));
	        },
	        /**
	     * A trap for Object.getOwnPropertyDescriptor.
	     * Also used by Object.hasOwnProperty.
	     */ getOwnPropertyDescriptor (target, prop) {
	            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {
	                enumerable: true,
	                configurable: true
	            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);
	        },
	        /**
	     * A trap for Object.getPrototypeOf.
	     */ getPrototypeOf () {
	            return Reflect.getPrototypeOf(proxy);
	        },
	        /**
	     * A trap for the in operator.
	     */ has (target, prop) {
	            return Reflect.has(proxy, prop);
	        },
	        /**
	     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
	     */ ownKeys () {
	            return Reflect.ownKeys(proxy);
	        },
	        /**
	     * A trap for setting property values.
	     */ set (target, prop, value) {
	            proxy[prop] = value; // set to proxy
	            delete target[prop]; // remove from cache
	            return true;
	        }
	    });
	}
	/**
	 * @private
	 */ function _descriptors(proxy, defaults = {
	    scriptable: true,
	    indexable: true
	}) {
	    const { _scriptable =defaults.scriptable , _indexable =defaults.indexable , _allKeys =defaults.allKeys  } = proxy;
	    return {
	        allKeys: _allKeys,
	        scriptable: _scriptable,
	        indexable: _indexable,
	        isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,
	        isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable
	    };
	}
	const readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;
	const needsSubResolver = (prop, value)=>isObject(value) && prop !== 'adapters' && (Object.getPrototypeOf(value) === null || value.constructor === Object);
	function _cached(target, prop, resolve) {
	    if (Object.prototype.hasOwnProperty.call(target, prop) || prop === 'constructor') {
	        return target[prop];
	    }
	    const value = resolve();
	    // cache the resolved value
	    target[prop] = value;
	    return value;
	}
	function _resolveWithContext(target, prop, receiver) {
	    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;
	    let value = _proxy[prop]; // resolve from proxy
	    // resolve with context
	    if (isFunction(value) && descriptors.isScriptable(prop)) {
	        value = _resolveScriptable(prop, value, target, receiver);
	    }
	    if (isArray(value) && value.length) {
	        value = _resolveArray(prop, value, target, descriptors.isIndexable);
	    }
	    if (needsSubResolver(prop, value)) {
	        // if the resolved value is an object, create a sub resolver for it
	        value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);
	    }
	    return value;
	}
	function _resolveScriptable(prop, getValue, target, receiver) {
	    const { _proxy , _context , _subProxy , _stack  } = target;
	    if (_stack.has(prop)) {
	        throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);
	    }
	    _stack.add(prop);
	    let value = getValue(_context, _subProxy || receiver);
	    _stack.delete(prop);
	    if (needsSubResolver(prop, value)) {
	        // When scriptable option returns an object, create a resolver on that.
	        value = createSubResolver(_proxy._scopes, _proxy, prop, value);
	    }
	    return value;
	}
	function _resolveArray(prop, value, target, isIndexable) {
	    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;
	    if (typeof _context.index !== 'undefined' && isIndexable(prop)) {
	        return value[_context.index % value.length];
	    } else if (isObject(value[0])) {
	        // Array of objects, return array or resolvers
	        const arr = value;
	        const scopes = _proxy._scopes.filter((s)=>s !== arr);
	        value = [];
	        for (const item of arr){
	            const resolver = createSubResolver(scopes, _proxy, prop, item);
	            value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));
	        }
	    }
	    return value;
	}
	function resolveFallback(fallback, prop, value) {
	    return isFunction(fallback) ? fallback(prop, value) : fallback;
	}
	const getScope = (key, parent)=>key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;
	function addScopes(set, parentScopes, key, parentFallback, value) {
	    for (const parent of parentScopes){
	        const scope = getScope(key, parent);
	        if (scope) {
	            set.add(scope);
	            const fallback = resolveFallback(scope._fallback, key, value);
	            if (typeof fallback !== 'undefined' && fallback !== key && fallback !== parentFallback) {
	                // When we reach the descriptor that defines a new _fallback, return that.
	                // The fallback will resume to that new scope.
	                return fallback;
	            }
	        } else if (scope === false && typeof parentFallback !== 'undefined' && key !== parentFallback) {
	            // Fallback to `false` results to `false`, when falling back to different key.
	            // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`
	            return null;
	        }
	    }
	    return false;
	}
	function createSubResolver(parentScopes, resolver, prop, value) {
	    const rootScopes = resolver._rootScopes;
	    const fallback = resolveFallback(resolver._fallback, prop, value);
	    const allScopes = [
	        ...parentScopes,
	        ...rootScopes
	    ];
	    const set = new Set();
	    set.add(value);
	    let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);
	    if (key === null) {
	        return false;
	    }
	    if (typeof fallback !== 'undefined' && fallback !== prop) {
	        key = addScopesFromKey(set, allScopes, fallback, key, value);
	        if (key === null) {
	            return false;
	        }
	    }
	    return _createResolver(Array.from(set), [
	        ''
	    ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));
	}
	function addScopesFromKey(set, allScopes, key, fallback, item) {
	    while(key){
	        key = addScopes(set, allScopes, key, fallback, item);
	    }
	    return key;
	}
	function subGetTarget(resolver, prop, value) {
	    const parent = resolver._getTarget();
	    if (!(prop in parent)) {
	        parent[prop] = {};
	    }
	    const target = parent[prop];
	    if (isArray(target) && isObject(value)) {
	        // For array of objects, the object is used to store updated values
	        return value;
	    }
	    return target || {};
	}
	function _resolveWithPrefixes(prop, prefixes, scopes, proxy) {
	    let value;
	    for (const prefix of prefixes){
	        value = _resolve(readKey(prefix, prop), scopes);
	        if (typeof value !== 'undefined') {
	            return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;
	        }
	    }
	}
	function _resolve(key, scopes) {
	    for (const scope of scopes){
	        if (!scope) {
	            continue;
	        }
	        const value = scope[key];
	        if (typeof value !== 'undefined') {
	            return value;
	        }
	    }
	}
	function getKeysFromAllScopes(target) {
	    let keys = target._keys;
	    if (!keys) {
	        keys = target._keys = resolveKeysFromAllScopes(target._scopes);
	    }
	    return keys;
	}
	function resolveKeysFromAllScopes(scopes) {
	    const set = new Set();
	    for (const scope of scopes){
	        for (const key of Object.keys(scope).filter((k)=>!k.startsWith('_'))){
	            set.add(key);
	        }
	    }
	    return Array.from(set);
	}

	/**
	 * @private
	 */ function _isDomSupported() {
	    return typeof window !== 'undefined' && typeof document !== 'undefined';
	}
	/**
	 * @private
	 */ function _getParentNode(domNode) {
	    let parent = domNode.parentNode;
	    if (parent && parent.toString() === '[object ShadowRoot]') {
	        parent = parent.host;
	    }
	    return parent;
	}
	/**
	 * convert max-width/max-height values that may be percentages into a number
	 * @private
	 */ function parseMaxStyle(styleValue, node, parentProperty) {
	    let valueInPixels;
	    if (typeof styleValue === 'string') {
	        valueInPixels = parseInt(styleValue, 10);
	        if (styleValue.indexOf('%') !== -1) {
	            // percentage * size in dimension
	            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
	        }
	    } else {
	        valueInPixels = styleValue;
	    }
	    return valueInPixels;
	}
	const getComputedStyle = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);
	function getStyle(el, property) {
	    return getComputedStyle(el).getPropertyValue(property);
	}
	const positions$1 = [
	    'top',
	    'right',
	    'bottom',
	    'left'
	];
	function getPositionedStyle(styles, style, suffix) {
	    const result = {};
	    suffix = suffix ? '-' + suffix : '';
	    for(let i = 0; i < 4; i++){
	        const pos = positions$1[i];
	        result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;
	    }
	    result.width = result.left + result.right;
	    result.height = result.top + result.bottom;
	    return result;
	}
	const useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);
	/**
	 * @param e
	 * @param canvas
	 * @returns Canvas position
	 */ function getCanvasPosition(e, canvas) {
	    const touches = e.touches;
	    const source = touches && touches.length ? touches[0] : e;
	    const { offsetX , offsetY  } = source;
	    let box = false;
	    let x, y;
	    if (useOffsetPos(offsetX, offsetY, e.target)) {
	        x = offsetX;
	        y = offsetY;
	    } else {
	        const rect = canvas.getBoundingClientRect();
	        x = source.clientX - rect.left;
	        y = source.clientY - rect.top;
	        box = true;
	    }
	    return {
	        x,
	        y,
	        box
	    };
	}
	/**
	 * Gets an event's x, y coordinates, relative to the chart area
	 * @param event
	 * @param chart
	 * @returns x and y coordinates of the event
	 */ function getRelativePosition$1(event, chart) {
	    if ('native' in event) {
	        return event;
	    }
	    const { canvas , currentDevicePixelRatio  } = chart;
	    const style = getComputedStyle(canvas);
	    const borderBox = style.boxSizing === 'border-box';
	    const paddings = getPositionedStyle(style, 'padding');
	    const borders = getPositionedStyle(style, 'border', 'width');
	    const { x , y , box  } = getCanvasPosition(event, canvas);
	    const xOffset = paddings.left + (box && borders.left);
	    const yOffset = paddings.top + (box && borders.top);
	    let { width , height  } = chart;
	    if (borderBox) {
	        width -= paddings.width + borders.width;
	        height -= paddings.height + borders.height;
	    }
	    return {
	        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),
	        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)
	    };
	}
	function getContainerSize(canvas, width, height) {
	    let maxWidth, maxHeight;
	    if (width === undefined || height === undefined) {
	        const container = canvas && _getParentNode(canvas);
	        if (!container) {
	            width = canvas.clientWidth;
	            height = canvas.clientHeight;
	        } else {
	            const rect = container.getBoundingClientRect(); // this is the border box of the container
	            const containerStyle = getComputedStyle(container);
	            const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');
	            const containerPadding = getPositionedStyle(containerStyle, 'padding');
	            width = rect.width - containerPadding.width - containerBorder.width;
	            height = rect.height - containerPadding.height - containerBorder.height;
	            maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');
	            maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');
	        }
	    }
	    return {
	        width,
	        height,
	        maxWidth: maxWidth || INFINITY,
	        maxHeight: maxHeight || INFINITY
	    };
	}
	const round1 = (v)=>Math.round(v * 10) / 10;
	// eslint-disable-next-line complexity
	function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {
	    const style = getComputedStyle(canvas);
	    const margins = getPositionedStyle(style, 'margin');
	    const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;
	    const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;
	    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);
	    let { width , height  } = containerSize;
	    if (style.boxSizing === 'content-box') {
	        const borders = getPositionedStyle(style, 'border', 'width');
	        const paddings = getPositionedStyle(style, 'padding');
	        width -= paddings.width + borders.width;
	        height -= paddings.height + borders.height;
	    }
	    width = Math.max(0, width - margins.width);
	    height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);
	    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));
	    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));
	    if (width && !height) {
	        // https://github.com/chartjs/Chart.js/issues/4659
	        // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)
	        height = round1(width / 2);
	    }
	    const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;
	    if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {
	        height = containerSize.height;
	        width = round1(Math.floor(height * aspectRatio));
	    }
	    return {
	        width,
	        height
	    };
	}
	/**
	 * @param chart
	 * @param forceRatio
	 * @param forceStyle
	 * @returns True if the canvas context size or transformation has changed.
	 */ function retinaScale(chart, forceRatio, forceStyle) {
	    const pixelRatio = forceRatio || 1;
	    const deviceHeight = Math.floor(chart.height * pixelRatio);
	    const deviceWidth = Math.floor(chart.width * pixelRatio);
	    chart.height = Math.floor(chart.height);
	    chart.width = Math.floor(chart.width);
	    const canvas = chart.canvas;
	    // If no style has been set on the canvas, the render size is used as display size,
	    // making the chart visually bigger, so let's enforce it to the "correct" values.
	    // See https://github.com/chartjs/Chart.js/issues/3575
	    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {
	        canvas.style.height = `${chart.height}px`;
	        canvas.style.width = `${chart.width}px`;
	    }
	    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {
	        chart.currentDevicePixelRatio = pixelRatio;
	        canvas.height = deviceHeight;
	        canvas.width = deviceWidth;
	        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
	        return true;
	    }
	    return false;
	}
	/**
	 * Detects support for options object argument in addEventListener.
	 * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
	 * @private
	 */ const supportsEventListenerOptions = function() {
	    let passiveSupported = false;
	    try {
	        const options = {
	            get passive () {
	                passiveSupported = true;
	                return false;
	            }
	        };
	        if (_isDomSupported()) {
	            window.addEventListener('test', null, options);
	            window.removeEventListener('test', null, options);
	        }
	    } catch (e) {
	    // continue regardless of error
	    }
	    return passiveSupported;
	}();
	/**
	 * The "used" size is the final value of a dimension property after all calculations have
	 * been performed. This method uses the computed style of `element` but returns undefined
	 * if the computed style is not expressed in pixels. That can happen in some cases where
	 * `element` has a size relative to its parent and this last one is not yet displayed,
	 * for example because of `display: none` on a parent node.
	 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
	 * @returns Size in pixels or undefined if unknown.
	 */ function readUsedSize(element, property) {
	    const value = getStyle(element, property);
	    const matches = value && value.match(/^(\d+)(\.\d+)?px$/);
	    return matches ? +matches[1] : undefined;
	}

	const getRightToLeftAdapter = function(rectX, width) {
	    return {
	        x (x) {
	            return rectX + rectX + width - x;
	        },
	        setWidth (w) {
	            width = w;
	        },
	        textAlign (align) {
	            if (align === 'center') {
	                return align;
	            }
	            return align === 'right' ? 'left' : 'right';
	        },
	        xPlus (x, value) {
	            return x - value;
	        },
	        leftForLtr (x, itemWidth) {
	            return x - itemWidth;
	        }
	    };
	};
	const getLeftToRightAdapter = function() {
	    return {
	        x (x) {
	            return x;
	        },
	        setWidth (w) {},
	        textAlign (align) {
	            return align;
	        },
	        xPlus (x, value) {
	            return x + value;
	        },
	        leftForLtr (x, _itemWidth) {
	            return x;
	        }
	    };
	};
	function getRtlAdapter(rtl, rectX, width) {
	    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
	}
	function overrideTextDirection(ctx, direction) {
	    let style, original;
	    if (direction === 'ltr' || direction === 'rtl') {
	        style = ctx.canvas.style;
	        original = [
	            style.getPropertyValue('direction'),
	            style.getPropertyPriority('direction')
	        ];
	        style.setProperty('direction', direction, 'important');
	        ctx.prevTextDirection = original;
	    }
	}
	function restoreTextDirection(ctx, original) {
	    if (original !== undefined) {
	        delete ctx.prevTextDirection;
	        ctx.canvas.style.setProperty('direction', original[0], original[1]);
	    }
	}

	function getSizeForArea(scale, chartArea, field) {
	    return scale.options.clip ? scale[field] : chartArea[field];
	}
	function getDatasetArea(meta, chartArea) {
	    const { xScale , yScale  } = meta;
	    if (xScale && yScale) {
	        return {
	            left: getSizeForArea(xScale, chartArea, 'left'),
	            right: getSizeForArea(xScale, chartArea, 'right'),
	            top: getSizeForArea(yScale, chartArea, 'top'),
	            bottom: getSizeForArea(yScale, chartArea, 'bottom')
	        };
	    }
	    return chartArea;
	}
	function getDatasetClipArea(chart, meta) {
	    const clip = meta._clip;
	    if (clip.disabled) {
	        return false;
	    }
	    const area = getDatasetArea(meta, chart.chartArea);
	    return {
	        left: clip.left === false ? 0 : area.left - (clip.left === true ? 0 : clip.left),
	        right: clip.right === false ? chart.width : area.right + (clip.right === true ? 0 : clip.right),
	        top: clip.top === false ? 0 : area.top - (clip.top === true ? 0 : clip.top),
	        bottom: clip.bottom === false ? chart.height : area.bottom + (clip.bottom === true ? 0 : clip.bottom)
	    };
	}

	/*!
	 * Chart.js v4.5.0
	 * https://www.chartjs.org
	 * (c) 2025 Chart.js Contributors
	 * Released under the MIT License
	 */

	class Animator {
	    constructor(){
	        this._request = null;
	        this._charts = new Map();
	        this._running = false;
	        this._lastDate = undefined;
	    }
	 _notify(chart, anims, date, type) {
	        const callbacks = anims.listeners[type];
	        const numSteps = anims.duration;
	        callbacks.forEach((fn)=>fn({
	                chart,
	                initial: anims.initial,
	                numSteps,
	                currentStep: Math.min(date - anims.start, numSteps)
	            }));
	    }
	 _refresh() {
	        if (this._request) {
	            return;
	        }
	        this._running = true;
	        this._request = requestAnimFrame.call(window, ()=>{
	            this._update();
	            this._request = null;
	            if (this._running) {
	                this._refresh();
	            }
	        });
	    }
	 _update(date = Date.now()) {
	        let remaining = 0;
	        this._charts.forEach((anims, chart)=>{
	            if (!anims.running || !anims.items.length) {
	                return;
	            }
	            const items = anims.items;
	            let i = items.length - 1;
	            let draw = false;
	            let item;
	            for(; i >= 0; --i){
	                item = items[i];
	                if (item._active) {
	                    if (item._total > anims.duration) {
	                        anims.duration = item._total;
	                    }
	                    item.tick(date);
	                    draw = true;
	                } else {
	                    items[i] = items[items.length - 1];
	                    items.pop();
	                }
	            }
	            if (draw) {
	                chart.draw();
	                this._notify(chart, anims, date, 'progress');
	            }
	            if (!items.length) {
	                anims.running = false;
	                this._notify(chart, anims, date, 'complete');
	                anims.initial = false;
	            }
	            remaining += items.length;
	        });
	        this._lastDate = date;
	        if (remaining === 0) {
	            this._running = false;
	        }
	    }
	 _getAnims(chart) {
	        const charts = this._charts;
	        let anims = charts.get(chart);
	        if (!anims) {
	            anims = {
	                running: false,
	                initial: true,
	                items: [],
	                listeners: {
	                    complete: [],
	                    progress: []
	                }
	            };
	            charts.set(chart, anims);
	        }
	        return anims;
	    }
	 listen(chart, event, cb) {
	        this._getAnims(chart).listeners[event].push(cb);
	    }
	 add(chart, items) {
	        if (!items || !items.length) {
	            return;
	        }
	        this._getAnims(chart).items.push(...items);
	    }
	 has(chart) {
	        return this._getAnims(chart).items.length > 0;
	    }
	 start(chart) {
	        const anims = this._charts.get(chart);
	        if (!anims) {
	            return;
	        }
	        anims.running = true;
	        anims.start = Date.now();
	        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);
	        this._refresh();
	    }
	    running(chart) {
	        if (!this._running) {
	            return false;
	        }
	        const anims = this._charts.get(chart);
	        if (!anims || !anims.running || !anims.items.length) {
	            return false;
	        }
	        return true;
	    }
	 stop(chart) {
	        const anims = this._charts.get(chart);
	        if (!anims || !anims.items.length) {
	            return;
	        }
	        const items = anims.items;
	        let i = items.length - 1;
	        for(; i >= 0; --i){
	            items[i].cancel();
	        }
	        anims.items = [];
	        this._notify(chart, anims, Date.now(), 'complete');
	    }
	 remove(chart) {
	        return this._charts.delete(chart);
	    }
	}
	var animator = /* #__PURE__ */ new Animator();

	const transparent = 'transparent';
	const interpolators = {
	    boolean (from, to, factor) {
	        return factor > 0.5 ? to : from;
	    },
	 color (from, to, factor) {
	        const c0 = color(from || transparent);
	        const c1 = c0.valid && color(to || transparent);
	        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;
	    },
	    number (from, to, factor) {
	        return from + (to - from) * factor;
	    }
	};
	class Animation {
	    constructor(cfg, target, prop, to){
	        const currentValue = target[prop];
	        to = resolve$1([
	            cfg.to,
	            to,
	            currentValue,
	            cfg.from
	        ]);
	        const from = resolve$1([
	            cfg.from,
	            currentValue,
	            to
	        ]);
	        this._active = true;
	        this._fn = cfg.fn || interpolators[cfg.type || typeof from];
	        this._easing = effects[cfg.easing] || effects.linear;
	        this._start = Math.floor(Date.now() + (cfg.delay || 0));
	        this._duration = this._total = Math.floor(cfg.duration);
	        this._loop = !!cfg.loop;
	        this._target = target;
	        this._prop = prop;
	        this._from = from;
	        this._to = to;
	        this._promises = undefined;
	    }
	    active() {
	        return this._active;
	    }
	    update(cfg, to, date) {
	        if (this._active) {
	            this._notify(false);
	            const currentValue = this._target[this._prop];
	            const elapsed = date - this._start;
	            const remain = this._duration - elapsed;
	            this._start = date;
	            this._duration = Math.floor(Math.max(remain, cfg.duration));
	            this._total += elapsed;
	            this._loop = !!cfg.loop;
	            this._to = resolve$1([
	                cfg.to,
	                to,
	                currentValue,
	                cfg.from
	            ]);
	            this._from = resolve$1([
	                cfg.from,
	                currentValue,
	                to
	            ]);
	        }
	    }
	    cancel() {
	        if (this._active) {
	            this.tick(Date.now());
	            this._active = false;
	            this._notify(false);
	        }
	    }
	    tick(date) {
	        const elapsed = date - this._start;
	        const duration = this._duration;
	        const prop = this._prop;
	        const from = this._from;
	        const loop = this._loop;
	        const to = this._to;
	        let factor;
	        this._active = from !== to && (loop || elapsed < duration);
	        if (!this._active) {
	            this._target[prop] = to;
	            this._notify(true);
	            return;
	        }
	        if (elapsed < 0) {
	            this._target[prop] = from;
	            return;
	        }
	        factor = elapsed / duration % 2;
	        factor = loop && factor > 1 ? 2 - factor : factor;
	        factor = this._easing(Math.min(1, Math.max(0, factor)));
	        this._target[prop] = this._fn(from, to, factor);
	    }
	    wait() {
	        const promises = this._promises || (this._promises = []);
	        return new Promise((res, rej)=>{
	            promises.push({
	                res,
	                rej
	            });
	        });
	    }
	    _notify(resolved) {
	        const method = resolved ? 'res' : 'rej';
	        const promises = this._promises || [];
	        for(let i = 0; i < promises.length; i++){
	            promises[i][method]();
	        }
	    }
	}

	class Animations {
	    constructor(chart, config){
	        this._chart = chart;
	        this._properties = new Map();
	        this.configure(config);
	    }
	    configure(config) {
	        if (!isObject(config)) {
	            return;
	        }
	        const animationOptions = Object.keys(defaults$1.animation);
	        const animatedProps = this._properties;
	        Object.getOwnPropertyNames(config).forEach((key)=>{
	            const cfg = config[key];
	            if (!isObject(cfg)) {
	                return;
	            }
	            const resolved = {};
	            for (const option of animationOptions){
	                resolved[option] = cfg[option];
	            }
	            (isArray(cfg.properties) && cfg.properties || [
	                key
	            ]).forEach((prop)=>{
	                if (prop === key || !animatedProps.has(prop)) {
	                    animatedProps.set(prop, resolved);
	                }
	            });
	        });
	    }
	 _animateOptions(target, values) {
	        const newOptions = values.options;
	        const options = resolveTargetOptions(target, newOptions);
	        if (!options) {
	            return [];
	        }
	        const animations = this._createAnimations(options, newOptions);
	        if (newOptions.$shared) {
	            awaitAll(target.options.$animations, newOptions).then(()=>{
	                target.options = newOptions;
	            }, ()=>{
	            });
	        }
	        return animations;
	    }
	 _createAnimations(target, values) {
	        const animatedProps = this._properties;
	        const animations = [];
	        const running = target.$animations || (target.$animations = {});
	        const props = Object.keys(values);
	        const date = Date.now();
	        let i;
	        for(i = props.length - 1; i >= 0; --i){
	            const prop = props[i];
	            if (prop.charAt(0) === '$') {
	                continue;
	            }
	            if (prop === 'options') {
	                animations.push(...this._animateOptions(target, values));
	                continue;
	            }
	            const value = values[prop];
	            let animation = running[prop];
	            const cfg = animatedProps.get(prop);
	            if (animation) {
	                if (cfg && animation.active()) {
	                    animation.update(cfg, value, date);
	                    continue;
	                } else {
	                    animation.cancel();
	                }
	            }
	            if (!cfg || !cfg.duration) {
	                target[prop] = value;
	                continue;
	            }
	            running[prop] = animation = new Animation(cfg, target, prop, value);
	            animations.push(animation);
	        }
	        return animations;
	    }
	 update(target, values) {
	        if (this._properties.size === 0) {
	            Object.assign(target, values);
	            return;
	        }
	        const animations = this._createAnimations(target, values);
	        if (animations.length) {
	            animator.add(this._chart, animations);
	            return true;
	        }
	    }
	}
	function awaitAll(animations, properties) {
	    const running = [];
	    const keys = Object.keys(properties);
	    for(let i = 0; i < keys.length; i++){
	        const anim = animations[keys[i]];
	        if (anim && anim.active()) {
	            running.push(anim.wait());
	        }
	    }
	    return Promise.all(running);
	}
	function resolveTargetOptions(target, newOptions) {
	    if (!newOptions) {
	        return;
	    }
	    let options = target.options;
	    if (!options) {
	        target.options = newOptions;
	        return;
	    }
	    if (options.$shared) {
	        target.options = options = Object.assign({}, options, {
	            $shared: false,
	            $animations: {}
	        });
	    }
	    return options;
	}

	function scaleClip(scale, allowedOverflow) {
	    const opts = scale && scale.options || {};
	    const reverse = opts.reverse;
	    const min = opts.min === undefined ? allowedOverflow : 0;
	    const max = opts.max === undefined ? allowedOverflow : 0;
	    return {
	        start: reverse ? max : min,
	        end: reverse ? min : max
	    };
	}
	function defaultClip(xScale, yScale, allowedOverflow) {
	    if (allowedOverflow === false) {
	        return false;
	    }
	    const x = scaleClip(xScale, allowedOverflow);
	    const y = scaleClip(yScale, allowedOverflow);
	    return {
	        top: y.end,
	        right: x.end,
	        bottom: y.start,
	        left: x.start
	    };
	}
	function toClip(value) {
	    let t, r, b, l;
	    if (isObject(value)) {
	        t = value.top;
	        r = value.right;
	        b = value.bottom;
	        l = value.left;
	    } else {
	        t = r = b = l = value;
	    }
	    return {
	        top: t,
	        right: r,
	        bottom: b,
	        left: l,
	        disabled: value === false
	    };
	}
	function getSortedDatasetIndices(chart, filterVisible) {
	    const keys = [];
	    const metasets = chart._getSortedDatasetMetas(filterVisible);
	    let i, ilen;
	    for(i = 0, ilen = metasets.length; i < ilen; ++i){
	        keys.push(metasets[i].index);
	    }
	    return keys;
	}
	function applyStack(stack, value, dsIndex, options = {}) {
	    const keys = stack.keys;
	    const singleMode = options.mode === 'single';
	    let i, ilen, datasetIndex, otherValue;
	    if (value === null) {
	        return;
	    }
	    let found = false;
	    for(i = 0, ilen = keys.length; i < ilen; ++i){
	        datasetIndex = +keys[i];
	        if (datasetIndex === dsIndex) {
	            found = true;
	            if (options.all) {
	                continue;
	            }
	            break;
	        }
	        otherValue = stack.values[datasetIndex];
	        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {
	            value += otherValue;
	        }
	    }
	    if (!found && !options.all) {
	        return 0;
	    }
	    return value;
	}
	function convertObjectDataToArray(data, meta) {
	    const { iScale , vScale  } = meta;
	    const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';
	    const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';
	    const keys = Object.keys(data);
	    const adata = new Array(keys.length);
	    let i, ilen, key;
	    for(i = 0, ilen = keys.length; i < ilen; ++i){
	        key = keys[i];
	        adata[i] = {
	            [iAxisKey]: key,
	            [vAxisKey]: data[key]
	        };
	    }
	    return adata;
	}
	function isStacked(scale, meta) {
	    const stacked = scale && scale.options.stacked;
	    return stacked || stacked === undefined && meta.stack !== undefined;
	}
	function getStackKey(indexScale, valueScale, meta) {
	    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;
	}
	function getUserBounds(scale) {
	    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();
	    return {
	        min: minDefined ? min : Number.NEGATIVE_INFINITY,
	        max: maxDefined ? max : Number.POSITIVE_INFINITY
	    };
	}
	function getOrCreateStack(stacks, stackKey, indexValue) {
	    const subStack = stacks[stackKey] || (stacks[stackKey] = {});
	    return subStack[indexValue] || (subStack[indexValue] = {});
	}
	function getLastIndexInStack(stack, vScale, positive, type) {
	    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){
	        const value = stack[meta.index];
	        if (positive && value > 0 || !positive && value < 0) {
	            return meta.index;
	        }
	    }
	    return null;
	}
	function updateStacks(controller, parsed) {
	    const { chart , _cachedMeta: meta  } = controller;
	    const stacks = chart._stacks || (chart._stacks = {});
	    const { iScale , vScale , index: datasetIndex  } = meta;
	    const iAxis = iScale.axis;
	    const vAxis = vScale.axis;
	    const key = getStackKey(iScale, vScale, meta);
	    const ilen = parsed.length;
	    let stack;
	    for(let i = 0; i < ilen; ++i){
	        const item = parsed[i];
	        const { [iAxis]: index , [vAxis]: value  } = item;
	        const itemStacks = item._stacks || (item._stacks = {});
	        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);
	        stack[datasetIndex] = value;
	        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);
	        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);
	        const visualValues = stack._visualValues || (stack._visualValues = {});
	        visualValues[datasetIndex] = value;
	    }
	}
	function getFirstScaleId(chart, axis) {
	    const scales = chart.scales;
	    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();
	}
	function createDatasetContext(parent, index) {
	    return createContext(parent, {
	        active: false,
	        dataset: undefined,
	        datasetIndex: index,
	        index,
	        mode: 'default',
	        type: 'dataset'
	    });
	}
	function createDataContext(parent, index, element) {
	    return createContext(parent, {
	        active: false,
	        dataIndex: index,
	        parsed: undefined,
	        raw: undefined,
	        element,
	        index,
	        mode: 'default',
	        type: 'data'
	    });
	}
	function clearStacks(meta, items) {
	    const datasetIndex = meta.controller.index;
	    const axis = meta.vScale && meta.vScale.axis;
	    if (!axis) {
	        return;
	    }
	    items = items || meta._parsed;
	    for (const parsed of items){
	        const stacks = parsed._stacks;
	        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {
	            return;
	        }
	        delete stacks[axis][datasetIndex];
	        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {
	            delete stacks[axis]._visualValues[datasetIndex];
	        }
	    }
	}
	const isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';
	const cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);
	const createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {
	        keys: getSortedDatasetIndices(chart, true),
	        values: null
	    };
	class DatasetController {
	 static defaults = {};
	 static datasetElementType = null;
	 static dataElementType = null;
	 constructor(chart, datasetIndex){
	        this.chart = chart;
	        this._ctx = chart.ctx;
	        this.index = datasetIndex;
	        this._cachedDataOpts = {};
	        this._cachedMeta = this.getMeta();
	        this._type = this._cachedMeta.type;
	        this.options = undefined;
	         this._parsing = false;
	        this._data = undefined;
	        this._objectData = undefined;
	        this._sharedOptions = undefined;
	        this._drawStart = undefined;
	        this._drawCount = undefined;
	        this.enableOptionSharing = false;
	        this.supportsDecimation = false;
	        this.$context = undefined;
	        this._syncList = [];
	        this.datasetElementType = new.target.datasetElementType;
	        this.dataElementType = new.target.dataElementType;
	        this.initialize();
	    }
	    initialize() {
	        const meta = this._cachedMeta;
	        this.configure();
	        this.linkScales();
	        meta._stacked = isStacked(meta.vScale, meta);
	        this.addElements();
	        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {
	            console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options");
	        }
	    }
	    updateIndex(datasetIndex) {
	        if (this.index !== datasetIndex) {
	            clearStacks(this._cachedMeta);
	        }
	        this.index = datasetIndex;
	    }
	    linkScales() {
	        const chart = this.chart;
	        const meta = this._cachedMeta;
	        const dataset = this.getDataset();
	        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;
	        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));
	        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));
	        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));
	        const indexAxis = meta.indexAxis;
	        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
	        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
	        meta.xScale = this.getScaleForId(xid);
	        meta.yScale = this.getScaleForId(yid);
	        meta.rScale = this.getScaleForId(rid);
	        meta.iScale = this.getScaleForId(iid);
	        meta.vScale = this.getScaleForId(vid);
	    }
	    getDataset() {
	        return this.chart.data.datasets[this.index];
	    }
	    getMeta() {
	        return this.chart.getDatasetMeta(this.index);
	    }
	 getScaleForId(scaleID) {
	        return this.chart.scales[scaleID];
	    }
	 _getOtherScale(scale) {
	        const meta = this._cachedMeta;
	        return scale === meta.iScale ? meta.vScale : meta.iScale;
	    }
	    reset() {
	        this._update('reset');
	    }
	 _destroy() {
	        const meta = this._cachedMeta;
	        if (this._data) {
	            unlistenArrayEvents(this._data, this);
	        }
	        if (meta._stacked) {
	            clearStacks(meta);
	        }
	    }
	 _dataCheck() {
	        const dataset = this.getDataset();
	        const data = dataset.data || (dataset.data = []);
	        const _data = this._data;
	        if (isObject(data)) {
	            const meta = this._cachedMeta;
	            this._data = convertObjectDataToArray(data, meta);
	        } else if (_data !== data) {
	            if (_data) {
	                unlistenArrayEvents(_data, this);
	                const meta = this._cachedMeta;
	                clearStacks(meta);
	                meta._parsed = [];
	            }
	            if (data && Object.isExtensible(data)) {
	                listenArrayEvents(data, this);
	            }
	            this._syncList = [];
	            this._data = data;
	        }
	    }
	    addElements() {
	        const meta = this._cachedMeta;
	        this._dataCheck();
	        if (this.datasetElementType) {
	            meta.dataset = new this.datasetElementType();
	        }
	    }
	    buildOrUpdateElements(resetNewElements) {
	        const meta = this._cachedMeta;
	        const dataset = this.getDataset();
	        let stackChanged = false;
	        this._dataCheck();
	        const oldStacked = meta._stacked;
	        meta._stacked = isStacked(meta.vScale, meta);
	        if (meta.stack !== dataset.stack) {
	            stackChanged = true;
	            clearStacks(meta);
	            meta.stack = dataset.stack;
	        }
	        this._resyncElements(resetNewElements);
	        if (stackChanged || oldStacked !== meta._stacked) {
	            updateStacks(this, meta._parsed);
	            meta._stacked = isStacked(meta.vScale, meta);
	        }
	    }
	 configure() {
	        const config = this.chart.config;
	        const scopeKeys = config.datasetScopeKeys(this._type);
	        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);
	        this.options = config.createResolver(scopes, this.getContext());
	        this._parsing = this.options.parsing;
	        this._cachedDataOpts = {};
	    }
	 parse(start, count) {
	        const { _cachedMeta: meta , _data: data  } = this;
	        const { iScale , _stacked  } = meta;
	        const iAxis = iScale.axis;
	        let sorted = start === 0 && count === data.length ? true : meta._sorted;
	        let prev = start > 0 && meta._parsed[start - 1];
	        let i, cur, parsed;
	        if (this._parsing === false) {
	            meta._parsed = data;
	            meta._sorted = true;
	            parsed = data;
	        } else {
	            if (isArray(data[start])) {
	                parsed = this.parseArrayData(meta, data, start, count);
	            } else if (isObject(data[start])) {
	                parsed = this.parseObjectData(meta, data, start, count);
	            } else {
	                parsed = this.parsePrimitiveData(meta, data, start, count);
	            }
	            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];
	            for(i = 0; i < count; ++i){
	                meta._parsed[i + start] = cur = parsed[i];
	                if (sorted) {
	                    if (isNotInOrderComparedToPrev()) {
	                        sorted = false;
	                    }
	                    prev = cur;
	                }
	            }
	            meta._sorted = sorted;
	        }
	        if (_stacked) {
	            updateStacks(this, parsed);
	        }
	    }
	 parsePrimitiveData(meta, data, start, count) {
	        const { iScale , vScale  } = meta;
	        const iAxis = iScale.axis;
	        const vAxis = vScale.axis;
	        const labels = iScale.getLabels();
	        const singleScale = iScale === vScale;
	        const parsed = new Array(count);
	        let i, ilen, index;
	        for(i = 0, ilen = count; i < ilen; ++i){
	            index = i + start;
	            parsed[i] = {
	                [iAxis]: singleScale || iScale.parse(labels[index], index),
	                [vAxis]: vScale.parse(data[index], index)
	            };
	        }
	        return parsed;
	    }
	 parseArrayData(meta, data, start, count) {
	        const { xScale , yScale  } = meta;
	        const parsed = new Array(count);
	        let i, ilen, index, item;
	        for(i = 0, ilen = count; i < ilen; ++i){
	            index = i + start;
	            item = data[index];
	            parsed[i] = {
	                x: xScale.parse(item[0], index),
	                y: yScale.parse(item[1], index)
	            };
	        }
	        return parsed;
	    }
	 parseObjectData(meta, data, start, count) {
	        const { xScale , yScale  } = meta;
	        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;
	        const parsed = new Array(count);
	        let i, ilen, index, item;
	        for(i = 0, ilen = count; i < ilen; ++i){
	            index = i + start;
	            item = data[index];
	            parsed[i] = {
	                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),
	                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)
	            };
	        }
	        return parsed;
	    }
	 getParsed(index) {
	        return this._cachedMeta._parsed[index];
	    }
	 getDataElement(index) {
	        return this._cachedMeta.data[index];
	    }
	 applyStack(scale, parsed, mode) {
	        const chart = this.chart;
	        const meta = this._cachedMeta;
	        const value = parsed[scale.axis];
	        const stack = {
	            keys: getSortedDatasetIndices(chart, true),
	            values: parsed._stacks[scale.axis]._visualValues
	        };
	        return applyStack(stack, value, meta.index, {
	            mode
	        });
	    }
	 updateRangeFromParsed(range, scale, parsed, stack) {
	        const parsedValue = parsed[scale.axis];
	        let value = parsedValue === null ? NaN : parsedValue;
	        const values = stack && parsed._stacks[scale.axis];
	        if (stack && values) {
	            stack.values = values;
	            value = applyStack(stack, parsedValue, this._cachedMeta.index);
	        }
	        range.min = Math.min(range.min, value);
	        range.max = Math.max(range.max, value);
	    }
	 getMinMax(scale, canStack) {
	        const meta = this._cachedMeta;
	        const _parsed = meta._parsed;
	        const sorted = meta._sorted && scale === meta.iScale;
	        const ilen = _parsed.length;
	        const otherScale = this._getOtherScale(scale);
	        const stack = createStack(canStack, meta, this.chart);
	        const range = {
	            min: Number.POSITIVE_INFINITY,
	            max: Number.NEGATIVE_INFINITY
	        };
	        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);
	        let i, parsed;
	        function _skip() {
	            parsed = _parsed[i];
	            const otherValue = parsed[otherScale.axis];
	            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;
	        }
	        for(i = 0; i < ilen; ++i){
	            if (_skip()) {
	                continue;
	            }
	            this.updateRangeFromParsed(range, scale, parsed, stack);
	            if (sorted) {
	                break;
	            }
	        }
	        if (sorted) {
	            for(i = ilen - 1; i >= 0; --i){
	                if (_skip()) {
	                    continue;
	                }
	                this.updateRangeFromParsed(range, scale, parsed, stack);
	                break;
	            }
	        }
	        return range;
	    }
	    getAllParsedValues(scale) {
	        const parsed = this._cachedMeta._parsed;
	        const values = [];
	        let i, ilen, value;
	        for(i = 0, ilen = parsed.length; i < ilen; ++i){
	            value = parsed[i][scale.axis];
	            if (isNumberFinite(value)) {
	                values.push(value);
	            }
	        }
	        return values;
	    }
	 getMaxOverflow() {
	        return false;
	    }
	 getLabelAndValue(index) {
	        const meta = this._cachedMeta;
	        const iScale = meta.iScale;
	        const vScale = meta.vScale;
	        const parsed = this.getParsed(index);
	        return {
	            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',
	            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''
	        };
	    }
	 _update(mode) {
	        const meta = this._cachedMeta;
	        this.update(mode || 'default');
	        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));
	    }
	 update(mode) {}
	    draw() {
	        const ctx = this._ctx;
	        const chart = this.chart;
	        const meta = this._cachedMeta;
	        const elements = meta.data || [];
	        const area = chart.chartArea;
	        const active = [];
	        const start = this._drawStart || 0;
	        const count = this._drawCount || elements.length - start;
	        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;
	        let i;
	        if (meta.dataset) {
	            meta.dataset.draw(ctx, area, start, count);
	        }
	        for(i = start; i < start + count; ++i){
	            const element = elements[i];
	            if (element.hidden) {
	                continue;
	            }
	            if (element.active && drawActiveElementsOnTop) {
	                active.push(element);
	            } else {
	                element.draw(ctx, area);
	            }
	        }
	        for(i = 0; i < active.length; ++i){
	            active[i].draw(ctx, area);
	        }
	    }
	 getStyle(index, active) {
	        const mode = active ? 'active' : 'default';
	        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);
	    }
	 getContext(index, active, mode) {
	        const dataset = this.getDataset();
	        let context;
	        if (index >= 0 && index < this._cachedMeta.data.length) {
	            const element = this._cachedMeta.data[index];
	            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));
	            context.parsed = this.getParsed(index);
	            context.raw = dataset.data[index];
	            context.index = context.dataIndex = index;
	        } else {
	            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));
	            context.dataset = dataset;
	            context.index = context.datasetIndex = this.index;
	        }
	        context.active = !!active;
	        context.mode = mode;
	        return context;
	    }
	 resolveDatasetElementOptions(mode) {
	        return this._resolveElementOptions(this.datasetElementType.id, mode);
	    }
	 resolveDataElementOptions(index, mode) {
	        return this._resolveElementOptions(this.dataElementType.id, mode, index);
	    }
	 _resolveElementOptions(elementType, mode = 'default', index) {
	        const active = mode === 'active';
	        const cache = this._cachedDataOpts;
	        const cacheKey = elementType + '-' + mode;
	        const cached = cache[cacheKey];
	        const sharing = this.enableOptionSharing && defined(index);
	        if (cached) {
	            return cloneIfNotShared(cached, sharing);
	        }
	        const config = this.chart.config;
	        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);
	        const prefixes = active ? [
	            `${elementType}Hover`,
	            'hover',
	            elementType,
	            ''
	        ] : [
	            elementType,
	            ''
	        ];
	        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
	        const names = Object.keys(defaults$1.elements[elementType]);
	        const context = ()=>this.getContext(index, active, mode);
	        const values = config.resolveNamedOptions(scopes, names, context, prefixes);
	        if (values.$shared) {
	            values.$shared = sharing;
	            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));
	        }
	        return values;
	    }
	 _resolveAnimations(index, transition, active) {
	        const chart = this.chart;
	        const cache = this._cachedDataOpts;
	        const cacheKey = `animation-${transition}`;
	        const cached = cache[cacheKey];
	        if (cached) {
	            return cached;
	        }
	        let options;
	        if (chart.options.animation !== false) {
	            const config = this.chart.config;
	            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);
	            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
	            options = config.createResolver(scopes, this.getContext(index, active, transition));
	        }
	        const animations = new Animations(chart, options && options.animations);
	        if (options && options._cacheable) {
	            cache[cacheKey] = Object.freeze(animations);
	        }
	        return animations;
	    }
	 getSharedOptions(options) {
	        if (!options.$shared) {
	            return;
	        }
	        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));
	    }
	 includeOptions(mode, sharedOptions) {
	        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;
	    }
	 _getSharedOptions(start, mode) {
	        const firstOpts = this.resolveDataElementOptions(start, mode);
	        const previouslySharedOptions = this._sharedOptions;
	        const sharedOptions = this.getSharedOptions(firstOpts);
	        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;
	        this.updateSharedOptions(sharedOptions, mode, firstOpts);
	        return {
	            sharedOptions,
	            includeOptions
	        };
	    }
	 updateElement(element, index, properties, mode) {
	        if (isDirectUpdateMode(mode)) {
	            Object.assign(element, properties);
	        } else {
	            this._resolveAnimations(index, mode).update(element, properties);
	        }
	    }
	 updateSharedOptions(sharedOptions, mode, newOptions) {
	        if (sharedOptions && !isDirectUpdateMode(mode)) {
	            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);
	        }
	    }
	 _setStyle(element, index, mode, active) {
	        element.active = active;
	        const options = this.getStyle(index, active);
	        this._resolveAnimations(index, mode, active).update(element, {
	            options: !active && this.getSharedOptions(options) || options
	        });
	    }
	    removeHoverStyle(element, datasetIndex, index) {
	        this._setStyle(element, index, 'active', false);
	    }
	    setHoverStyle(element, datasetIndex, index) {
	        this._setStyle(element, index, 'active', true);
	    }
	 _removeDatasetHoverStyle() {
	        const element = this._cachedMeta.dataset;
	        if (element) {
	            this._setStyle(element, undefined, 'active', false);
	        }
	    }
	 _setDatasetHoverStyle() {
	        const element = this._cachedMeta.dataset;
	        if (element) {
	            this._setStyle(element, undefined, 'active', true);
	        }
	    }
	 _resyncElements(resetNewElements) {
	        const data = this._data;
	        const elements = this._cachedMeta.data;
	        for (const [method, arg1, arg2] of this._syncList){
	            this[method](arg1, arg2);
	        }
	        this._syncList = [];
	        const numMeta = elements.length;
	        const numData = data.length;
	        const count = Math.min(numData, numMeta);
	        if (count) {
	            this.parse(0, count);
	        }
	        if (numData > numMeta) {
	            this._insertElements(numMeta, numData - numMeta, resetNewElements);
	        } else if (numData < numMeta) {
	            this._removeElements(numData, numMeta - numData);
	        }
	    }
	 _insertElements(start, count, resetNewElements = true) {
	        const meta = this._cachedMeta;
	        const data = meta.data;
	        const end = start + count;
	        let i;
	        const move = (arr)=>{
	            arr.length += count;
	            for(i = arr.length - 1; i >= end; i--){
	                arr[i] = arr[i - count];
	            }
	        };
	        move(data);
	        for(i = start; i < end; ++i){
	            data[i] = new this.dataElementType();
	        }
	        if (this._parsing) {
	            move(meta._parsed);
	        }
	        this.parse(start, count);
	        if (resetNewElements) {
	            this.updateElements(data, start, count, 'reset');
	        }
	    }
	    updateElements(element, start, count, mode) {}
	 _removeElements(start, count) {
	        const meta = this._cachedMeta;
	        if (this._parsing) {
	            const removed = meta._parsed.splice(start, count);
	            if (meta._stacked) {
	                clearStacks(meta, removed);
	            }
	        }
	        meta.data.splice(start, count);
	    }
	 _sync(args) {
	        if (this._parsing) {
	            this._syncList.push(args);
	        } else {
	            const [method, arg1, arg2] = args;
	            this[method](arg1, arg2);
	        }
	        this.chart._dataChanges.push([
	            this.index,
	            ...args
	        ]);
	    }
	    _onDataPush() {
	        const count = arguments.length;
	        this._sync([
	            '_insertElements',
	            this.getDataset().data.length - count,
	            count
	        ]);
	    }
	    _onDataPop() {
	        this._sync([
	            '_removeElements',
	            this._cachedMeta.data.length - 1,
	            1
	        ]);
	    }
	    _onDataShift() {
	        this._sync([
	            '_removeElements',
	            0,
	            1
	        ]);
	    }
	    _onDataSplice(start, count) {
	        if (count) {
	            this._sync([
	                '_removeElements',
	                start,
	                count
	            ]);
	        }
	        const newCount = arguments.length - 2;
	        if (newCount) {
	            this._sync([
	                '_insertElements',
	                start,
	                newCount
	            ]);
	        }
	    }
	    _onDataUnshift() {
	        this._sync([
	            '_insertElements',
	            0,
	            arguments.length
	        ]);
	    }
	}

	function getAllScaleValues(scale, type) {
	    if (!scale._cache.$bar) {
	        const visibleMetas = scale.getMatchingVisibleMetas(type);
	        let values = [];
	        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){
	            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));
	        }
	        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));
	    }
	    return scale._cache.$bar;
	}
	 function computeMinSampleSize(meta) {
	    const scale = meta.iScale;
	    const values = getAllScaleValues(scale, meta.type);
	    let min = scale._length;
	    let i, ilen, curr, prev;
	    const updateMinAndPrev = ()=>{
	        if (curr === 32767 || curr === -32768) {
	            return;
	        }
	        if (defined(prev)) {
	            min = Math.min(min, Math.abs(curr - prev) || min);
	        }
	        prev = curr;
	    };
	    for(i = 0, ilen = values.length; i < ilen; ++i){
	        curr = scale.getPixelForValue(values[i]);
	        updateMinAndPrev();
	    }
	    prev = undefined;
	    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){
	        curr = scale.getPixelForTick(i);
	        updateMinAndPrev();
	    }
	    return min;
	}
	 function computeFitCategoryTraits(index, ruler, options, stackCount) {
	    const thickness = options.barThickness;
	    let size, ratio;
	    if (isNullOrUndef(thickness)) {
	        size = ruler.min * options.categoryPercentage;
	        ratio = options.barPercentage;
	    } else {
	        size = thickness * stackCount;
	        ratio = 1;
	    }
	    return {
	        chunk: size / stackCount,
	        ratio,
	        start: ruler.pixels[index] - size / 2
	    };
	}
	 function computeFlexCategoryTraits(index, ruler, options, stackCount) {
	    const pixels = ruler.pixels;
	    const curr = pixels[index];
	    let prev = index > 0 ? pixels[index - 1] : null;
	    let next = index < pixels.length - 1 ? pixels[index + 1] : null;
	    const percent = options.categoryPercentage;
	    if (prev === null) {
	        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
	    }
	    if (next === null) {
	        next = curr + curr - prev;
	    }
	    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;
	    const size = Math.abs(next - prev) / 2 * percent;
	    return {
	        chunk: size / stackCount,
	        ratio: options.barPercentage,
	        start
	    };
	}
	function parseFloatBar(entry, item, vScale, i) {
	    const startValue = vScale.parse(entry[0], i);
	    const endValue = vScale.parse(entry[1], i);
	    const min = Math.min(startValue, endValue);
	    const max = Math.max(startValue, endValue);
	    let barStart = min;
	    let barEnd = max;
	    if (Math.abs(min) > Math.abs(max)) {
	        barStart = max;
	        barEnd = min;
	    }
	    item[vScale.axis] = barEnd;
	    item._custom = {
	        barStart,
	        barEnd,
	        start: startValue,
	        end: endValue,
	        min,
	        max
	    };
	}
	function parseValue(entry, item, vScale, i) {
	    if (isArray(entry)) {
	        parseFloatBar(entry, item, vScale, i);
	    } else {
	        item[vScale.axis] = vScale.parse(entry, i);
	    }
	    return item;
	}
	function parseArrayOrPrimitive(meta, data, start, count) {
	    const iScale = meta.iScale;
	    const vScale = meta.vScale;
	    const labels = iScale.getLabels();
	    const singleScale = iScale === vScale;
	    const parsed = [];
	    let i, ilen, item, entry;
	    for(i = start, ilen = start + count; i < ilen; ++i){
	        entry = data[i];
	        item = {};
	        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);
	        parsed.push(parseValue(entry, item, vScale, i));
	    }
	    return parsed;
	}
	function isFloatBar(custom) {
	    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;
	}
	function barSign(size, vScale, actualBase) {
	    if (size !== 0) {
	        return sign(size);
	    }
	    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);
	}
	function borderProps(properties) {
	    let reverse, start, end, top, bottom;
	    if (properties.horizontal) {
	        reverse = properties.base > properties.x;
	        start = 'left';
	        end = 'right';
	    } else {
	        reverse = properties.base < properties.y;
	        start = 'bottom';
	        end = 'top';
	    }
	    if (reverse) {
	        top = 'end';
	        bottom = 'start';
	    } else {
	        top = 'start';
	        bottom = 'end';
	    }
	    return {
	        start,
	        end,
	        reverse,
	        top,
	        bottom
	    };
	}
	function setBorderSkipped(properties, options, stack, index) {
	    let edge = options.borderSkipped;
	    const res = {};
	    if (!edge) {
	        properties.borderSkipped = res;
	        return;
	    }
	    if (edge === true) {
	        properties.borderSkipped = {
	            top: true,
	            right: true,
	            bottom: true,
	            left: true
	        };
	        return;
	    }
	    const { start , end , reverse , top , bottom  } = borderProps(properties);
	    if (edge === 'middle' && stack) {
	        properties.enableBorderRadius = true;
	        if ((stack._top || 0) === index) {
	            edge = top;
	        } else if ((stack._bottom || 0) === index) {
	            edge = bottom;
	        } else {
	            res[parseEdge(bottom, start, end, reverse)] = true;
	            edge = top;
	        }
	    }
	    res[parseEdge(edge, start, end, reverse)] = true;
	    properties.borderSkipped = res;
	}
	function parseEdge(edge, a, b, reverse) {
	    if (reverse) {
	        edge = swap(edge, a, b);
	        edge = startEnd(edge, b, a);
	    } else {
	        edge = startEnd(edge, a, b);
	    }
	    return edge;
	}
	function swap(orig, v1, v2) {
	    return orig === v1 ? v2 : orig === v2 ? v1 : orig;
	}
	function startEnd(v, start, end) {
	    return v === 'start' ? start : v === 'end' ? end : v;
	}
	function setInflateAmount(properties, { inflateAmount  }, ratio) {
	    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;
	}
	class BarController extends DatasetController {
	    static id = 'bar';
	 static defaults = {
	        datasetElementType: false,
	        dataElementType: 'bar',
	        categoryPercentage: 0.8,
	        barPercentage: 0.9,
	        grouped: true,
	        animations: {
	            numbers: {
	                type: 'number',
	                properties: [
	                    'x',
	                    'y',
	                    'base',
	                    'width',
	                    'height'
	                ]
	            }
	        }
	    };
	 static overrides = {
	        scales: {
	            _index_: {
	                type: 'category',
	                offset: true,
	                grid: {
	                    offset: true
	                }
	            },
	            _value_: {
	                type: 'linear',
	                beginAtZero: true
	            }
	        }
	    };
	 parsePrimitiveData(meta, data, start, count) {
	        return parseArrayOrPrimitive(meta, data, start, count);
	    }
	 parseArrayData(meta, data, start, count) {
	        return parseArrayOrPrimitive(meta, data, start, count);
	    }
	 parseObjectData(meta, data, start, count) {
	        const { iScale , vScale  } = meta;
	        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;
	        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;
	        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;
	        const parsed = [];
	        let i, ilen, item, obj;
	        for(i = start, ilen = start + count; i < ilen; ++i){
	            obj = data[i];
	            item = {};
	            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);
	            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));
	        }
	        return parsed;
	    }
	 updateRangeFromParsed(range, scale, parsed, stack) {
	        super.updateRangeFromParsed(range, scale, parsed, stack);
	        const custom = parsed._custom;
	        if (custom && scale === this._cachedMeta.vScale) {
	            range.min = Math.min(range.min, custom.min);
	            range.max = Math.max(range.max, custom.max);
	        }
	    }
	 getMaxOverflow() {
	        return 0;
	    }
	 getLabelAndValue(index) {
	        const meta = this._cachedMeta;
	        const { iScale , vScale  } = meta;
	        const parsed = this.getParsed(index);
	        const custom = parsed._custom;
	        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);
	        return {
	            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),
	            value
	        };
	    }
	    initialize() {
	        this.enableOptionSharing = true;
	        super.initialize();
	        const meta = this._cachedMeta;
	        meta.stack = this.getDataset().stack;
	    }
	    update(mode) {
	        const meta = this._cachedMeta;
	        this.updateElements(meta.data, 0, meta.data.length, mode);
	    }
	    updateElements(bars, start, count, mode) {
	        const reset = mode === 'reset';
	        const { index , _cachedMeta: { vScale  }  } = this;
	        const base = vScale.getBasePixel();
	        const horizontal = vScale.isHorizontal();
	        const ruler = this._getRuler();
	        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);
	        for(let i = start; i < start + count; i++){
	            const parsed = this.getParsed(i);
	            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {
	                base,
	                head: base
	            } : this._calculateBarValuePixels(i);
	            const ipixels = this._calculateBarIndexPixels(i, ruler);
	            const stack = (parsed._stacks || {})[vScale.axis];
	            const properties = {
	                horizontal,
	                base: vpixels.base,
	                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,
	                x: horizontal ? vpixels.head : ipixels.center,
	                y: horizontal ? ipixels.center : vpixels.head,
	                height: horizontal ? ipixels.size : Math.abs(vpixels.size),
	                width: horizontal ? Math.abs(vpixels.size) : ipixels.size
	            };
	            if (includeOptions) {
	                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);
	            }
	            const options = properties.options || bars[i].options;
	            setBorderSkipped(properties, options, stack, index);
	            setInflateAmount(properties, options, ruler.ratio);
	            this.updateElement(bars[i], i, properties, mode);
	        }
	    }
	 _getStacks(last, dataIndex) {
	        const { iScale  } = this._cachedMeta;
	        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);
	        const stacked = iScale.options.stacked;
	        const stacks = [];
	        const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);
	        const iScaleValue = currentParsed && currentParsed[iScale.axis];
	        const skipNull = (meta)=>{
	            const parsed = meta._parsed.find((item)=>item[iScale.axis] === iScaleValue);
	            const val = parsed && parsed[meta.vScale.axis];
	            if (isNullOrUndef(val) || isNaN(val)) {
	                return true;
	            }
	        };
	        for (const meta of metasets){
	            if (dataIndex !== undefined && skipNull(meta)) {
	                continue;
	            }
	            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {
	                stacks.push(meta.stack);
	            }
	            if (meta.index === last) {
	                break;
	            }
	        }
	        if (!stacks.length) {
	            stacks.push(undefined);
	        }
	        return stacks;
	    }
	 _getStackCount(index) {
	        return this._getStacks(undefined, index).length;
	    }
	    _getAxisCount() {
	        return this._getAxis().length;
	    }
	    getFirstScaleIdForIndexAxis() {
	        const scales = this.chart.scales;
	        const indexScaleId = this.chart.options.indexAxis;
	        return Object.keys(scales).filter((key)=>scales[key].axis === indexScaleId).shift();
	    }
	    _getAxis() {
	        const axis = {};
	        const firstScaleAxisId = this.getFirstScaleIdForIndexAxis();
	        for (const dataset of this.chart.data.datasets){
	            axis[valueOrDefault(this.chart.options.indexAxis === 'x' ? dataset.xAxisID : dataset.yAxisID, firstScaleAxisId)] = true;
	        }
	        return Object.keys(axis);
	    }
	 _getStackIndex(datasetIndex, name, dataIndex) {
	        const stacks = this._getStacks(datasetIndex, dataIndex);
	        const index = name !== undefined ? stacks.indexOf(name) : -1;
	        return index === -1 ? stacks.length - 1 : index;
	    }
	 _getRuler() {
	        const opts = this.options;
	        const meta = this._cachedMeta;
	        const iScale = meta.iScale;
	        const pixels = [];
	        let i, ilen;
	        for(i = 0, ilen = meta.data.length; i < ilen; ++i){
	            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));
	        }
	        const barThickness = opts.barThickness;
	        const min = barThickness || computeMinSampleSize(meta);
	        return {
	            min,
	            pixels,
	            start: iScale._startPixel,
	            end: iScale._endPixel,
	            stackCount: this._getStackCount(),
	            scale: iScale,
	            grouped: opts.grouped,
	            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage
	        };
	    }
	 _calculateBarValuePixels(index) {
	        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;
	        const actualBase = baseValue || 0;
	        const parsed = this.getParsed(index);
	        const custom = parsed._custom;
	        const floating = isFloatBar(custom);
	        let value = parsed[vScale.axis];
	        let start = 0;
	        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;
	        let head, size;
	        if (length !== value) {
	            start = length - value;
	            length = value;
	        }
	        if (floating) {
	            value = custom.barStart;
	            length = custom.barEnd - custom.barStart;
	            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {
	                start = 0;
	            }
	            start += value;
	        }
	        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;
	        let base = vScale.getPixelForValue(startValue);
	        if (this.chart.getDataVisibility(index)) {
	            head = vScale.getPixelForValue(start + length);
	        } else {
	            head = base;
	        }
	        size = head - base;
	        if (Math.abs(size) < minBarLength) {
	            size = barSign(size, vScale, actualBase) * minBarLength;
	            if (value === actualBase) {
	                base -= size / 2;
	            }
	            const startPixel = vScale.getPixelForDecimal(0);
	            const endPixel = vScale.getPixelForDecimal(1);
	            const min = Math.min(startPixel, endPixel);
	            const max = Math.max(startPixel, endPixel);
	            base = Math.max(Math.min(base, max), min);
	            head = base + size;
	            if (_stacked && !floating) {
	                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);
	            }
	        }
	        if (base === vScale.getPixelForValue(actualBase)) {
	            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;
	            base += halfGrid;
	            size -= halfGrid;
	        }
	        return {
	            size,
	            base,
	            head,
	            center: head + size / 2
	        };
	    }
	 _calculateBarIndexPixels(index, ruler) {
	        const scale = ruler.scale;
	        const options = this.options;
	        const skipNull = options.skipNull;
	        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);
	        let center, size;
	        const axisCount = this._getAxisCount();
	        if (ruler.grouped) {
	            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;
	            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount * axisCount) : computeFitCategoryTraits(index, ruler, options, stackCount * axisCount);
	            const axisID = this.chart.options.indexAxis === 'x' ? this.getDataset().xAxisID : this.getDataset().yAxisID;
	            const axisNumber = this._getAxis().indexOf(valueOrDefault(axisID, this.getFirstScaleIdForIndexAxis()));
	            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined) + axisNumber;
	            center = range.start + range.chunk * stackIndex + range.chunk / 2;
	            size = Math.min(maxBarThickness, range.chunk * range.ratio);
	        } else {
	            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);
	            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);
	        }
	        return {
	            base: center - size / 2,
	            head: center + size / 2,
	            center,
	            size
	        };
	    }
	    draw() {
	        const meta = this._cachedMeta;
	        const vScale = meta.vScale;
	        const rects = meta.data;
	        const ilen = rects.length;
	        let i = 0;
	        for(; i < ilen; ++i){
	            if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {
	                rects[i].draw(this._ctx);
	            }
	        }
	    }
	}

	function getRatioAndOffset(rotation, circumference, cutout) {
	    let ratioX = 1;
	    let ratioY = 1;
	    let offsetX = 0;
	    let offsetY = 0;
	    if (circumference < TAU) {
	        const startAngle = rotation;
	        const endAngle = startAngle + circumference;
	        const startX = Math.cos(startAngle);
	        const startY = Math.sin(startAngle);
	        const endX = Math.cos(endAngle);
	        const endY = Math.sin(endAngle);
	        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);
	        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);
	        const maxX = calcMax(0, startX, endX);
	        const maxY = calcMax(HALF_PI, startY, endY);
	        const minX = calcMin(PI, startX, endX);
	        const minY = calcMin(PI + HALF_PI, startY, endY);
	        ratioX = (maxX - minX) / 2;
	        ratioY = (maxY - minY) / 2;
	        offsetX = -(maxX + minX) / 2;
	        offsetY = -(maxY + minY) / 2;
	    }
	    return {
	        ratioX,
	        ratioY,
	        offsetX,
	        offsetY
	    };
	}
	class DoughnutController extends DatasetController {
	    static id = 'doughnut';
	 static defaults = {
	        datasetElementType: false,
	        dataElementType: 'arc',
	        animation: {
	            animateRotate: true,
	            animateScale: false
	        },
	        animations: {
	            numbers: {
	                type: 'number',
	                properties: [
	                    'circumference',
	                    'endAngle',
	                    'innerRadius',
	                    'outerRadius',
	                    'startAngle',
	                    'x',
	                    'y',
	                    'offset',
	                    'borderWidth',
	                    'spacing'
	                ]
	            }
	        },
	        cutout: '50%',
	        rotation: 0,
	        circumference: 360,
	        radius: '100%',
	        spacing: 0,
	        indexAxis: 'r'
	    };
	    static descriptors = {
	        _scriptable: (name)=>name !== 'spacing',
	        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')
	    };
	 static overrides = {
	        aspectRatio: 1,
	        plugins: {
	            legend: {
	                labels: {
	                    generateLabels (chart) {
	                        const data = chart.data;
	                        if (data.labels.length && data.datasets.length) {
	                            const { labels: { pointStyle , color  }  } = chart.legend.options;
	                            return data.labels.map((label, i)=>{
	                                const meta = chart.getDatasetMeta(0);
	                                const style = meta.controller.getStyle(i);
	                                return {
	                                    text: label,
	                                    fillStyle: style.backgroundColor,
	                                    strokeStyle: style.borderColor,
	                                    fontColor: color,
	                                    lineWidth: style.borderWidth,
	                                    pointStyle: pointStyle,
	                                    hidden: !chart.getDataVisibility(i),
	                                    index: i
	                                };
	                            });
	                        }
	                        return [];
	                    }
	                },
	                onClick (e, legendItem, legend) {
	                    legend.chart.toggleDataVisibility(legendItem.index);
	                    legend.chart.update();
	                }
	            }
	        }
	    };
	    constructor(chart, datasetIndex){
	        super(chart, datasetIndex);
	        this.enableOptionSharing = true;
	        this.innerRadius = undefined;
	        this.outerRadius = undefined;
	        this.offsetX = undefined;
	        this.offsetY = undefined;
	    }
	    linkScales() {}
	 parse(start, count) {
	        const data = this.getDataset().data;
	        const meta = this._cachedMeta;
	        if (this._parsing === false) {
	            meta._parsed = data;
	        } else {
	            let getter = (i)=>+data[i];
	            if (isObject(data[start])) {
	                const { key ='value'  } = this._parsing;
	                getter = (i)=>+resolveObjectKey(data[i], key);
	            }
	            let i, ilen;
	            for(i = start, ilen = start + count; i < ilen; ++i){
	                meta._parsed[i] = getter(i);
	            }
	        }
	    }
	 _getRotation() {
	        return toRadians(this.options.rotation - 90);
	    }
	 _getCircumference() {
	        return toRadians(this.options.circumference);
	    }
	 _getRotationExtents() {
	        let min = TAU;
	        let max = -TAU;
	        for(let i = 0; i < this.chart.data.datasets.length; ++i){
	            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {
	                const controller = this.chart.getDatasetMeta(i).controller;
	                const rotation = controller._getRotation();
	                const circumference = controller._getCircumference();
	                min = Math.min(min, rotation);
	                max = Math.max(max, rotation + circumference);
	            }
	        }
	        return {
	            rotation: min,
	            circumference: max - min
	        };
	    }
	 update(mode) {
	        const chart = this.chart;
	        const { chartArea  } = chart;
	        const meta = this._cachedMeta;
	        const arcs = meta.data;
	        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;
	        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);
	        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);
	        const chartWeight = this._getRingWeight(this.index);
	        const { circumference , rotation  } = this._getRotationExtents();
	        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);
	        const maxWidth = (chartArea.width - spacing) / ratioX;
	        const maxHeight = (chartArea.height - spacing) / ratioY;
	        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
	        const outerRadius = toDimension(this.options.radius, maxRadius);
	        const innerRadius = Math.max(outerRadius * cutout, 0);
	        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();
	        this.offsetX = offsetX * outerRadius;
	        this.offsetY = offsetY * outerRadius;
	        meta.total = this.calculateTotal();
	        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);
	        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);
	        this.updateElements(arcs, 0, arcs.length, mode);
	    }
	 _circumference(i, reset) {
	        const opts = this.options;
	        const meta = this._cachedMeta;
	        const circumference = this._getCircumference();
	        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {
	            return 0;
	        }
	        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);
	    }
	    updateElements(arcs, start, count, mode) {
	        const reset = mode === 'reset';
	        const chart = this.chart;
	        const chartArea = chart.chartArea;
	        const opts = chart.options;
	        const animationOpts = opts.animation;
	        const centerX = (chartArea.left + chartArea.right) / 2;
	        const centerY = (chartArea.top + chartArea.bottom) / 2;
	        const animateScale = reset && animationOpts.animateScale;
	        const innerRadius = animateScale ? 0 : this.innerRadius;
	        const outerRadius = animateScale ? 0 : this.outerRadius;
	        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);
	        let startAngle = this._getRotation();
	        let i;
	        for(i = 0; i < start; ++i){
	            startAngle += this._circumference(i, reset);
	        }
	        for(i = start; i < start + count; ++i){
	            const circumference = this._circumference(i, reset);
	            const arc = arcs[i];
	            const properties = {
	                x: centerX + this.offsetX,
	                y: centerY + this.offsetY,
	                startAngle,
	                endAngle: startAngle + circumference,
	                circumference,
	                outerRadius,
	                innerRadius
	            };
	            if (includeOptions) {
	                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);
	            }
	            startAngle += circumference;
	            this.updateElement(arc, i, properties, mode);
	        }
	    }
	    calculateTotal() {
	        const meta = this._cachedMeta;
	        const metaData = meta.data;
	        let total = 0;
	        let i;
	        for(i = 0; i < metaData.length; i++){
	            const value = meta._parsed[i];
	            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {
	                total += Math.abs(value);
	            }
	        }
	        return total;
	    }
	    calculateCircumference(value) {
	        const total = this._cachedMeta.total;
	        if (total > 0 && !isNaN(value)) {
	            return TAU * (Math.abs(value) / total);
	        }
	        return 0;
	    }
	    getLabelAndValue(index) {
	        const meta = this._cachedMeta;
	        const chart = this.chart;
	        const labels = chart.data.labels || [];
	        const value = formatNumber(meta._parsed[index], chart.options.locale);
	        return {
	            label: labels[index] || '',
	            value
	        };
	    }
	    getMaxBorderWidth(arcs) {
	        let max = 0;
	        const chart = this.chart;
	        let i, ilen, meta, controller, options;
	        if (!arcs) {
	            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){
	                if (chart.isDatasetVisible(i)) {
	                    meta = chart.getDatasetMeta(i);
	                    arcs = meta.data;
	                    controller = meta.controller;
	                    break;
	                }
	            }
	        }
	        if (!arcs) {
	            return 0;
	        }
	        for(i = 0, ilen = arcs.length; i < ilen; ++i){
	            options = controller.resolveDataElementOptions(i);
	            if (options.borderAlign !== 'inner') {
	                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);
	            }
	        }
	        return max;
	    }
	    getMaxOffset(arcs) {
	        let max = 0;
	        for(let i = 0, ilen = arcs.length; i < ilen; ++i){
	            const options = this.resolveDataElementOptions(i);
	            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);
	        }
	        return max;
	    }
	 _getRingWeightOffset(datasetIndex) {
	        let ringWeightOffset = 0;
	        for(let i = 0; i < datasetIndex; ++i){
	            if (this.chart.isDatasetVisible(i)) {
	                ringWeightOffset += this._getRingWeight(i);
	            }
	        }
	        return ringWeightOffset;
	    }
	 _getRingWeight(datasetIndex) {
	        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);
	    }
	 _getVisibleDatasetWeightTotal() {
	        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
	    }
	}

	class ScatterController extends DatasetController {
	    static id = 'scatter';
	 static defaults = {
	        datasetElementType: false,
	        dataElementType: 'point',
	        showLine: false,
	        fill: false
	    };
	 static overrides = {
	        interaction: {
	            mode: 'point'
	        },
	        scales: {
	            x: {
	                type: 'linear'
	            },
	            y: {
	                type: 'linear'
	            }
	        }
	    };
	 getLabelAndValue(index) {
	        const meta = this._cachedMeta;
	        const labels = this.chart.data.labels || [];
	        const { xScale , yScale  } = meta;
	        const parsed = this.getParsed(index);
	        const x = xScale.getLabelForValue(parsed.x);
	        const y = yScale.getLabelForValue(parsed.y);
	        return {
	            label: labels[index] || '',
	            value: '(' + x + ', ' + y + ')'
	        };
	    }
	    update(mode) {
	        const meta = this._cachedMeta;
	        const { data: points = []  } = meta;
	        const animationsDisabled = this.chart._animationsDisabled;
	        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);
	        this._drawStart = start;
	        this._drawCount = count;
	        if (_scaleRangesChanged(meta)) {
	            start = 0;
	            count = points.length;
	        }
	        if (this.options.showLine) {
	            if (!this.datasetElementType) {
	                this.addElements();
	            }
	            const { dataset: line , _dataset  } = meta;
	            line._chart = this.chart;
	            line._datasetIndex = this.index;
	            line._decimated = !!_dataset._decimated;
	            line.points = points;
	            const options = this.resolveDatasetElementOptions(mode);
	            options.segment = this.options.segment;
	            this.updateElement(line, undefined, {
	                animated: !animationsDisabled,
	                options
	            }, mode);
	        } else if (this.datasetElementType) {
	            delete meta.dataset;
	            this.datasetElementType = false;
	        }
	        this.updateElements(points, start, count, mode);
	    }
	    addElements() {
	        const { showLine  } = this.options;
	        if (!this.datasetElementType && showLine) {
	            this.datasetElementType = this.chart.registry.getElement('line');
	        }
	        super.addElements();
	    }
	    updateElements(points, start, count, mode) {
	        const reset = mode === 'reset';
	        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;
	        const firstOpts = this.resolveDataElementOptions(start, mode);
	        const sharedOptions = this.getSharedOptions(firstOpts);
	        const includeOptions = this.includeOptions(mode, sharedOptions);
	        const iAxis = iScale.axis;
	        const vAxis = vScale.axis;
	        const { spanGaps , segment  } = this.options;
	        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
	        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';
	        let prevParsed = start > 0 && this.getParsed(start - 1);
	        for(let i = start; i < start + count; ++i){
	            const point = points[i];
	            const parsed = this.getParsed(i);
	            const properties = directUpdate ? point : {};
	            const nullData = isNullOrUndef(parsed[vAxis]);
	            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
	            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
	            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
	            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
	            if (segment) {
	                properties.parsed = parsed;
	                properties.raw = _dataset.data[i];
	            }
	            if (includeOptions) {
	                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);
	            }
	            if (!directUpdate) {
	                this.updateElement(point, i, properties, mode);
	            }
	            prevParsed = parsed;
	        }
	        this.updateSharedOptions(sharedOptions, mode, firstOpts);
	    }
	 getMaxOverflow() {
	        const meta = this._cachedMeta;
	        const data = meta.data || [];
	        if (!this.options.showLine) {
	            let max = 0;
	            for(let i = data.length - 1; i >= 0; --i){
	                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);
	            }
	            return max > 0 && max;
	        }
	        const dataset = meta.dataset;
	        const border = dataset.options && dataset.options.borderWidth || 0;
	        if (!data.length) {
	            return border;
	        }
	        const firstPoint = data[0].size(this.resolveDataElementOptions(0));
	        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
	        return Math.max(border, firstPoint, lastPoint) / 2;
	    }
	}

	/**
	 * @namespace Chart._adapters
	 * @since 2.8.0
	 * @private
	 */ function abstract() {
	    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');
	}
	/**
	 * Date adapter (current used by the time scale)
	 * @namespace Chart._adapters._date
	 * @memberof Chart._adapters
	 * @private
	 */ class DateAdapterBase {
	    /**
	   * Override default date adapter methods.
	   * Accepts type parameter to define options type.
	   * @example
	   * Chart._adapters._date.override<{myAdapterOption: string}>({
	   *   init() {
	   *     console.log(this.options.myAdapterOption);
	   *   }
	   * })
	   */ static override(members) {
	        Object.assign(DateAdapterBase.prototype, members);
	    }
	    options;
	    constructor(options){
	        this.options = options || {};
	    }
	    // eslint-disable-next-line @typescript-eslint/no-empty-function
	    init() {}
	    formats() {
	        return abstract();
	    }
	    parse() {
	        return abstract();
	    }
	    format() {
	        return abstract();
	    }
	    add() {
	        return abstract();
	    }
	    diff() {
	        return abstract();
	    }
	    startOf() {
	        return abstract();
	    }
	    endOf() {
	        return abstract();
	    }
	}
	var adapters = {
	    _date: DateAdapterBase
	};

	function binarySearch(metaset, axis, value, intersect) {
	    const { controller , data , _sorted  } = metaset;
	    const iScale = controller._cachedMeta.iScale;
	    const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;
	    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {
	        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;
	        if (!intersect) {
	            const result = lookupMethod(data, axis, value);
	            if (spanGaps) {
	                const { vScale  } = controller._cachedMeta;
	                const { _parsed  } = metaset;
	                const distanceToDefinedLo = _parsed.slice(0, result.lo + 1).reverse().findIndex((point)=>!isNullOrUndef(point[vScale.axis]));
	                result.lo -= Math.max(0, distanceToDefinedLo);
	                const distanceToDefinedHi = _parsed.slice(result.hi).findIndex((point)=>!isNullOrUndef(point[vScale.axis]));
	                result.hi += Math.max(0, distanceToDefinedHi);
	            }
	            return result;
	        } else if (controller._sharedOptions) {
	            const el = data[0];
	            const range = typeof el.getRange === 'function' && el.getRange(axis);
	            if (range) {
	                const start = lookupMethod(data, axis, value - range);
	                const end = lookupMethod(data, axis, value + range);
	                return {
	                    lo: start.lo,
	                    hi: end.hi
	                };
	            }
	        }
	    }
	    return {
	        lo: 0,
	        hi: data.length - 1
	    };
	}
	 function evaluateInteractionItems(chart, axis, position, handler, intersect) {
	    const metasets = chart.getSortedVisibleDatasetMetas();
	    const value = position[axis];
	    for(let i = 0, ilen = metasets.length; i < ilen; ++i){
	        const { index , data  } = metasets[i];
	        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);
	        for(let j = lo; j <= hi; ++j){
	            const element = data[j];
	            if (!element.skip) {
	                handler(element, index, j);
	            }
	        }
	    }
	}
	 function getDistanceMetricForAxis(axis) {
	    const useX = axis.indexOf('x') !== -1;
	    const useY = axis.indexOf('y') !== -1;
	    return function(pt1, pt2) {
	        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
	        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
	        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
	    };
	}
	 function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {
	    const items = [];
	    if (!includeInvisible && !chart.isPointInArea(position)) {
	        return items;
	    }
	    const evaluationFunc = function(element, datasetIndex, index) {
	        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {
	            return;
	        }
	        if (element.inRange(position.x, position.y, useFinalPosition)) {
	            items.push({
	                element,
	                datasetIndex,
	                index
	            });
	        }
	    };
	    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);
	    return items;
	}
	 function getNearestRadialItems(chart, position, axis, useFinalPosition) {
	    let items = [];
	    function evaluationFunc(element, datasetIndex, index) {
	        const { startAngle , endAngle  } = element.getProps([
	            'startAngle',
	            'endAngle'
	        ], useFinalPosition);
	        const { angle  } = getAngleFromPoint(element, {
	            x: position.x,
	            y: position.y
	        });
	        if (_angleBetween(angle, startAngle, endAngle)) {
	            items.push({
	                element,
	                datasetIndex,
	                index
	            });
	        }
	    }
	    evaluateInteractionItems(chart, axis, position, evaluationFunc);
	    return items;
	}
	 function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
	    let items = [];
	    const distanceMetric = getDistanceMetricForAxis(axis);
	    let minDistance = Number.POSITIVE_INFINITY;
	    function evaluationFunc(element, datasetIndex, index) {
	        const inRange = element.inRange(position.x, position.y, useFinalPosition);
	        if (intersect && !inRange) {
	            return;
	        }
	        const center = element.getCenterPoint(useFinalPosition);
	        const pointInArea = !!includeInvisible || chart.isPointInArea(center);
	        if (!pointInArea && !inRange) {
	            return;
	        }
	        const distance = distanceMetric(position, center);
	        if (distance < minDistance) {
	            items = [
	                {
	                    element,
	                    datasetIndex,
	                    index
	                }
	            ];
	            minDistance = distance;
	        } else if (distance === minDistance) {
	            items.push({
	                element,
	                datasetIndex,
	                index
	            });
	        }
	    }
	    evaluateInteractionItems(chart, axis, position, evaluationFunc);
	    return items;
	}
	 function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
	    if (!includeInvisible && !chart.isPointInArea(position)) {
	        return [];
	    }
	    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);
	}
	 function getAxisItems(chart, position, axis, intersect, useFinalPosition) {
	    const items = [];
	    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';
	    let intersectsItem = false;
	    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{
	        if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {
	            items.push({
	                element,
	                datasetIndex,
	                index
	            });
	            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);
	        }
	    });
	    if (intersect && !intersectsItem) {
	        return [];
	    }
	    return items;
	}
	 var Interaction = {
	    modes: {
	 index (chart, e, options, useFinalPosition) {
	            const position = getRelativePosition$1(e, chart);
	            const axis = options.axis || 'x';
	            const includeInvisible = options.includeInvisible || false;
	            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
	            const elements = [];
	            if (!items.length) {
	                return [];
	            }
	            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{
	                const index = items[0].index;
	                const element = meta.data[index];
	                if (element && !element.skip) {
	                    elements.push({
	                        element,
	                        datasetIndex: meta.index,
	                        index
	                    });
	                }
	            });
	            return elements;
	        },
	 dataset (chart, e, options, useFinalPosition) {
	            const position = getRelativePosition$1(e, chart);
	            const axis = options.axis || 'xy';
	            const includeInvisible = options.includeInvisible || false;
	            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
	            if (items.length > 0) {
	                const datasetIndex = items[0].datasetIndex;
	                const data = chart.getDatasetMeta(datasetIndex).data;
	                items = [];
	                for(let i = 0; i < data.length; ++i){
	                    items.push({
	                        element: data[i],
	                        datasetIndex,
	                        index: i
	                    });
	                }
	            }
	            return items;
	        },
	 point (chart, e, options, useFinalPosition) {
	            const position = getRelativePosition$1(e, chart);
	            const axis = options.axis || 'xy';
	            const includeInvisible = options.includeInvisible || false;
	            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);
	        },
	 nearest (chart, e, options, useFinalPosition) {
	            const position = getRelativePosition$1(e, chart);
	            const axis = options.axis || 'xy';
	            const includeInvisible = options.includeInvisible || false;
	            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);
	        },
	 x (chart, e, options, useFinalPosition) {
	            const position = getRelativePosition$1(e, chart);
	            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);
	        },
	 y (chart, e, options, useFinalPosition) {
	            const position = getRelativePosition$1(e, chart);
	            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);
	        }
	    }
	};

	const STATIC_POSITIONS = [
	    'left',
	    'top',
	    'right',
	    'bottom'
	];
	function filterByPosition(array, position) {
	    return array.filter((v)=>v.pos === position);
	}
	function filterDynamicPositionByAxis(array, axis) {
	    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);
	}
	function sortByWeight(array, reverse) {
	    return array.sort((a, b)=>{
	        const v0 = reverse ? b : a;
	        const v1 = reverse ? a : b;
	        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
	    });
	}
	function wrapBoxes(boxes) {
	    const layoutBoxes = [];
	    let i, ilen, box, pos, stack, stackWeight;
	    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){
	        box = boxes[i];
	        ({ position: pos , options: { stack , stackWeight =1  }  } = box);
	        layoutBoxes.push({
	            index: i,
	            box,
	            pos,
	            horizontal: box.isHorizontal(),
	            weight: box.weight,
	            stack: stack && pos + stack,
	            stackWeight
	        });
	    }
	    return layoutBoxes;
	}
	function buildStacks(layouts) {
	    const stacks = {};
	    for (const wrap of layouts){
	        const { stack , pos , stackWeight  } = wrap;
	        if (!stack || !STATIC_POSITIONS.includes(pos)) {
	            continue;
	        }
	        const _stack = stacks[stack] || (stacks[stack] = {
	            count: 0,
	            placed: 0,
	            weight: 0,
	            size: 0
	        });
	        _stack.count++;
	        _stack.weight += stackWeight;
	    }
	    return stacks;
	}
	 function setLayoutDims(layouts, params) {
	    const stacks = buildStacks(layouts);
	    const { vBoxMaxWidth , hBoxMaxHeight  } = params;
	    let i, ilen, layout;
	    for(i = 0, ilen = layouts.length; i < ilen; ++i){
	        layout = layouts[i];
	        const { fullSize  } = layout.box;
	        const stack = stacks[layout.stack];
	        const factor = stack && layout.stackWeight / stack.weight;
	        if (layout.horizontal) {
	            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
	            layout.height = hBoxMaxHeight;
	        } else {
	            layout.width = vBoxMaxWidth;
	            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
	        }
	    }
	    return stacks;
	}
	function buildLayoutBoxes(boxes) {
	    const layoutBoxes = wrapBoxes(boxes);
	    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);
	    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);
	    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));
	    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);
	    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));
	    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');
	    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');
	    return {
	        fullSize,
	        leftAndTop: left.concat(top),
	        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
	        chartArea: filterByPosition(layoutBoxes, 'chartArea'),
	        vertical: left.concat(right).concat(centerVertical),
	        horizontal: top.concat(bottom).concat(centerHorizontal)
	    };
	}
	function getCombinedMax(maxPadding, chartArea, a, b) {
	    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
	}
	function updateMaxPadding(maxPadding, boxPadding) {
	    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
	    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
	    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
	    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
	}
	function updateDims(chartArea, params, layout, stacks) {
	    const { pos , box  } = layout;
	    const maxPadding = chartArea.maxPadding;
	    if (!isObject(pos)) {
	        if (layout.size) {
	            chartArea[pos] -= layout.size;
	        }
	        const stack = stacks[layout.stack] || {
	            size: 0,
	            count: 1
	        };
	        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);
	        layout.size = stack.size / stack.count;
	        chartArea[pos] += layout.size;
	    }
	    if (box.getPadding) {
	        updateMaxPadding(maxPadding, box.getPadding());
	    }
	    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));
	    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));
	    const widthChanged = newWidth !== chartArea.w;
	    const heightChanged = newHeight !== chartArea.h;
	    chartArea.w = newWidth;
	    chartArea.h = newHeight;
	    return layout.horizontal ? {
	        same: widthChanged,
	        other: heightChanged
	    } : {
	        same: heightChanged,
	        other: widthChanged
	    };
	}
	function handleMaxPadding(chartArea) {
	    const maxPadding = chartArea.maxPadding;
	    function updatePos(pos) {
	        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);
	        chartArea[pos] += change;
	        return change;
	    }
	    chartArea.y += updatePos('top');
	    chartArea.x += updatePos('left');
	    updatePos('right');
	    updatePos('bottom');
	}
	function getMargins(horizontal, chartArea) {
	    const maxPadding = chartArea.maxPadding;
	    function marginForPositions(positions) {
	        const margin = {
	            left: 0,
	            top: 0,
	            right: 0,
	            bottom: 0
	        };
	        positions.forEach((pos)=>{
	            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
	        });
	        return margin;
	    }
	    return horizontal ? marginForPositions([
	        'left',
	        'right'
	    ]) : marginForPositions([
	        'top',
	        'bottom'
	    ]);
	}
	function fitBoxes(boxes, chartArea, params, stacks) {
	    const refitBoxes = [];
	    let i, ilen, layout, box, refit, changed;
	    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){
	        layout = boxes[i];
	        box = layout.box;
	        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));
	        const { same , other  } = updateDims(chartArea, params, layout, stacks);
	        refit |= same && refitBoxes.length;
	        changed = changed || other;
	        if (!box.fullSize) {
	            refitBoxes.push(layout);
	        }
	    }
	    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
	}
	function setBoxDims(box, left, top, width, height) {
	    box.top = top;
	    box.left = left;
	    box.right = left + width;
	    box.bottom = top + height;
	    box.width = width;
	    box.height = height;
	}
	function placeBoxes(boxes, chartArea, params, stacks) {
	    const userPadding = params.padding;
	    let { x , y  } = chartArea;
	    for (const layout of boxes){
	        const box = layout.box;
	        const stack = stacks[layout.stack] || {
	            placed: 0,
	            weight: 1
	        };
	        const weight = layout.stackWeight / stack.weight || 1;
	        if (layout.horizontal) {
	            const width = chartArea.w * weight;
	            const height = stack.size || box.height;
	            if (defined(stack.start)) {
	                y = stack.start;
	            }
	            if (box.fullSize) {
	                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);
	            } else {
	                setBoxDims(box, chartArea.left + stack.placed, y, width, height);
	            }
	            stack.start = y;
	            stack.placed += width;
	            y = box.bottom;
	        } else {
	            const height = chartArea.h * weight;
	            const width = stack.size || box.width;
	            if (defined(stack.start)) {
	                x = stack.start;
	            }
	            if (box.fullSize) {
	                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);
	            } else {
	                setBoxDims(box, x, chartArea.top + stack.placed, width, height);
	            }
	            stack.start = x;
	            stack.placed += height;
	            x = box.right;
	        }
	    }
	    chartArea.x = x;
	    chartArea.y = y;
	}
	var layouts = {
	 addBox (chart, item) {
	        if (!chart.boxes) {
	            chart.boxes = [];
	        }
	        item.fullSize = item.fullSize || false;
	        item.position = item.position || 'top';
	        item.weight = item.weight || 0;
	        item._layers = item._layers || function() {
	            return [
	                {
	                    z: 0,
	                    draw (chartArea) {
	                        item.draw(chartArea);
	                    }
	                }
	            ];
	        };
	        chart.boxes.push(item);
	    },
	 removeBox (chart, layoutItem) {
	        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
	        if (index !== -1) {
	            chart.boxes.splice(index, 1);
	        }
	    },
	 configure (chart, item, options) {
	        item.fullSize = options.fullSize;
	        item.position = options.position;
	        item.weight = options.weight;
	    },
	 update (chart, width, height, minPadding) {
	        if (!chart) {
	            return;
	        }
	        const padding = toPadding(chart.options.layout.padding);
	        const availableWidth = Math.max(width - padding.width, 0);
	        const availableHeight = Math.max(height - padding.height, 0);
	        const boxes = buildLayoutBoxes(chart.boxes);
	        const verticalBoxes = boxes.vertical;
	        const horizontalBoxes = boxes.horizontal;
	        each(chart.boxes, (box)=>{
	            if (typeof box.beforeLayout === 'function') {
	                box.beforeLayout();
	            }
	        });
	        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;
	        const params = Object.freeze({
	            outerWidth: width,
	            outerHeight: height,
	            padding,
	            availableWidth,
	            availableHeight,
	            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
	            hBoxMaxHeight: availableHeight / 2
	        });
	        const maxPadding = Object.assign({}, padding);
	        updateMaxPadding(maxPadding, toPadding(minPadding));
	        const chartArea = Object.assign({
	            maxPadding,
	            w: availableWidth,
	            h: availableHeight,
	            x: padding.left,
	            y: padding.top
	        }, padding);
	        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
	        fitBoxes(boxes.fullSize, chartArea, params, stacks);
	        fitBoxes(verticalBoxes, chartArea, params, stacks);
	        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {
	            fitBoxes(verticalBoxes, chartArea, params, stacks);
	        }
	        handleMaxPadding(chartArea);
	        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
	        chartArea.x += chartArea.w;
	        chartArea.y += chartArea.h;
	        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
	        chart.chartArea = {
	            left: chartArea.left,
	            top: chartArea.top,
	            right: chartArea.left + chartArea.w,
	            bottom: chartArea.top + chartArea.h,
	            height: chartArea.h,
	            width: chartArea.w
	        };
	        each(boxes.chartArea, (layout)=>{
	            const box = layout.box;
	            Object.assign(box, chart.chartArea);
	            box.update(chartArea.w, chartArea.h, {
	                left: 0,
	                top: 0,
	                right: 0,
	                bottom: 0
	            });
	        });
	    }
	};

	class BasePlatform {
	 acquireContext(canvas, aspectRatio) {}
	 releaseContext(context) {
	        return false;
	    }
	 addEventListener(chart, type, listener) {}
	 removeEventListener(chart, type, listener) {}
	 getDevicePixelRatio() {
	        return 1;
	    }
	 getMaximumSize(element, width, height, aspectRatio) {
	        width = Math.max(0, width || element.width);
	        height = height || element.height;
	        return {
	            width,
	            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)
	        };
	    }
	 isAttached(canvas) {
	        return true;
	    }
	 updateConfig(config) {
	    }
	}

	class BasicPlatform extends BasePlatform {
	    acquireContext(item) {
	        return item && item.getContext && item.getContext('2d') || null;
	    }
	    updateConfig(config) {
	        config.options.animation = false;
	    }
	}

	const EXPANDO_KEY$1 = '$chartjs';
	 const EVENT_TYPES = {
	    touchstart: 'mousedown',
	    touchmove: 'mousemove',
	    touchend: 'mouseup',
	    pointerenter: 'mouseenter',
	    pointerdown: 'mousedown',
	    pointermove: 'mousemove',
	    pointerup: 'mouseup',
	    pointerleave: 'mouseout',
	    pointerout: 'mouseout'
	};
	const isNullOrEmpty = (value)=>value === null || value === '';
	 function initCanvas(canvas, aspectRatio) {
	    const style = canvas.style;
	    const renderHeight = canvas.getAttribute('height');
	    const renderWidth = canvas.getAttribute('width');
	    canvas[EXPANDO_KEY$1] = {
	        initial: {
	            height: renderHeight,
	            width: renderWidth,
	            style: {
	                display: style.display,
	                height: style.height,
	                width: style.width
	            }
	        }
	    };
	    style.display = style.display || 'block';
	    style.boxSizing = style.boxSizing || 'border-box';
	    if (isNullOrEmpty(renderWidth)) {
	        const displayWidth = readUsedSize(canvas, 'width');
	        if (displayWidth !== undefined) {
	            canvas.width = displayWidth;
	        }
	    }
	    if (isNullOrEmpty(renderHeight)) {
	        if (canvas.style.height === '') {
	            canvas.height = canvas.width / (aspectRatio || 2);
	        } else {
	            const displayHeight = readUsedSize(canvas, 'height');
	            if (displayHeight !== undefined) {
	                canvas.height = displayHeight;
	            }
	        }
	    }
	    return canvas;
	}
	const eventListenerOptions = supportsEventListenerOptions ? {
	    passive: true
	} : false;
	function addListener(node, type, listener) {
	    if (node) {
	        node.addEventListener(type, listener, eventListenerOptions);
	    }
	}
	function removeListener(chart, type, listener) {
	    if (chart && chart.canvas) {
	        chart.canvas.removeEventListener(type, listener, eventListenerOptions);
	    }
	}
	function fromNativeEvent(event, chart) {
	    const type = EVENT_TYPES[event.type] || event.type;
	    const { x , y  } = getRelativePosition$1(event, chart);
	    return {
	        type,
	        chart,
	        native: event,
	        x: x !== undefined ? x : null,
	        y: y !== undefined ? y : null
	    };
	}
	function nodeListContains(nodeList, canvas) {
	    for (const node of nodeList){
	        if (node === canvas || node.contains(canvas)) {
	            return true;
	        }
	    }
	}
	function createAttachObserver(chart, type, listener) {
	    const canvas = chart.canvas;
	    const observer = new MutationObserver((entries)=>{
	        let trigger = false;
	        for (const entry of entries){
	            trigger = trigger || nodeListContains(entry.addedNodes, canvas);
	            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);
	        }
	        if (trigger) {
	            listener();
	        }
	    });
	    observer.observe(document, {
	        childList: true,
	        subtree: true
	    });
	    return observer;
	}
	function createDetachObserver(chart, type, listener) {
	    const canvas = chart.canvas;
	    const observer = new MutationObserver((entries)=>{
	        let trigger = false;
	        for (const entry of entries){
	            trigger = trigger || nodeListContains(entry.removedNodes, canvas);
	            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);
	        }
	        if (trigger) {
	            listener();
	        }
	    });
	    observer.observe(document, {
	        childList: true,
	        subtree: true
	    });
	    return observer;
	}
	const drpListeningCharts = new Map();
	let oldDevicePixelRatio = 0;
	function onWindowResize() {
	    const dpr = window.devicePixelRatio;
	    if (dpr === oldDevicePixelRatio) {
	        return;
	    }
	    oldDevicePixelRatio = dpr;
	    drpListeningCharts.forEach((resize, chart)=>{
	        if (chart.currentDevicePixelRatio !== dpr) {
	            resize();
	        }
	    });
	}
	function listenDevicePixelRatioChanges(chart, resize) {
	    if (!drpListeningCharts.size) {
	        window.addEventListener('resize', onWindowResize);
	    }
	    drpListeningCharts.set(chart, resize);
	}
	function unlistenDevicePixelRatioChanges(chart) {
	    drpListeningCharts.delete(chart);
	    if (!drpListeningCharts.size) {
	        window.removeEventListener('resize', onWindowResize);
	    }
	}
	function createResizeObserver(chart, type, listener) {
	    const canvas = chart.canvas;
	    const container = canvas && _getParentNode(canvas);
	    if (!container) {
	        return;
	    }
	    const resize = throttled((width, height)=>{
	        const w = container.clientWidth;
	        listener(width, height);
	        if (w < container.clientWidth) {
	            listener();
	        }
	    }, window);
	    const observer = new ResizeObserver((entries)=>{
	        const entry = entries[0];
	        const width = entry.contentRect.width;
	        const height = entry.contentRect.height;
	        if (width === 0 && height === 0) {
	            return;
	        }
	        resize(width, height);
	    });
	    observer.observe(container);
	    listenDevicePixelRatioChanges(chart, resize);
	    return observer;
	}
	function releaseObserver(chart, type, observer) {
	    if (observer) {
	        observer.disconnect();
	    }
	    if (type === 'resize') {
	        unlistenDevicePixelRatioChanges(chart);
	    }
	}
	function createProxyAndListen(chart, type, listener) {
	    const canvas = chart.canvas;
	    const proxy = throttled((event)=>{
	        if (chart.ctx !== null) {
	            listener(fromNativeEvent(event, chart));
	        }
	    }, chart);
	    addListener(canvas, type, proxy);
	    return proxy;
	}
	 class DomPlatform extends BasePlatform {
	 acquireContext(canvas, aspectRatio) {
	        const context = canvas && canvas.getContext && canvas.getContext('2d');
	        if (context && context.canvas === canvas) {
	            initCanvas(canvas, aspectRatio);
	            return context;
	        }
	        return null;
	    }
	 releaseContext(context) {
	        const canvas = context.canvas;
	        if (!canvas[EXPANDO_KEY$1]) {
	            return false;
	        }
	        const initial = canvas[EXPANDO_KEY$1].initial;
	        [
	            'height',
	            'width'
	        ].forEach((prop)=>{
	            const value = initial[prop];
	            if (isNullOrUndef(value)) {
	                canvas.removeAttribute(prop);
	            } else {
	                canvas.setAttribute(prop, value);
	            }
	        });
	        const style = initial.style || {};
	        Object.keys(style).forEach((key)=>{
	            canvas.style[key] = style[key];
	        });
	        canvas.width = canvas.width;
	        delete canvas[EXPANDO_KEY$1];
	        return true;
	    }
	 addEventListener(chart, type, listener) {
	        this.removeEventListener(chart, type);
	        const proxies = chart.$proxies || (chart.$proxies = {});
	        const handlers = {
	            attach: createAttachObserver,
	            detach: createDetachObserver,
	            resize: createResizeObserver
	        };
	        const handler = handlers[type] || createProxyAndListen;
	        proxies[type] = handler(chart, type, listener);
	    }
	 removeEventListener(chart, type) {
	        const proxies = chart.$proxies || (chart.$proxies = {});
	        const proxy = proxies[type];
	        if (!proxy) {
	            return;
	        }
	        const handlers = {
	            attach: releaseObserver,
	            detach: releaseObserver,
	            resize: releaseObserver
	        };
	        const handler = handlers[type] || removeListener;
	        handler(chart, type, proxy);
	        proxies[type] = undefined;
	    }
	    getDevicePixelRatio() {
	        return window.devicePixelRatio;
	    }
	 getMaximumSize(canvas, width, height, aspectRatio) {
	        return getMaximumSize(canvas, width, height, aspectRatio);
	    }
	 isAttached(canvas) {
	        const container = canvas && _getParentNode(canvas);
	        return !!(container && container.isConnected);
	    }
	}

	function _detectPlatform(canvas) {
	    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {
	        return BasicPlatform;
	    }
	    return DomPlatform;
	}

	let Element$1 = class Element {
	    static defaults = {};
	    static defaultRoutes = undefined;
	    x;
	    y;
	    active = false;
	    options;
	    $animations;
	    tooltipPosition(useFinalPosition) {
	        const { x , y  } = this.getProps([
	            'x',
	            'y'
	        ], useFinalPosition);
	        return {
	            x,
	            y
	        };
	    }
	    hasValue() {
	        return isNumber(this.x) && isNumber(this.y);
	    }
	    getProps(props, final) {
	        const anims = this.$animations;
	        if (!final || !anims) {
	            // let's not create an object, if not needed
	            return this;
	        }
	        const ret = {};
	        props.forEach((prop)=>{
	            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];
	        });
	        return ret;
	    }
	};

	function autoSkip(scale, ticks) {
	    const tickOpts = scale.options.ticks;
	    const determinedMaxTicks = determineMaxTicks(scale);
	    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);
	    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
	    const numMajorIndices = majorIndices.length;
	    const first = majorIndices[0];
	    const last = majorIndices[numMajorIndices - 1];
	    const newTicks = [];
	    if (numMajorIndices > ticksLimit) {
	        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
	        return newTicks;
	    }
	    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);
	    if (numMajorIndices > 0) {
	        let i, ilen;
	        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
	        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
	        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){
	            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);
	        }
	        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
	        return newTicks;
	    }
	    skip(ticks, newTicks, spacing);
	    return newTicks;
	}
	function determineMaxTicks(scale) {
	    const offset = scale.options.offset;
	    const tickLength = scale._tickSize();
	    const maxScale = scale._length / tickLength + (offset ? 0 : 1);
	    const maxChart = scale._maxLength / tickLength;
	    return Math.floor(Math.min(maxScale, maxChart));
	}
	 function calculateSpacing(majorIndices, ticks, ticksLimit) {
	    const evenMajorSpacing = getEvenSpacing(majorIndices);
	    const spacing = ticks.length / ticksLimit;
	    if (!evenMajorSpacing) {
	        return Math.max(spacing, 1);
	    }
	    const factors = _factorize(evenMajorSpacing);
	    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){
	        const factor = factors[i];
	        if (factor > spacing) {
	            return factor;
	        }
	    }
	    return Math.max(spacing, 1);
	}
	 function getMajorIndices(ticks) {
	    const result = [];
	    let i, ilen;
	    for(i = 0, ilen = ticks.length; i < ilen; i++){
	        if (ticks[i].major) {
	            result.push(i);
	        }
	    }
	    return result;
	}
	 function skipMajors(ticks, newTicks, majorIndices, spacing) {
	    let count = 0;
	    let next = majorIndices[0];
	    let i;
	    spacing = Math.ceil(spacing);
	    for(i = 0; i < ticks.length; i++){
	        if (i === next) {
	            newTicks.push(ticks[i]);
	            count++;
	            next = majorIndices[count * spacing];
	        }
	    }
	}
	 function skip(ticks, newTicks, spacing, majorStart, majorEnd) {
	    const start = valueOrDefault(majorStart, 0);
	    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);
	    let count = 0;
	    let length, i, next;
	    spacing = Math.ceil(spacing);
	    if (majorEnd) {
	        length = majorEnd - majorStart;
	        spacing = length / Math.floor(length / spacing);
	    }
	    next = start;
	    while(next < 0){
	        count++;
	        next = Math.round(start + count * spacing);
	    }
	    for(i = Math.max(start, 0); i < end; i++){
	        if (i === next) {
	            newTicks.push(ticks[i]);
	            count++;
	            next = Math.round(start + count * spacing);
	        }
	    }
	}
	 function getEvenSpacing(arr) {
	    const len = arr.length;
	    let i, diff;
	    if (len < 2) {
	        return false;
	    }
	    for(diff = arr[0], i = 1; i < len; ++i){
	        if (arr[i] - arr[i - 1] !== diff) {
	            return false;
	        }
	    }
	    return diff;
	}

	const reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;
	const offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;
	const getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);
	 function sample(arr, numItems) {
	    const result = [];
	    const increment = arr.length / numItems;
	    const len = arr.length;
	    let i = 0;
	    for(; i < len; i += increment){
	        result.push(arr[Math.floor(i)]);
	    }
	    return result;
	}
	 function getPixelForGridLine(scale, index, offsetGridLines) {
	    const length = scale.ticks.length;
	    const validIndex = Math.min(index, length - 1);
	    const start = scale._startPixel;
	    const end = scale._endPixel;
	    const epsilon = 1e-6;
	    let lineValue = scale.getPixelForTick(validIndex);
	    let offset;
	    if (offsetGridLines) {
	        if (length === 1) {
	            offset = Math.max(lineValue - start, end - lineValue);
	        } else if (index === 0) {
	            offset = (scale.getPixelForTick(1) - lineValue) / 2;
	        } else {
	            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
	        }
	        lineValue += validIndex < index ? offset : -offset;
	        if (lineValue < start - epsilon || lineValue > end + epsilon) {
	            return;
	        }
	    }
	    return lineValue;
	}
	 function garbageCollect(caches, length) {
	    each(caches, (cache)=>{
	        const gc = cache.gc;
	        const gcLen = gc.length / 2;
	        let i;
	        if (gcLen > length) {
	            for(i = 0; i < gcLen; ++i){
	                delete cache.data[gc[i]];
	            }
	            gc.splice(0, gcLen);
	        }
	    });
	}
	 function getTickMarkLength(options) {
	    return options.drawTicks ? options.tickLength : 0;
	}
	 function getTitleHeight(options, fallback) {
	    if (!options.display) {
	        return 0;
	    }
	    const font = toFont(options.font, fallback);
	    const padding = toPadding(options.padding);
	    const lines = isArray(options.text) ? options.text.length : 1;
	    return lines * font.lineHeight + padding.height;
	}
	function createScaleContext(parent, scale) {
	    return createContext(parent, {
	        scale,
	        type: 'scale'
	    });
	}
	function createTickContext(parent, index, tick) {
	    return createContext(parent, {
	        tick,
	        index,
	        type: 'tick'
	    });
	}
	function titleAlign(align, position, reverse) {
	     let ret = _toLeftRightCenter(align);
	    if (reverse && position !== 'right' || !reverse && position === 'right') {
	        ret = reverseAlign(ret);
	    }
	    return ret;
	}
	function titleArgs(scale, offset, position, align) {
	    const { top , left , bottom , right , chart  } = scale;
	    const { chartArea , scales  } = chart;
	    let rotation = 0;
	    let maxWidth, titleX, titleY;
	    const height = bottom - top;
	    const width = right - left;
	    if (scale.isHorizontal()) {
	        titleX = _alignStartEnd(align, left, right);
	        if (isObject(position)) {
	            const positionAxisID = Object.keys(position)[0];
	            const value = position[positionAxisID];
	            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;
	        } else if (position === 'center') {
	            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;
	        } else {
	            titleY = offsetFromEdge(scale, position, offset);
	        }
	        maxWidth = right - left;
	    } else {
	        if (isObject(position)) {
	            const positionAxisID = Object.keys(position)[0];
	            const value = position[positionAxisID];
	            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;
	        } else if (position === 'center') {
	            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;
	        } else {
	            titleX = offsetFromEdge(scale, position, offset);
	        }
	        titleY = _alignStartEnd(align, bottom, top);
	        rotation = position === 'left' ? -HALF_PI : HALF_PI;
	    }
	    return {
	        titleX,
	        titleY,
	        maxWidth,
	        rotation
	    };
	}
	class Scale extends Element$1 {
	    constructor(cfg){
	        super();
	         this.id = cfg.id;
	         this.type = cfg.type;
	         this.options = undefined;
	         this.ctx = cfg.ctx;
	         this.chart = cfg.chart;
	         this.top = undefined;
	         this.bottom = undefined;
	         this.left = undefined;
	         this.right = undefined;
	         this.width = undefined;
	         this.height = undefined;
	        this._margins = {
	            left: 0,
	            right: 0,
	            top: 0,
	            bottom: 0
	        };
	         this.maxWidth = undefined;
	         this.maxHeight = undefined;
	         this.paddingTop = undefined;
	         this.paddingBottom = undefined;
	         this.paddingLeft = undefined;
	         this.paddingRight = undefined;
	         this.axis = undefined;
	         this.labelRotation = undefined;
	        this.min = undefined;
	        this.max = undefined;
	        this._range = undefined;
	         this.ticks = [];
	         this._gridLineItems = null;
	         this._labelItems = null;
	         this._labelSizes = null;
	        this._length = 0;
	        this._maxLength = 0;
	        this._longestTextCache = {};
	         this._startPixel = undefined;
	         this._endPixel = undefined;
	        this._reversePixels = false;
	        this._userMax = undefined;
	        this._userMin = undefined;
	        this._suggestedMax = undefined;
	        this._suggestedMin = undefined;
	        this._ticksLength = 0;
	        this._borderValue = 0;
	        this._cache = {};
	        this._dataLimitsCached = false;
	        this.$context = undefined;
	    }
	 init(options) {
	        this.options = options.setContext(this.getContext());
	        this.axis = options.axis;
	        this._userMin = this.parse(options.min);
	        this._userMax = this.parse(options.max);
	        this._suggestedMin = this.parse(options.suggestedMin);
	        this._suggestedMax = this.parse(options.suggestedMax);
	    }
	 parse(raw, index) {
	        return raw;
	    }
	 getUserBounds() {
	        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;
	        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);
	        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);
	        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);
	        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);
	        return {
	            min: finiteOrDefault(_userMin, _suggestedMin),
	            max: finiteOrDefault(_userMax, _suggestedMax),
	            minDefined: isNumberFinite(_userMin),
	            maxDefined: isNumberFinite(_userMax)
	        };
	    }
	 getMinMax(canStack) {
	        let { min , max , minDefined , maxDefined  } = this.getUserBounds();
	        let range;
	        if (minDefined && maxDefined) {
	            return {
	                min,
	                max
	            };
	        }
	        const metas = this.getMatchingVisibleMetas();
	        for(let i = 0, ilen = metas.length; i < ilen; ++i){
	            range = metas[i].controller.getMinMax(this, canStack);
	            if (!minDefined) {
	                min = Math.min(min, range.min);
	            }
	            if (!maxDefined) {
	                max = Math.max(max, range.max);
	            }
	        }
	        min = maxDefined && min > max ? max : min;
	        max = minDefined && min > max ? min : max;
	        return {
	            min: finiteOrDefault(min, finiteOrDefault(max, min)),
	            max: finiteOrDefault(max, finiteOrDefault(min, max))
	        };
	    }
	 getPadding() {
	        return {
	            left: this.paddingLeft || 0,
	            top: this.paddingTop || 0,
	            right: this.paddingRight || 0,
	            bottom: this.paddingBottom || 0
	        };
	    }
	 getTicks() {
	        return this.ticks;
	    }
	 getLabels() {
	        const data = this.chart.data;
	        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
	    }
	 getLabelItems(chartArea = this.chart.chartArea) {
	        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));
	        return items;
	    }
	    beforeLayout() {
	        this._cache = {};
	        this._dataLimitsCached = false;
	    }
	    beforeUpdate() {
	        callback(this.options.beforeUpdate, [
	            this
	        ]);
	    }
	 update(maxWidth, maxHeight, margins) {
	        const { beginAtZero , grace , ticks: tickOpts  } = this.options;
	        const sampleSize = tickOpts.sampleSize;
	        this.beforeUpdate();
	        this.maxWidth = maxWidth;
	        this.maxHeight = maxHeight;
	        this._margins = margins = Object.assign({
	            left: 0,
	            right: 0,
	            top: 0,
	            bottom: 0
	        }, margins);
	        this.ticks = null;
	        this._labelSizes = null;
	        this._gridLineItems = null;
	        this._labelItems = null;
	        this.beforeSetDimensions();
	        this.setDimensions();
	        this.afterSetDimensions();
	        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;
	        if (!this._dataLimitsCached) {
	            this.beforeDataLimits();
	            this.determineDataLimits();
	            this.afterDataLimits();
	            this._range = _addGrace(this, grace, beginAtZero);
	            this._dataLimitsCached = true;
	        }
	        this.beforeBuildTicks();
	        this.ticks = this.buildTicks() || [];
	        this.afterBuildTicks();
	        const samplingEnabled = sampleSize < this.ticks.length;
	        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);
	        this.configure();
	        this.beforeCalculateLabelRotation();
	        this.calculateLabelRotation();
	        this.afterCalculateLabelRotation();
	        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {
	            this.ticks = autoSkip(this, this.ticks);
	            this._labelSizes = null;
	            this.afterAutoSkip();
	        }
	        if (samplingEnabled) {
	            this._convertTicksToLabels(this.ticks);
	        }
	        this.beforeFit();
	        this.fit();
	        this.afterFit();
	        this.afterUpdate();
	    }
	 configure() {
	        let reversePixels = this.options.reverse;
	        let startPixel, endPixel;
	        if (this.isHorizontal()) {
	            startPixel = this.left;
	            endPixel = this.right;
	        } else {
	            startPixel = this.top;
	            endPixel = this.bottom;
	            reversePixels = !reversePixels;
	        }
	        this._startPixel = startPixel;
	        this._endPixel = endPixel;
	        this._reversePixels = reversePixels;
	        this._length = endPixel - startPixel;
	        this._alignToPixels = this.options.alignToPixels;
	    }
	    afterUpdate() {
	        callback(this.options.afterUpdate, [
	            this
	        ]);
	    }
	    beforeSetDimensions() {
	        callback(this.options.beforeSetDimensions, [
	            this
	        ]);
	    }
	    setDimensions() {
	        if (this.isHorizontal()) {
	            this.width = this.maxWidth;
	            this.left = 0;
	            this.right = this.width;
	        } else {
	            this.height = this.maxHeight;
	            this.top = 0;
	            this.bottom = this.height;
	        }
	        this.paddingLeft = 0;
	        this.paddingTop = 0;
	        this.paddingRight = 0;
	        this.paddingBottom = 0;
	    }
	    afterSetDimensions() {
	        callback(this.options.afterSetDimensions, [
	            this
	        ]);
	    }
	    _callHooks(name) {
	        this.chart.notifyPlugins(name, this.getContext());
	        callback(this.options[name], [
	            this
	        ]);
	    }
	    beforeDataLimits() {
	        this._callHooks('beforeDataLimits');
	    }
	    determineDataLimits() {}
	    afterDataLimits() {
	        this._callHooks('afterDataLimits');
	    }
	    beforeBuildTicks() {
	        this._callHooks('beforeBuildTicks');
	    }
	 buildTicks() {
	        return [];
	    }
	    afterBuildTicks() {
	        this._callHooks('afterBuildTicks');
	    }
	    beforeTickToLabelConversion() {
	        callback(this.options.beforeTickToLabelConversion, [
	            this
	        ]);
	    }
	 generateTickLabels(ticks) {
	        const tickOpts = this.options.ticks;
	        let i, ilen, tick;
	        for(i = 0, ilen = ticks.length; i < ilen; i++){
	            tick = ticks[i];
	            tick.label = callback(tickOpts.callback, [
	                tick.value,
	                i,
	                ticks
	            ], this);
	        }
	    }
	    afterTickToLabelConversion() {
	        callback(this.options.afterTickToLabelConversion, [
	            this
	        ]);
	    }
	    beforeCalculateLabelRotation() {
	        callback(this.options.beforeCalculateLabelRotation, [
	            this
	        ]);
	    }
	    calculateLabelRotation() {
	        const options = this.options;
	        const tickOpts = options.ticks;
	        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);
	        const minRotation = tickOpts.minRotation || 0;
	        const maxRotation = tickOpts.maxRotation;
	        let labelRotation = minRotation;
	        let tickWidth, maxHeight, maxLabelDiagonal;
	        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {
	            this.labelRotation = minRotation;
	            return;
	        }
	        const labelSizes = this._getLabelSizes();
	        const maxLabelWidth = labelSizes.widest.width;
	        const maxLabelHeight = labelSizes.highest.height;
	        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);
	        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);
	        if (maxLabelWidth + 6 > tickWidth) {
	            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
	            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);
	            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
	            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));
	            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
	        }
	        this.labelRotation = labelRotation;
	    }
	    afterCalculateLabelRotation() {
	        callback(this.options.afterCalculateLabelRotation, [
	            this
	        ]);
	    }
	    afterAutoSkip() {}
	    beforeFit() {
	        callback(this.options.beforeFit, [
	            this
	        ]);
	    }
	    fit() {
	        const minSize = {
	            width: 0,
	            height: 0
	        };
	        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;
	        const display = this._isVisible();
	        const isHorizontal = this.isHorizontal();
	        if (display) {
	            const titleHeight = getTitleHeight(titleOpts, chart.options.font);
	            if (isHorizontal) {
	                minSize.width = this.maxWidth;
	                minSize.height = getTickMarkLength(gridOpts) + titleHeight;
	            } else {
	                minSize.height = this.maxHeight;
	                minSize.width = getTickMarkLength(gridOpts) + titleHeight;
	            }
	            if (tickOpts.display && this.ticks.length) {
	                const { first , last , widest , highest  } = this._getLabelSizes();
	                const tickPadding = tickOpts.padding * 2;
	                const angleRadians = toRadians(this.labelRotation);
	                const cos = Math.cos(angleRadians);
	                const sin = Math.sin(angleRadians);
	                if (isHorizontal) {
	                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
	                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);
	                } else {
	                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
	                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);
	                }
	                this._calculatePadding(first, last, sin, cos);
	            }
	        }
	        this._handleMargins();
	        if (isHorizontal) {
	            this.width = this._length = chart.width - this._margins.left - this._margins.right;
	            this.height = minSize.height;
	        } else {
	            this.width = minSize.width;
	            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;
	        }
	    }
	    _calculatePadding(first, last, sin, cos) {
	        const { ticks: { align , padding  } , position  } = this.options;
	        const isRotated = this.labelRotation !== 0;
	        const labelsBelowTicks = position !== 'top' && this.axis === 'x';
	        if (this.isHorizontal()) {
	            const offsetLeft = this.getPixelForTick(0) - this.left;
	            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);
	            let paddingLeft = 0;
	            let paddingRight = 0;
	            if (isRotated) {
	                if (labelsBelowTicks) {
	                    paddingLeft = cos * first.width;
	                    paddingRight = sin * last.height;
	                } else {
	                    paddingLeft = sin * first.height;
	                    paddingRight = cos * last.width;
	                }
	            } else if (align === 'start') {
	                paddingRight = last.width;
	            } else if (align === 'end') {
	                paddingLeft = first.width;
	            } else if (align !== 'inner') {
	                paddingLeft = first.width / 2;
	                paddingRight = last.width / 2;
	            }
	            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);
	            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);
	        } else {
	            let paddingTop = last.height / 2;
	            let paddingBottom = first.height / 2;
	            if (align === 'start') {
	                paddingTop = 0;
	                paddingBottom = first.height;
	            } else if (align === 'end') {
	                paddingTop = last.height;
	                paddingBottom = 0;
	            }
	            this.paddingTop = paddingTop + padding;
	            this.paddingBottom = paddingBottom + padding;
	        }
	    }
	 _handleMargins() {
	        if (this._margins) {
	            this._margins.left = Math.max(this.paddingLeft, this._margins.left);
	            this._margins.top = Math.max(this.paddingTop, this._margins.top);
	            this._margins.right = Math.max(this.paddingRight, this._margins.right);
	            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);
	        }
	    }
	    afterFit() {
	        callback(this.options.afterFit, [
	            this
	        ]);
	    }
	 isHorizontal() {
	        const { axis , position  } = this.options;
	        return position === 'top' || position === 'bottom' || axis === 'x';
	    }
	 isFullSize() {
	        return this.options.fullSize;
	    }
	 _convertTicksToLabels(ticks) {
	        this.beforeTickToLabelConversion();
	        this.generateTickLabels(ticks);
	        let i, ilen;
	        for(i = 0, ilen = ticks.length; i < ilen; i++){
	            if (isNullOrUndef(ticks[i].label)) {
	                ticks.splice(i, 1);
	                ilen--;
	                i--;
	            }
	        }
	        this.afterTickToLabelConversion();
	    }
	 _getLabelSizes() {
	        let labelSizes = this._labelSizes;
	        if (!labelSizes) {
	            const sampleSize = this.options.ticks.sampleSize;
	            let ticks = this.ticks;
	            if (sampleSize < ticks.length) {
	                ticks = sample(ticks, sampleSize);
	            }
	            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);
	        }
	        return labelSizes;
	    }
	 _computeLabelSizes(ticks, length, maxTicksLimit) {
	        const { ctx , _longestTextCache: caches  } = this;
	        const widths = [];
	        const heights = [];
	        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));
	        let widestLabelSize = 0;
	        let highestLabelSize = 0;
	        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
	        for(i = 0; i < length; i += increment){
	            label = ticks[i].label;
	            tickFont = this._resolveTickFontOptions(i);
	            ctx.font = fontString = tickFont.string;
	            cache = caches[fontString] = caches[fontString] || {
	                data: {},
	                gc: []
	            };
	            lineHeight = tickFont.lineHeight;
	            width = height = 0;
	            if (!isNullOrUndef(label) && !isArray(label)) {
	                width = _measureText(ctx, cache.data, cache.gc, width, label);
	                height = lineHeight;
	            } else if (isArray(label)) {
	                for(j = 0, jlen = label.length; j < jlen; ++j){
	                    nestedLabel =  label[j];
	                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
	                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);
	                        height += lineHeight;
	                    }
	                }
	            }
	            widths.push(width);
	            heights.push(height);
	            widestLabelSize = Math.max(width, widestLabelSize);
	            highestLabelSize = Math.max(height, highestLabelSize);
	        }
	        garbageCollect(caches, length);
	        const widest = widths.indexOf(widestLabelSize);
	        const highest = heights.indexOf(highestLabelSize);
	        const valueAt = (idx)=>({
	                width: widths[idx] || 0,
	                height: heights[idx] || 0
	            });
	        return {
	            first: valueAt(0),
	            last: valueAt(length - 1),
	            widest: valueAt(widest),
	            highest: valueAt(highest),
	            widths,
	            heights
	        };
	    }
	 getLabelForValue(value) {
	        return value;
	    }
	 getPixelForValue(value, index) {
	        return NaN;
	    }
	 getValueForPixel(pixel) {}
	 getPixelForTick(index) {
	        const ticks = this.ticks;
	        if (index < 0 || index > ticks.length - 1) {
	            return null;
	        }
	        return this.getPixelForValue(ticks[index].value);
	    }
	 getPixelForDecimal(decimal) {
	        if (this._reversePixels) {
	            decimal = 1 - decimal;
	        }
	        const pixel = this._startPixel + decimal * this._length;
	        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);
	    }
	 getDecimalForPixel(pixel) {
	        const decimal = (pixel - this._startPixel) / this._length;
	        return this._reversePixels ? 1 - decimal : decimal;
	    }
	 getBasePixel() {
	        return this.getPixelForValue(this.getBaseValue());
	    }
	 getBaseValue() {
	        const { min , max  } = this;
	        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
	    }
	 getContext(index) {
	        const ticks = this.ticks || [];
	        if (index >= 0 && index < ticks.length) {
	            const tick = ticks[index];
	            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));
	        }
	        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));
	    }
	 _tickSize() {
	        const optionTicks = this.options.ticks;
	        const rot = toRadians(this.labelRotation);
	        const cos = Math.abs(Math.cos(rot));
	        const sin = Math.abs(Math.sin(rot));
	        const labelSizes = this._getLabelSizes();
	        const padding = optionTicks.autoSkipPadding || 0;
	        const w = labelSizes ? labelSizes.widest.width + padding : 0;
	        const h = labelSizes ? labelSizes.highest.height + padding : 0;
	        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;
	    }
	 _isVisible() {
	        const display = this.options.display;
	        if (display !== 'auto') {
	            return !!display;
	        }
	        return this.getMatchingVisibleMetas().length > 0;
	    }
	 _computeGridLineItems(chartArea) {
	        const axis = this.axis;
	        const chart = this.chart;
	        const options = this.options;
	        const { grid , position , border  } = options;
	        const offset = grid.offset;
	        const isHorizontal = this.isHorizontal();
	        const ticks = this.ticks;
	        const ticksLength = ticks.length + (offset ? 1 : 0);
	        const tl = getTickMarkLength(grid);
	        const items = [];
	        const borderOpts = border.setContext(this.getContext());
	        const axisWidth = borderOpts.display ? borderOpts.width : 0;
	        const axisHalfWidth = axisWidth / 2;
	        const alignBorderValue = function(pixel) {
	            return _alignPixel(chart, pixel, axisWidth);
	        };
	        let borderValue, i, lineValue, alignedLineValue;
	        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;
	        if (position === 'top') {
	            borderValue = alignBorderValue(this.bottom);
	            ty1 = this.bottom - tl;
	            ty2 = borderValue - axisHalfWidth;
	            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
	            y2 = chartArea.bottom;
	        } else if (position === 'bottom') {
	            borderValue = alignBorderValue(this.top);
	            y1 = chartArea.top;
	            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
	            ty1 = borderValue + axisHalfWidth;
	            ty2 = this.top + tl;
	        } else if (position === 'left') {
	            borderValue = alignBorderValue(this.right);
	            tx1 = this.right - tl;
	            tx2 = borderValue - axisHalfWidth;
	            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
	            x2 = chartArea.right;
	        } else if (position === 'right') {
	            borderValue = alignBorderValue(this.left);
	            x1 = chartArea.left;
	            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
	            tx1 = borderValue + axisHalfWidth;
	            tx2 = this.left + tl;
	        } else if (axis === 'x') {
	            if (position === 'center') {
	                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
	            } else if (isObject(position)) {
	                const positionAxisID = Object.keys(position)[0];
	                const value = position[positionAxisID];
	                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
	            }
	            y1 = chartArea.top;
	            y2 = chartArea.bottom;
	            ty1 = borderValue + axisHalfWidth;
	            ty2 = ty1 + tl;
	        } else if (axis === 'y') {
	            if (position === 'center') {
	                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
	            } else if (isObject(position)) {
	                const positionAxisID = Object.keys(position)[0];
	                const value = position[positionAxisID];
	                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
	            }
	            tx1 = borderValue - axisHalfWidth;
	            tx2 = tx1 - tl;
	            x1 = chartArea.left;
	            x2 = chartArea.right;
	        }
	        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);
	        const step = Math.max(1, Math.ceil(ticksLength / limit));
	        for(i = 0; i < ticksLength; i += step){
	            const context = this.getContext(i);
	            const optsAtIndex = grid.setContext(context);
	            const optsAtIndexBorder = border.setContext(context);
	            const lineWidth = optsAtIndex.lineWidth;
	            const lineColor = optsAtIndex.color;
	            const borderDash = optsAtIndexBorder.dash || [];
	            const borderDashOffset = optsAtIndexBorder.dashOffset;
	            const tickWidth = optsAtIndex.tickWidth;
	            const tickColor = optsAtIndex.tickColor;
	            const tickBorderDash = optsAtIndex.tickBorderDash || [];
	            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
	            lineValue = getPixelForGridLine(this, i, offset);
	            if (lineValue === undefined) {
	                continue;
	            }
	            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);
	            if (isHorizontal) {
	                tx1 = tx2 = x1 = x2 = alignedLineValue;
	            } else {
	                ty1 = ty2 = y1 = y2 = alignedLineValue;
	            }
	            items.push({
	                tx1,
	                ty1,
	                tx2,
	                ty2,
	                x1,
	                y1,
	                x2,
	                y2,
	                width: lineWidth,
	                color: lineColor,
	                borderDash,
	                borderDashOffset,
	                tickWidth,
	                tickColor,
	                tickBorderDash,
	                tickBorderDashOffset
	            });
	        }
	        this._ticksLength = ticksLength;
	        this._borderValue = borderValue;
	        return items;
	    }
	 _computeLabelItems(chartArea) {
	        const axis = this.axis;
	        const options = this.options;
	        const { position , ticks: optionTicks  } = options;
	        const isHorizontal = this.isHorizontal();
	        const ticks = this.ticks;
	        const { align , crossAlign , padding , mirror  } = optionTicks;
	        const tl = getTickMarkLength(options.grid);
	        const tickAndPadding = tl + padding;
	        const hTickAndPadding = mirror ? -padding : tickAndPadding;
	        const rotation = -toRadians(this.labelRotation);
	        const items = [];
	        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;
	        let textBaseline = 'middle';
	        if (position === 'top') {
	            y = this.bottom - hTickAndPadding;
	            textAlign = this._getXAxisLabelAlignment();
	        } else if (position === 'bottom') {
	            y = this.top + hTickAndPadding;
	            textAlign = this._getXAxisLabelAlignment();
	        } else if (position === 'left') {
	            const ret = this._getYAxisLabelAlignment(tl);
	            textAlign = ret.textAlign;
	            x = ret.x;
	        } else if (position === 'right') {
	            const ret = this._getYAxisLabelAlignment(tl);
	            textAlign = ret.textAlign;
	            x = ret.x;
	        } else if (axis === 'x') {
	            if (position === 'center') {
	                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;
	            } else if (isObject(position)) {
	                const positionAxisID = Object.keys(position)[0];
	                const value = position[positionAxisID];
	                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
	            }
	            textAlign = this._getXAxisLabelAlignment();
	        } else if (axis === 'y') {
	            if (position === 'center') {
	                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;
	            } else if (isObject(position)) {
	                const positionAxisID = Object.keys(position)[0];
	                const value = position[positionAxisID];
	                x = this.chart.scales[positionAxisID].getPixelForValue(value);
	            }
	            textAlign = this._getYAxisLabelAlignment(tl).textAlign;
	        }
	        if (axis === 'y') {
	            if (align === 'start') {
	                textBaseline = 'top';
	            } else if (align === 'end') {
	                textBaseline = 'bottom';
	            }
	        }
	        const labelSizes = this._getLabelSizes();
	        for(i = 0, ilen = ticks.length; i < ilen; ++i){
	            tick = ticks[i];
	            label = tick.label;
	            const optsAtIndex = optionTicks.setContext(this.getContext(i));
	            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;
	            font = this._resolveTickFontOptions(i);
	            lineHeight = font.lineHeight;
	            lineCount = isArray(label) ? label.length : 1;
	            const halfCount = lineCount / 2;
	            const color = optsAtIndex.color;
	            const strokeColor = optsAtIndex.textStrokeColor;
	            const strokeWidth = optsAtIndex.textStrokeWidth;
	            let tickTextAlign = textAlign;
	            if (isHorizontal) {
	                x = pixel;
	                if (textAlign === 'inner') {
	                    if (i === ilen - 1) {
	                        tickTextAlign = !this.options.reverse ? 'right' : 'left';
	                    } else if (i === 0) {
	                        tickTextAlign = !this.options.reverse ? 'left' : 'right';
	                    } else {
	                        tickTextAlign = 'center';
	                    }
	                }
	                if (position === 'top') {
	                    if (crossAlign === 'near' || rotation !== 0) {
	                        textOffset = -lineCount * lineHeight + lineHeight / 2;
	                    } else if (crossAlign === 'center') {
	                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
	                    } else {
	                        textOffset = -labelSizes.highest.height + lineHeight / 2;
	                    }
	                } else {
	                    if (crossAlign === 'near' || rotation !== 0) {
	                        textOffset = lineHeight / 2;
	                    } else if (crossAlign === 'center') {
	                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
	                    } else {
	                        textOffset = labelSizes.highest.height - lineCount * lineHeight;
	                    }
	                }
	                if (mirror) {
	                    textOffset *= -1;
	                }
	                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {
	                    x += lineHeight / 2 * Math.sin(rotation);
	                }
	            } else {
	                y = pixel;
	                textOffset = (1 - lineCount) * lineHeight / 2;
	            }
	            let backdrop;
	            if (optsAtIndex.showLabelBackdrop) {
	                const labelPadding = toPadding(optsAtIndex.backdropPadding);
	                const height = labelSizes.heights[i];
	                const width = labelSizes.widths[i];
	                let top = textOffset - labelPadding.top;
	                let left = 0 - labelPadding.left;
	                switch(textBaseline){
	                    case 'middle':
	                        top -= height / 2;
	                        break;
	                    case 'bottom':
	                        top -= height;
	                        break;
	                }
	                switch(textAlign){
	                    case 'center':
	                        left -= width / 2;
	                        break;
	                    case 'right':
	                        left -= width;
	                        break;
	                    case 'inner':
	                        if (i === ilen - 1) {
	                            left -= width;
	                        } else if (i > 0) {
	                            left -= width / 2;
	                        }
	                        break;
	                }
	                backdrop = {
	                    left,
	                    top,
	                    width: width + labelPadding.width,
	                    height: height + labelPadding.height,
	                    color: optsAtIndex.backdropColor
	                };
	            }
	            items.push({
	                label,
	                font,
	                textOffset,
	                options: {
	                    rotation,
	                    color,
	                    strokeColor,
	                    strokeWidth,
	                    textAlign: tickTextAlign,
	                    textBaseline,
	                    translation: [
	                        x,
	                        y
	                    ],
	                    backdrop
	                }
	            });
	        }
	        return items;
	    }
	    _getXAxisLabelAlignment() {
	        const { position , ticks  } = this.options;
	        const rotation = -toRadians(this.labelRotation);
	        if (rotation) {
	            return position === 'top' ? 'left' : 'right';
	        }
	        let align = 'center';
	        if (ticks.align === 'start') {
	            align = 'left';
	        } else if (ticks.align === 'end') {
	            align = 'right';
	        } else if (ticks.align === 'inner') {
	            align = 'inner';
	        }
	        return align;
	    }
	    _getYAxisLabelAlignment(tl) {
	        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;
	        const labelSizes = this._getLabelSizes();
	        const tickAndPadding = tl + padding;
	        const widest = labelSizes.widest.width;
	        let textAlign;
	        let x;
	        if (position === 'left') {
	            if (mirror) {
	                x = this.right + padding;
	                if (crossAlign === 'near') {
	                    textAlign = 'left';
	                } else if (crossAlign === 'center') {
	                    textAlign = 'center';
	                    x += widest / 2;
	                } else {
	                    textAlign = 'right';
	                    x += widest;
	                }
	            } else {
	                x = this.right - tickAndPadding;
	                if (crossAlign === 'near') {
	                    textAlign = 'right';
	                } else if (crossAlign === 'center') {
	                    textAlign = 'center';
	                    x -= widest / 2;
	                } else {
	                    textAlign = 'left';
	                    x = this.left;
	                }
	            }
	        } else if (position === 'right') {
	            if (mirror) {
	                x = this.left + padding;
	                if (crossAlign === 'near') {
	                    textAlign = 'right';
	                } else if (crossAlign === 'center') {
	                    textAlign = 'center';
	                    x -= widest / 2;
	                } else {
	                    textAlign = 'left';
	                    x -= widest;
	                }
	            } else {
	                x = this.left + tickAndPadding;
	                if (crossAlign === 'near') {
	                    textAlign = 'left';
	                } else if (crossAlign === 'center') {
	                    textAlign = 'center';
	                    x += widest / 2;
	                } else {
	                    textAlign = 'right';
	                    x = this.right;
	                }
	            }
	        } else {
	            textAlign = 'right';
	        }
	        return {
	            textAlign,
	            x
	        };
	    }
	 _computeLabelArea() {
	        if (this.options.ticks.mirror) {
	            return;
	        }
	        const chart = this.chart;
	        const position = this.options.position;
	        if (position === 'left' || position === 'right') {
	            return {
	                top: 0,
	                left: this.left,
	                bottom: chart.height,
	                right: this.right
	            };
	        }
	        if (position === 'top' || position === 'bottom') {
	            return {
	                top: this.top,
	                left: 0,
	                bottom: this.bottom,
	                right: chart.width
	            };
	        }
	    }
	 drawBackground() {
	        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;
	        if (backgroundColor) {
	            ctx.save();
	            ctx.fillStyle = backgroundColor;
	            ctx.fillRect(left, top, width, height);
	            ctx.restore();
	        }
	    }
	    getLineWidthForValue(value) {
	        const grid = this.options.grid;
	        if (!this._isVisible() || !grid.display) {
	            return 0;
	        }
	        const ticks = this.ticks;
	        const index = ticks.findIndex((t)=>t.value === value);
	        if (index >= 0) {
	            const opts = grid.setContext(this.getContext(index));
	            return opts.lineWidth;
	        }
	        return 0;
	    }
	 drawGrid(chartArea) {
	        const grid = this.options.grid;
	        const ctx = this.ctx;
	        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));
	        let i, ilen;
	        const drawLine = (p1, p2, style)=>{
	            if (!style.width || !style.color) {
	                return;
	            }
	            ctx.save();
	            ctx.lineWidth = style.width;
	            ctx.strokeStyle = style.color;
	            ctx.setLineDash(style.borderDash || []);
	            ctx.lineDashOffset = style.borderDashOffset;
	            ctx.beginPath();
	            ctx.moveTo(p1.x, p1.y);
	            ctx.lineTo(p2.x, p2.y);
	            ctx.stroke();
	            ctx.restore();
	        };
	        if (grid.display) {
	            for(i = 0, ilen = items.length; i < ilen; ++i){
	                const item = items[i];
	                if (grid.drawOnChartArea) {
	                    drawLine({
	                        x: item.x1,
	                        y: item.y1
	                    }, {
	                        x: item.x2,
	                        y: item.y2
	                    }, item);
	                }
	                if (grid.drawTicks) {
	                    drawLine({
	                        x: item.tx1,
	                        y: item.ty1
	                    }, {
	                        x: item.tx2,
	                        y: item.ty2
	                    }, {
	                        color: item.tickColor,
	                        width: item.tickWidth,
	                        borderDash: item.tickBorderDash,
	                        borderDashOffset: item.tickBorderDashOffset
	                    });
	                }
	            }
	        }
	    }
	 drawBorder() {
	        const { chart , ctx , options: { border , grid  }  } = this;
	        const borderOpts = border.setContext(this.getContext());
	        const axisWidth = border.display ? borderOpts.width : 0;
	        if (!axisWidth) {
	            return;
	        }
	        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;
	        const borderValue = this._borderValue;
	        let x1, x2, y1, y2;
	        if (this.isHorizontal()) {
	            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;
	            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;
	            y1 = y2 = borderValue;
	        } else {
	            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;
	            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;
	            x1 = x2 = borderValue;
	        }
	        ctx.save();
	        ctx.lineWidth = borderOpts.width;
	        ctx.strokeStyle = borderOpts.color;
	        ctx.beginPath();
	        ctx.moveTo(x1, y1);
	        ctx.lineTo(x2, y2);
	        ctx.stroke();
	        ctx.restore();
	    }
	 drawLabels(chartArea) {
	        const optionTicks = this.options.ticks;
	        if (!optionTicks.display) {
	            return;
	        }
	        const ctx = this.ctx;
	        const area = this._computeLabelArea();
	        if (area) {
	            clipArea(ctx, area);
	        }
	        const items = this.getLabelItems(chartArea);
	        for (const item of items){
	            const renderTextOptions = item.options;
	            const tickFont = item.font;
	            const label = item.label;
	            const y = item.textOffset;
	            renderText(ctx, label, 0, y, tickFont, renderTextOptions);
	        }
	        if (area) {
	            unclipArea(ctx);
	        }
	    }
	 drawTitle() {
	        const { ctx , options: { position , title , reverse  }  } = this;
	        if (!title.display) {
	            return;
	        }
	        const font = toFont(title.font);
	        const padding = toPadding(title.padding);
	        const align = title.align;
	        let offset = font.lineHeight / 2;
	        if (position === 'bottom' || position === 'center' || isObject(position)) {
	            offset += padding.bottom;
	            if (isArray(title.text)) {
	                offset += font.lineHeight * (title.text.length - 1);
	            }
	        } else {
	            offset += padding.top;
	        }
	        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);
	        renderText(ctx, title.text, 0, 0, font, {
	            color: title.color,
	            maxWidth,
	            rotation,
	            textAlign: titleAlign(align, position, reverse),
	            textBaseline: 'middle',
	            translation: [
	                titleX,
	                titleY
	            ]
	        });
	    }
	    draw(chartArea) {
	        if (!this._isVisible()) {
	            return;
	        }
	        this.drawBackground();
	        this.drawGrid(chartArea);
	        this.drawBorder();
	        this.drawTitle();
	        this.drawLabels(chartArea);
	    }
	 _layers() {
	        const opts = this.options;
	        const tz = opts.ticks && opts.ticks.z || 0;
	        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);
	        const bz = valueOrDefault(opts.border && opts.border.z, 0);
	        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {
	            return [
	                {
	                    z: tz,
	                    draw: (chartArea)=>{
	                        this.draw(chartArea);
	                    }
	                }
	            ];
	        }
	        return [
	            {
	                z: gz,
	                draw: (chartArea)=>{
	                    this.drawBackground();
	                    this.drawGrid(chartArea);
	                    this.drawTitle();
	                }
	            },
	            {
	                z: bz,
	                draw: ()=>{
	                    this.drawBorder();
	                }
	            },
	            {
	                z: tz,
	                draw: (chartArea)=>{
	                    this.drawLabels(chartArea);
	                }
	            }
	        ];
	    }
	 getMatchingVisibleMetas(type) {
	        const metas = this.chart.getSortedVisibleDatasetMetas();
	        const axisID = this.axis + 'AxisID';
	        const result = [];
	        let i, ilen;
	        for(i = 0, ilen = metas.length; i < ilen; ++i){
	            const meta = metas[i];
	            if (meta[axisID] === this.id && (!type || meta.type === type)) {
	                result.push(meta);
	            }
	        }
	        return result;
	    }
	 _resolveTickFontOptions(index) {
	        const opts = this.options.ticks.setContext(this.getContext(index));
	        return toFont(opts.font);
	    }
	 _maxDigits() {
	        const fontSize = this._resolveTickFontOptions(0).lineHeight;
	        return (this.isHorizontal() ? this.width : this.height) / fontSize;
	    }
	}

	class TypedRegistry {
	    constructor(type, scope, override){
	        this.type = type;
	        this.scope = scope;
	        this.override = override;
	        this.items = Object.create(null);
	    }
	    isForType(type) {
	        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
	    }
	 register(item) {
	        const proto = Object.getPrototypeOf(item);
	        let parentScope;
	        if (isIChartComponent(proto)) {
	            parentScope = this.register(proto);
	        }
	        const items = this.items;
	        const id = item.id;
	        const scope = this.scope + '.' + id;
	        if (!id) {
	            throw new Error('class does not have id: ' + item);
	        }
	        if (id in items) {
	            return scope;
	        }
	        items[id] = item;
	        registerDefaults(item, scope, parentScope);
	        if (this.override) {
	            defaults$1.override(item.id, item.overrides);
	        }
	        return scope;
	    }
	 get(id) {
	        return this.items[id];
	    }
	 unregister(item) {
	        const items = this.items;
	        const id = item.id;
	        const scope = this.scope;
	        if (id in items) {
	            delete items[id];
	        }
	        if (scope && id in defaults$1[scope]) {
	            delete defaults$1[scope][id];
	            if (this.override) {
	                delete overrides[id];
	            }
	        }
	    }
	}
	function registerDefaults(item, scope, parentScope) {
	    const itemDefaults = merge(Object.create(null), [
	        parentScope ? defaults$1.get(parentScope) : {},
	        defaults$1.get(scope),
	        item.defaults
	    ]);
	    defaults$1.set(scope, itemDefaults);
	    if (item.defaultRoutes) {
	        routeDefaults(scope, item.defaultRoutes);
	    }
	    if (item.descriptors) {
	        defaults$1.describe(scope, item.descriptors);
	    }
	}
	function routeDefaults(scope, routes) {
	    Object.keys(routes).forEach((property)=>{
	        const propertyParts = property.split('.');
	        const sourceName = propertyParts.pop();
	        const sourceScope = [
	            scope
	        ].concat(propertyParts).join('.');
	        const parts = routes[property].split('.');
	        const targetName = parts.pop();
	        const targetScope = parts.join('.');
	        defaults$1.route(sourceScope, sourceName, targetScope, targetName);
	    });
	}
	function isIChartComponent(proto) {
	    return 'id' in proto && 'defaults' in proto;
	}

	class Registry {
	    constructor(){
	        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);
	        this.elements = new TypedRegistry(Element$1, 'elements');
	        this.plugins = new TypedRegistry(Object, 'plugins');
	        this.scales = new TypedRegistry(Scale, 'scales');
	        this._typedRegistries = [
	            this.controllers,
	            this.scales,
	            this.elements
	        ];
	    }
	 add(...args) {
	        this._each('register', args);
	    }
	    remove(...args) {
	        this._each('unregister', args);
	    }
	 addControllers(...args) {
	        this._each('register', args, this.controllers);
	    }
	 addElements(...args) {
	        this._each('register', args, this.elements);
	    }
	 addPlugins(...args) {
	        this._each('register', args, this.plugins);
	    }
	 addScales(...args) {
	        this._each('register', args, this.scales);
	    }
	 getController(id) {
	        return this._get(id, this.controllers, 'controller');
	    }
	 getElement(id) {
	        return this._get(id, this.elements, 'element');
	    }
	 getPlugin(id) {
	        return this._get(id, this.plugins, 'plugin');
	    }
	 getScale(id) {
	        return this._get(id, this.scales, 'scale');
	    }
	 removeControllers(...args) {
	        this._each('unregister', args, this.controllers);
	    }
	 removeElements(...args) {
	        this._each('unregister', args, this.elements);
	    }
	 removePlugins(...args) {
	        this._each('unregister', args, this.plugins);
	    }
	 removeScales(...args) {
	        this._each('unregister', args, this.scales);
	    }
	 _each(method, args, typedRegistry) {
	        [
	            ...args
	        ].forEach((arg)=>{
	            const reg = typedRegistry || this._getRegistryForType(arg);
	            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {
	                this._exec(method, reg, arg);
	            } else {
	                each(arg, (item)=>{
	                    const itemReg = typedRegistry || this._getRegistryForType(item);
	                    this._exec(method, itemReg, item);
	                });
	            }
	        });
	    }
	 _exec(method, registry, component) {
	        const camelMethod = _capitalize(method);
	        callback(component['before' + camelMethod], [], component);
	        registry[method](component);
	        callback(component['after' + camelMethod], [], component);
	    }
	 _getRegistryForType(type) {
	        for(let i = 0; i < this._typedRegistries.length; i++){
	            const reg = this._typedRegistries[i];
	            if (reg.isForType(type)) {
	                return reg;
	            }
	        }
	        return this.plugins;
	    }
	 _get(id, typedRegistry, type) {
	        const item = typedRegistry.get(id);
	        if (item === undefined) {
	            throw new Error('"' + id + '" is not a registered ' + type + '.');
	        }
	        return item;
	    }
	}
	var registry = /* #__PURE__ */ new Registry();

	class PluginService {
	    constructor(){
	        this._init = [];
	    }
	 notify(chart, hook, args, filter) {
	        if (hook === 'beforeInit') {
	            this._init = this._createDescriptors(chart, true);
	            this._notify(this._init, chart, 'install');
	        }
	        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);
	        const result = this._notify(descriptors, chart, hook, args);
	        if (hook === 'afterDestroy') {
	            this._notify(descriptors, chart, 'stop');
	            this._notify(this._init, chart, 'uninstall');
	        }
	        return result;
	    }
	 _notify(descriptors, chart, hook, args) {
	        args = args || {};
	        for (const descriptor of descriptors){
	            const plugin = descriptor.plugin;
	            const method = plugin[hook];
	            const params = [
	                chart,
	                args,
	                descriptor.options
	            ];
	            if (callback(method, params, plugin) === false && args.cancelable) {
	                return false;
	            }
	        }
	        return true;
	    }
	    invalidate() {
	        if (!isNullOrUndef(this._cache)) {
	            this._oldCache = this._cache;
	            this._cache = undefined;
	        }
	    }
	 _descriptors(chart) {
	        if (this._cache) {
	            return this._cache;
	        }
	        const descriptors = this._cache = this._createDescriptors(chart);
	        this._notifyStateChanges(chart);
	        return descriptors;
	    }
	    _createDescriptors(chart, all) {
	        const config = chart && chart.config;
	        const options = valueOrDefault(config.options && config.options.plugins, {});
	        const plugins = allPlugins(config);
	        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);
	    }
	 _notifyStateChanges(chart) {
	        const previousDescriptors = this._oldCache || [];
	        const descriptors = this._cache;
	        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));
	        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');
	        this._notify(diff(descriptors, previousDescriptors), chart, 'start');
	    }
	}
	 function allPlugins(config) {
	    const localIds = {};
	    const plugins = [];
	    const keys = Object.keys(registry.plugins.items);
	    for(let i = 0; i < keys.length; i++){
	        plugins.push(registry.getPlugin(keys[i]));
	    }
	    const local = config.plugins || [];
	    for(let i = 0; i < local.length; i++){
	        const plugin = local[i];
	        if (plugins.indexOf(plugin) === -1) {
	            plugins.push(plugin);
	            localIds[plugin.id] = true;
	        }
	    }
	    return {
	        plugins,
	        localIds
	    };
	}
	function getOpts(options, all) {
	    if (!all && options === false) {
	        return null;
	    }
	    if (options === true) {
	        return {};
	    }
	    return options;
	}
	function createDescriptors(chart, { plugins , localIds  }, options, all) {
	    const result = [];
	    const context = chart.getContext();
	    for (const plugin of plugins){
	        const id = plugin.id;
	        const opts = getOpts(options[id], all);
	        if (opts === null) {
	            continue;
	        }
	        result.push({
	            plugin,
	            options: pluginOpts(chart.config, {
	                plugin,
	                local: localIds[id]
	            }, opts, context)
	        });
	    }
	    return result;
	}
	function pluginOpts(config, { plugin , local  }, opts, context) {
	    const keys = config.pluginScopeKeys(plugin);
	    const scopes = config.getOptionScopes(opts, keys);
	    if (local && plugin.defaults) {
	        scopes.push(plugin.defaults);
	    }
	    return config.createResolver(scopes, context, [
	        ''
	    ], {
	        scriptable: false,
	        indexable: false,
	        allKeys: true
	    });
	}

	function getIndexAxis(type, options) {
	    const datasetDefaults = defaults$1.datasets[type] || {};
	    const datasetOptions = (options.datasets || {})[type] || {};
	    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';
	}
	function getAxisFromDefaultScaleID(id, indexAxis) {
	    let axis = id;
	    if (id === '_index_') {
	        axis = indexAxis;
	    } else if (id === '_value_') {
	        axis = indexAxis === 'x' ? 'y' : 'x';
	    }
	    return axis;
	}
	function getDefaultScaleIDFromAxis(axis, indexAxis) {
	    return axis === indexAxis ? '_index_' : '_value_';
	}
	function idMatchesAxis(id) {
	    if (id === 'x' || id === 'y' || id === 'r') {
	        return id;
	    }
	}
	function axisFromPosition(position) {
	    if (position === 'top' || position === 'bottom') {
	        return 'x';
	    }
	    if (position === 'left' || position === 'right') {
	        return 'y';
	    }
	}
	function determineAxis(id, ...scaleOptions) {
	    if (idMatchesAxis(id)) {
	        return id;
	    }
	    for (const opts of scaleOptions){
	        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());
	        if (axis) {
	            return axis;
	        }
	    }
	    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);
	}
	function getAxisFromDataset(id, axis, dataset) {
	    if (dataset[axis + 'AxisID'] === id) {
	        return {
	            axis
	        };
	    }
	}
	function retrieveAxisFromDatasets(id, config) {
	    if (config.data && config.data.datasets) {
	        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);
	        if (boundDs.length) {
	            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);
	        }
	    }
	    return {};
	}
	function mergeScaleConfig(config, options) {
	    const chartDefaults = overrides[config.type] || {
	        scales: {}
	    };
	    const configScales = options.scales || {};
	    const chartIndexAxis = getIndexAxis(config.type, options);
	    const scales = Object.create(null);
	    Object.keys(configScales).forEach((id)=>{
	        const scaleConf = configScales[id];
	        if (!isObject(scaleConf)) {
	            return console.error(`Invalid scale configuration for scale: ${id}`);
	        }
	        if (scaleConf._proxy) {
	            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);
	        }
	        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults$1.scales[scaleConf.type]);
	        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);
	        const defaultScaleOptions = chartDefaults.scales || {};
	        scales[id] = mergeIf(Object.create(null), [
	            {
	                axis
	            },
	            scaleConf,
	            defaultScaleOptions[axis],
	            defaultScaleOptions[defaultId]
	        ]);
	    });
	    config.data.datasets.forEach((dataset)=>{
	        const type = dataset.type || config.type;
	        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);
	        const datasetDefaults = overrides[type] || {};
	        const defaultScaleOptions = datasetDefaults.scales || {};
	        Object.keys(defaultScaleOptions).forEach((defaultID)=>{
	            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);
	            const id = dataset[axis + 'AxisID'] || axis;
	            scales[id] = scales[id] || Object.create(null);
	            mergeIf(scales[id], [
	                {
	                    axis
	                },
	                configScales[id],
	                defaultScaleOptions[defaultID]
	            ]);
	        });
	    });
	    Object.keys(scales).forEach((key)=>{
	        const scale = scales[key];
	        mergeIf(scale, [
	            defaults$1.scales[scale.type],
	            defaults$1.scale
	        ]);
	    });
	    return scales;
	}
	function initOptions(config) {
	    const options = config.options || (config.options = {});
	    options.plugins = valueOrDefault(options.plugins, {});
	    options.scales = mergeScaleConfig(config, options);
	}
	function initData(data) {
	    data = data || {};
	    data.datasets = data.datasets || [];
	    data.labels = data.labels || [];
	    return data;
	}
	function initConfig(config) {
	    config = config || {};
	    config.data = initData(config.data);
	    initOptions(config);
	    return config;
	}
	const keyCache = new Map();
	const keysCached = new Set();
	function cachedKeys(cacheKey, generate) {
	    let keys = keyCache.get(cacheKey);
	    if (!keys) {
	        keys = generate();
	        keyCache.set(cacheKey, keys);
	        keysCached.add(keys);
	    }
	    return keys;
	}
	const addIfFound = (set, obj, key)=>{
	    const opts = resolveObjectKey(obj, key);
	    if (opts !== undefined) {
	        set.add(opts);
	    }
	};
	class Config {
	    constructor(config){
	        this._config = initConfig(config);
	        this._scopeCache = new Map();
	        this._resolverCache = new Map();
	    }
	    get platform() {
	        return this._config.platform;
	    }
	    get type() {
	        return this._config.type;
	    }
	    set type(type) {
	        this._config.type = type;
	    }
	    get data() {
	        return this._config.data;
	    }
	    set data(data) {
	        this._config.data = initData(data);
	    }
	    get options() {
	        return this._config.options;
	    }
	    set options(options) {
	        this._config.options = options;
	    }
	    get plugins() {
	        return this._config.plugins;
	    }
	    update() {
	        const config = this._config;
	        this.clearCache();
	        initOptions(config);
	    }
	    clearCache() {
	        this._scopeCache.clear();
	        this._resolverCache.clear();
	    }
	 datasetScopeKeys(datasetType) {
	        return cachedKeys(datasetType, ()=>[
	                [
	                    `datasets.${datasetType}`,
	                    ''
	                ]
	            ]);
	    }
	 datasetAnimationScopeKeys(datasetType, transition) {
	        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[
	                [
	                    `datasets.${datasetType}.transitions.${transition}`,
	                    `transitions.${transition}`
	                ],
	                [
	                    `datasets.${datasetType}`,
	                    ''
	                ]
	            ]);
	    }
	 datasetElementScopeKeys(datasetType, elementType) {
	        return cachedKeys(`${datasetType}-${elementType}`, ()=>[
	                [
	                    `datasets.${datasetType}.elements.${elementType}`,
	                    `datasets.${datasetType}`,
	                    `elements.${elementType}`,
	                    ''
	                ]
	            ]);
	    }
	 pluginScopeKeys(plugin) {
	        const id = plugin.id;
	        const type = this.type;
	        return cachedKeys(`${type}-plugin-${id}`, ()=>[
	                [
	                    `plugins.${id}`,
	                    ...plugin.additionalOptionScopes || []
	                ]
	            ]);
	    }
	 _cachedScopes(mainScope, resetCache) {
	        const _scopeCache = this._scopeCache;
	        let cache = _scopeCache.get(mainScope);
	        if (!cache || resetCache) {
	            cache = new Map();
	            _scopeCache.set(mainScope, cache);
	        }
	        return cache;
	    }
	 getOptionScopes(mainScope, keyLists, resetCache) {
	        const { options , type  } = this;
	        const cache = this._cachedScopes(mainScope, resetCache);
	        const cached = cache.get(keyLists);
	        if (cached) {
	            return cached;
	        }
	        const scopes = new Set();
	        keyLists.forEach((keys)=>{
	            if (mainScope) {
	                scopes.add(mainScope);
	                keys.forEach((key)=>addIfFound(scopes, mainScope, key));
	            }
	            keys.forEach((key)=>addIfFound(scopes, options, key));
	            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));
	            keys.forEach((key)=>addIfFound(scopes, defaults$1, key));
	            keys.forEach((key)=>addIfFound(scopes, descriptors, key));
	        });
	        const array = Array.from(scopes);
	        if (array.length === 0) {
	            array.push(Object.create(null));
	        }
	        if (keysCached.has(keyLists)) {
	            cache.set(keyLists, array);
	        }
	        return array;
	    }
	 chartOptionScopes() {
	        const { options , type  } = this;
	        return [
	            options,
	            overrides[type] || {},
	            defaults$1.datasets[type] || {},
	            {
	                type
	            },
	            defaults$1,
	            descriptors
	        ];
	    }
	 resolveNamedOptions(scopes, names, context, prefixes = [
	        ''
	    ]) {
	        const result = {
	            $shared: true
	        };
	        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);
	        let options = resolver;
	        if (needContext(resolver, names)) {
	            result.$shared = false;
	            context = isFunction(context) ? context() : context;
	            const subResolver = this.createResolver(scopes, context, subPrefixes);
	            options = _attachContext(resolver, context, subResolver);
	        }
	        for (const prop of names){
	            result[prop] = options[prop];
	        }
	        return result;
	    }
	 createResolver(scopes, context, prefixes = [
	        ''
	    ], descriptorDefaults) {
	        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);
	        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;
	    }
	}
	function getResolver(resolverCache, scopes, prefixes) {
	    let cache = resolverCache.get(scopes);
	    if (!cache) {
	        cache = new Map();
	        resolverCache.set(scopes, cache);
	    }
	    const cacheKey = prefixes.join();
	    let cached = cache.get(cacheKey);
	    if (!cached) {
	        const resolver = _createResolver(scopes, prefixes);
	        cached = {
	            resolver,
	            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))
	        };
	        cache.set(cacheKey, cached);
	    }
	    return cached;
	}
	const hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).some((key)=>isFunction(value[key]));
	function needContext(proxy, names) {
	    const { isScriptable , isIndexable  } = _descriptors(proxy);
	    for (const prop of names){
	        const scriptable = isScriptable(prop);
	        const indexable = isIndexable(prop);
	        const value = (indexable || scriptable) && proxy[prop];
	        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {
	            return true;
	        }
	    }
	    return false;
	}

	var version$1 = "4.5.0";

	const KNOWN_POSITIONS = [
	    'top',
	    'bottom',
	    'left',
	    'right',
	    'chartArea'
	];
	function positionIsHorizontal(position, axis) {
	    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';
	}
	function compare2Level(l1, l2) {
	    return function(a, b) {
	        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];
	    };
	}
	function onAnimationsComplete(context) {
	    const chart = context.chart;
	    const animationOptions = chart.options.animation;
	    chart.notifyPlugins('afterRender');
	    callback(animationOptions && animationOptions.onComplete, [
	        context
	    ], chart);
	}
	function onAnimationProgress(context) {
	    const chart = context.chart;
	    const animationOptions = chart.options.animation;
	    callback(animationOptions && animationOptions.onProgress, [
	        context
	    ], chart);
	}
	 function getCanvas(item) {
	    if (_isDomSupported() && typeof item === 'string') {
	        item = document.getElementById(item);
	    } else if (item && item.length) {
	        item = item[0];
	    }
	    if (item && item.canvas) {
	        item = item.canvas;
	    }
	    return item;
	}
	const instances = {};
	const getChart = (key)=>{
	    const canvas = getCanvas(key);
	    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();
	};
	function moveNumericKeys(obj, start, move) {
	    const keys = Object.keys(obj);
	    for (const key of keys){
	        const intKey = +key;
	        if (intKey >= start) {
	            const value = obj[key];
	            delete obj[key];
	            if (move > 0 || intKey > start) {
	                obj[intKey + move] = value;
	            }
	        }
	    }
	}
	 function determineLastEvent(e, lastEvent, inChartArea, isClick) {
	    if (!inChartArea || e.type === 'mouseout') {
	        return null;
	    }
	    if (isClick) {
	        return lastEvent;
	    }
	    return e;
	}
	class Chart {
	    static defaults = defaults$1;
	    static instances = instances;
	    static overrides = overrides;
	    static registry = registry;
	    static version = version$1;
	    static getChart = getChart;
	    static register(...items) {
	        registry.add(...items);
	        invalidatePlugins();
	    }
	    static unregister(...items) {
	        registry.remove(...items);
	        invalidatePlugins();
	    }
	    constructor(item, userConfig){
	        const config = this.config = new Config(userConfig);
	        const initialCanvas = getCanvas(item);
	        const existingChart = getChart(initialCanvas);
	        if (existingChart) {
	            throw new Error('Canvas is already in use. Chart with ID \'' + existingChart.id + '\'' + ' must be destroyed before the canvas with ID \'' + existingChart.canvas.id + '\' can be reused.');
	        }
	        const options = config.createResolver(config.chartOptionScopes(), this.getContext());
	        this.platform = new (config.platform || _detectPlatform(initialCanvas))();
	        this.platform.updateConfig(config);
	        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);
	        const canvas = context && context.canvas;
	        const height = canvas && canvas.height;
	        const width = canvas && canvas.width;
	        this.id = uid();
	        this.ctx = context;
	        this.canvas = canvas;
	        this.width = width;
	        this.height = height;
	        this._options = options;
	        this._aspectRatio = this.aspectRatio;
	        this._layers = [];
	        this._metasets = [];
	        this._stacks = undefined;
	        this.boxes = [];
	        this.currentDevicePixelRatio = undefined;
	        this.chartArea = undefined;
	        this._active = [];
	        this._lastEvent = undefined;
	        this._listeners = {};
	         this._responsiveListeners = undefined;
	        this._sortedMetasets = [];
	        this.scales = {};
	        this._plugins = new PluginService();
	        this.$proxies = {};
	        this._hiddenIndices = {};
	        this.attached = false;
	        this._animationsDisabled = undefined;
	        this.$context = undefined;
	        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);
	        this._dataChanges = [];
	        instances[this.id] = this;
	        if (!context || !canvas) {
	            console.error("Failed to create chart: can't acquire context from the given item");
	            return;
	        }
	        animator.listen(this, 'complete', onAnimationsComplete);
	        animator.listen(this, 'progress', onAnimationProgress);
	        this._initialize();
	        if (this.attached) {
	            this.update();
	        }
	    }
	    get aspectRatio() {
	        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;
	        if (!isNullOrUndef(aspectRatio)) {
	            return aspectRatio;
	        }
	        if (maintainAspectRatio && _aspectRatio) {
	            return _aspectRatio;
	        }
	        return height ? width / height : null;
	    }
	    get data() {
	        return this.config.data;
	    }
	    set data(data) {
	        this.config.data = data;
	    }
	    get options() {
	        return this._options;
	    }
	    set options(options) {
	        this.config.options = options;
	    }
	    get registry() {
	        return registry;
	    }
	 _initialize() {
	        this.notifyPlugins('beforeInit');
	        if (this.options.responsive) {
	            this.resize();
	        } else {
	            retinaScale(this, this.options.devicePixelRatio);
	        }
	        this.bindEvents();
	        this.notifyPlugins('afterInit');
	        return this;
	    }
	    clear() {
	        clearCanvas(this.canvas, this.ctx);
	        return this;
	    }
	    stop() {
	        animator.stop(this);
	        return this;
	    }
	 resize(width, height) {
	        if (!animator.running(this)) {
	            this._resize(width, height);
	        } else {
	            this._resizeBeforeDraw = {
	                width,
	                height
	            };
	        }
	    }
	    _resize(width, height) {
	        const options = this.options;
	        const canvas = this.canvas;
	        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;
	        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);
	        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();
	        const mode = this.width ? 'resize' : 'attach';
	        this.width = newSize.width;
	        this.height = newSize.height;
	        this._aspectRatio = this.aspectRatio;
	        if (!retinaScale(this, newRatio, true)) {
	            return;
	        }
	        this.notifyPlugins('resize', {
	            size: newSize
	        });
	        callback(options.onResize, [
	            this,
	            newSize
	        ], this);
	        if (this.attached) {
	            if (this._doResize(mode)) {
	                this.render();
	            }
	        }
	    }
	    ensureScalesHaveIDs() {
	        const options = this.options;
	        const scalesOptions = options.scales || {};
	        each(scalesOptions, (axisOptions, axisID)=>{
	            axisOptions.id = axisID;
	        });
	    }
	 buildOrUpdateScales() {
	        const options = this.options;
	        const scaleOpts = options.scales;
	        const scales = this.scales;
	        const updated = Object.keys(scales).reduce((obj, id)=>{
	            obj[id] = false;
	            return obj;
	        }, {});
	        let items = [];
	        if (scaleOpts) {
	            items = items.concat(Object.keys(scaleOpts).map((id)=>{
	                const scaleOptions = scaleOpts[id];
	                const axis = determineAxis(id, scaleOptions);
	                const isRadial = axis === 'r';
	                const isHorizontal = axis === 'x';
	                return {
	                    options: scaleOptions,
	                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',
	                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'
	                };
	            }));
	        }
	        each(items, (item)=>{
	            const scaleOptions = item.options;
	            const id = scaleOptions.id;
	            const axis = determineAxis(id, scaleOptions);
	            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);
	            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {
	                scaleOptions.position = item.dposition;
	            }
	            updated[id] = true;
	            let scale = null;
	            if (id in scales && scales[id].type === scaleType) {
	                scale = scales[id];
	            } else {
	                const scaleClass = registry.getScale(scaleType);
	                scale = new scaleClass({
	                    id,
	                    type: scaleType,
	                    ctx: this.ctx,
	                    chart: this
	                });
	                scales[scale.id] = scale;
	            }
	            scale.init(scaleOptions, options);
	        });
	        each(updated, (hasUpdated, id)=>{
	            if (!hasUpdated) {
	                delete scales[id];
	            }
	        });
	        each(scales, (scale)=>{
	            layouts.configure(this, scale, scale.options);
	            layouts.addBox(this, scale);
	        });
	    }
	 _updateMetasets() {
	        const metasets = this._metasets;
	        const numData = this.data.datasets.length;
	        const numMeta = metasets.length;
	        metasets.sort((a, b)=>a.index - b.index);
	        if (numMeta > numData) {
	            for(let i = numData; i < numMeta; ++i){
	                this._destroyDatasetMeta(i);
	            }
	            metasets.splice(numData, numMeta - numData);
	        }
	        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));
	    }
	 _removeUnreferencedMetasets() {
	        const { _metasets: metasets , data: { datasets  }  } = this;
	        if (metasets.length > datasets.length) {
	            delete this._stacks;
	        }
	        metasets.forEach((meta, index)=>{
	            if (datasets.filter((x)=>x === meta._dataset).length === 0) {
	                this._destroyDatasetMeta(index);
	            }
	        });
	    }
	    buildOrUpdateControllers() {
	        const newControllers = [];
	        const datasets = this.data.datasets;
	        let i, ilen;
	        this._removeUnreferencedMetasets();
	        for(i = 0, ilen = datasets.length; i < ilen; i++){
	            const dataset = datasets[i];
	            let meta = this.getDatasetMeta(i);
	            const type = dataset.type || this.config.type;
	            if (meta.type && meta.type !== type) {
	                this._destroyDatasetMeta(i);
	                meta = this.getDatasetMeta(i);
	            }
	            meta.type = type;
	            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);
	            meta.order = dataset.order || 0;
	            meta.index = i;
	            meta.label = '' + dataset.label;
	            meta.visible = this.isDatasetVisible(i);
	            if (meta.controller) {
	                meta.controller.updateIndex(i);
	                meta.controller.linkScales();
	            } else {
	                const ControllerClass = registry.getController(type);
	                const { datasetElementType , dataElementType  } = defaults$1.datasets[type];
	                Object.assign(ControllerClass, {
	                    dataElementType: registry.getElement(dataElementType),
	                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)
	                });
	                meta.controller = new ControllerClass(this, i);
	                newControllers.push(meta.controller);
	            }
	        }
	        this._updateMetasets();
	        return newControllers;
	    }
	 _resetElements() {
	        each(this.data.datasets, (dataset, datasetIndex)=>{
	            this.getDatasetMeta(datasetIndex).controller.reset();
	        }, this);
	    }
	 reset() {
	        this._resetElements();
	        this.notifyPlugins('reset');
	    }
	    update(mode) {
	        const config = this.config;
	        config.update();
	        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());
	        const animsDisabled = this._animationsDisabled = !options.animation;
	        this._updateScales();
	        this._checkEventBindings();
	        this._updateHiddenIndices();
	        this._plugins.invalidate();
	        if (this.notifyPlugins('beforeUpdate', {
	            mode,
	            cancelable: true
	        }) === false) {
	            return;
	        }
	        const newControllers = this.buildOrUpdateControllers();
	        this.notifyPlugins('beforeElementsUpdate');
	        let minPadding = 0;
	        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){
	            const { controller  } = this.getDatasetMeta(i);
	            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;
	            controller.buildOrUpdateElements(reset);
	            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
	        }
	        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;
	        this._updateLayout(minPadding);
	        if (!animsDisabled) {
	            each(newControllers, (controller)=>{
	                controller.reset();
	            });
	        }
	        this._updateDatasets(mode);
	        this.notifyPlugins('afterUpdate', {
	            mode
	        });
	        this._layers.sort(compare2Level('z', '_idx'));
	        const { _active , _lastEvent  } = this;
	        if (_lastEvent) {
	            this._eventHandler(_lastEvent, true);
	        } else if (_active.length) {
	            this._updateHoverStyles(_active, _active, true);
	        }
	        this.render();
	    }
	 _updateScales() {
	        each(this.scales, (scale)=>{
	            layouts.removeBox(this, scale);
	        });
	        this.ensureScalesHaveIDs();
	        this.buildOrUpdateScales();
	    }
	 _checkEventBindings() {
	        const options = this.options;
	        const existingEvents = new Set(Object.keys(this._listeners));
	        const newEvents = new Set(options.events);
	        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {
	            this.unbindEvents();
	            this.bindEvents();
	        }
	    }
	 _updateHiddenIndices() {
	        const { _hiddenIndices  } = this;
	        const changes = this._getUniformDataChanges() || [];
	        for (const { method , start , count  } of changes){
	            const move = method === '_removeElements' ? -count : count;
	            moveNumericKeys(_hiddenIndices, start, move);
	        }
	    }
	 _getUniformDataChanges() {
	        const _dataChanges = this._dataChanges;
	        if (!_dataChanges || !_dataChanges.length) {
	            return;
	        }
	        this._dataChanges = [];
	        const datasetCount = this.data.datasets.length;
	        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));
	        const changeSet = makeSet(0);
	        for(let i = 1; i < datasetCount; i++){
	            if (!setsEqual(changeSet, makeSet(i))) {
	                return;
	            }
	        }
	        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({
	                method: a[1],
	                start: +a[2],
	                count: +a[3]
	            }));
	    }
	 _updateLayout(minPadding) {
	        if (this.notifyPlugins('beforeLayout', {
	            cancelable: true
	        }) === false) {
	            return;
	        }
	        layouts.update(this, this.width, this.height, minPadding);
	        const area = this.chartArea;
	        const noArea = area.width <= 0 || area.height <= 0;
	        this._layers = [];
	        each(this.boxes, (box)=>{
	            if (noArea && box.position === 'chartArea') {
	                return;
	            }
	            if (box.configure) {
	                box.configure();
	            }
	            this._layers.push(...box._layers());
	        }, this);
	        this._layers.forEach((item, index)=>{
	            item._idx = index;
	        });
	        this.notifyPlugins('afterLayout');
	    }
	 _updateDatasets(mode) {
	        if (this.notifyPlugins('beforeDatasetsUpdate', {
	            mode,
	            cancelable: true
	        }) === false) {
	            return;
	        }
	        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){
	            this.getDatasetMeta(i).controller.configure();
	        }
	        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){
	            this._updateDataset(i, isFunction(mode) ? mode({
	                datasetIndex: i
	            }) : mode);
	        }
	        this.notifyPlugins('afterDatasetsUpdate', {
	            mode
	        });
	    }
	 _updateDataset(index, mode) {
	        const meta = this.getDatasetMeta(index);
	        const args = {
	            meta,
	            index,
	            mode,
	            cancelable: true
	        };
	        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {
	            return;
	        }
	        meta.controller._update(mode);
	        args.cancelable = false;
	        this.notifyPlugins('afterDatasetUpdate', args);
	    }
	    render() {
	        if (this.notifyPlugins('beforeRender', {
	            cancelable: true
	        }) === false) {
	            return;
	        }
	        if (animator.has(this)) {
	            if (this.attached && !animator.running(this)) {
	                animator.start(this);
	            }
	        } else {
	            this.draw();
	            onAnimationsComplete({
	                chart: this
	            });
	        }
	    }
	    draw() {
	        let i;
	        if (this._resizeBeforeDraw) {
	            const { width , height  } = this._resizeBeforeDraw;
	            this._resizeBeforeDraw = null;
	            this._resize(width, height);
	        }
	        this.clear();
	        if (this.width <= 0 || this.height <= 0) {
	            return;
	        }
	        if (this.notifyPlugins('beforeDraw', {
	            cancelable: true
	        }) === false) {
	            return;
	        }
	        const layers = this._layers;
	        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){
	            layers[i].draw(this.chartArea);
	        }
	        this._drawDatasets();
	        for(; i < layers.length; ++i){
	            layers[i].draw(this.chartArea);
	        }
	        this.notifyPlugins('afterDraw');
	    }
	 _getSortedDatasetMetas(filterVisible) {
	        const metasets = this._sortedMetasets;
	        const result = [];
	        let i, ilen;
	        for(i = 0, ilen = metasets.length; i < ilen; ++i){
	            const meta = metasets[i];
	            if (!filterVisible || meta.visible) {
	                result.push(meta);
	            }
	        }
	        return result;
	    }
	 getSortedVisibleDatasetMetas() {
	        return this._getSortedDatasetMetas(true);
	    }
	 _drawDatasets() {
	        if (this.notifyPlugins('beforeDatasetsDraw', {
	            cancelable: true
	        }) === false) {
	            return;
	        }
	        const metasets = this.getSortedVisibleDatasetMetas();
	        for(let i = metasets.length - 1; i >= 0; --i){
	            this._drawDataset(metasets[i]);
	        }
	        this.notifyPlugins('afterDatasetsDraw');
	    }
	 _drawDataset(meta) {
	        const ctx = this.ctx;
	        const args = {
	            meta,
	            index: meta.index,
	            cancelable: true
	        };
	        const clip = getDatasetClipArea(this, meta);
	        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {
	            return;
	        }
	        if (clip) {
	            clipArea(ctx, clip);
	        }
	        meta.controller.draw();
	        if (clip) {
	            unclipArea(ctx);
	        }
	        args.cancelable = false;
	        this.notifyPlugins('afterDatasetDraw', args);
	    }
	 isPointInArea(point) {
	        return _isPointInArea(point, this.chartArea, this._minPadding);
	    }
	    getElementsAtEventForMode(e, mode, options, useFinalPosition) {
	        const method = Interaction.modes[mode];
	        if (typeof method === 'function') {
	            return method(this, e, options, useFinalPosition);
	        }
	        return [];
	    }
	    getDatasetMeta(datasetIndex) {
	        const dataset = this.data.datasets[datasetIndex];
	        const metasets = this._metasets;
	        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();
	        if (!meta) {
	            meta = {
	                type: null,
	                data: [],
	                dataset: null,
	                controller: null,
	                hidden: null,
	                xAxisID: null,
	                yAxisID: null,
	                order: dataset && dataset.order || 0,
	                index: datasetIndex,
	                _dataset: dataset,
	                _parsed: [],
	                _sorted: false
	            };
	            metasets.push(meta);
	        }
	        return meta;
	    }
	    getContext() {
	        return this.$context || (this.$context = createContext(null, {
	            chart: this,
	            type: 'chart'
	        }));
	    }
	    getVisibleDatasetCount() {
	        return this.getSortedVisibleDatasetMetas().length;
	    }
	    isDatasetVisible(datasetIndex) {
	        const dataset = this.data.datasets[datasetIndex];
	        if (!dataset) {
	            return false;
	        }
	        const meta = this.getDatasetMeta(datasetIndex);
	        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;
	    }
	    setDatasetVisibility(datasetIndex, visible) {
	        const meta = this.getDatasetMeta(datasetIndex);
	        meta.hidden = !visible;
	    }
	    toggleDataVisibility(index) {
	        this._hiddenIndices[index] = !this._hiddenIndices[index];
	    }
	    getDataVisibility(index) {
	        return !this._hiddenIndices[index];
	    }
	 _updateVisibility(datasetIndex, dataIndex, visible) {
	        const mode = visible ? 'show' : 'hide';
	        const meta = this.getDatasetMeta(datasetIndex);
	        const anims = meta.controller._resolveAnimations(undefined, mode);
	        if (defined(dataIndex)) {
	            meta.data[dataIndex].hidden = !visible;
	            this.update();
	        } else {
	            this.setDatasetVisibility(datasetIndex, visible);
	            anims.update(meta, {
	                visible
	            });
	            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);
	        }
	    }
	    hide(datasetIndex, dataIndex) {
	        this._updateVisibility(datasetIndex, dataIndex, false);
	    }
	    show(datasetIndex, dataIndex) {
	        this._updateVisibility(datasetIndex, dataIndex, true);
	    }
	 _destroyDatasetMeta(datasetIndex) {
	        const meta = this._metasets[datasetIndex];
	        if (meta && meta.controller) {
	            meta.controller._destroy();
	        }
	        delete this._metasets[datasetIndex];
	    }
	    _stop() {
	        let i, ilen;
	        this.stop();
	        animator.remove(this);
	        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){
	            this._destroyDatasetMeta(i);
	        }
	    }
	    destroy() {
	        this.notifyPlugins('beforeDestroy');
	        const { canvas , ctx  } = this;
	        this._stop();
	        this.config.clearCache();
	        if (canvas) {
	            this.unbindEvents();
	            clearCanvas(canvas, ctx);
	            this.platform.releaseContext(ctx);
	            this.canvas = null;
	            this.ctx = null;
	        }
	        delete instances[this.id];
	        this.notifyPlugins('afterDestroy');
	    }
	    toBase64Image(...args) {
	        return this.canvas.toDataURL(...args);
	    }
	 bindEvents() {
	        this.bindUserEvents();
	        if (this.options.responsive) {
	            this.bindResponsiveEvents();
	        } else {
	            this.attached = true;
	        }
	    }
	 bindUserEvents() {
	        const listeners = this._listeners;
	        const platform = this.platform;
	        const _add = (type, listener)=>{
	            platform.addEventListener(this, type, listener);
	            listeners[type] = listener;
	        };
	        const listener = (e, x, y)=>{
	            e.offsetX = x;
	            e.offsetY = y;
	            this._eventHandler(e);
	        };
	        each(this.options.events, (type)=>_add(type, listener));
	    }
	 bindResponsiveEvents() {
	        if (!this._responsiveListeners) {
	            this._responsiveListeners = {};
	        }
	        const listeners = this._responsiveListeners;
	        const platform = this.platform;
	        const _add = (type, listener)=>{
	            platform.addEventListener(this, type, listener);
	            listeners[type] = listener;
	        };
	        const _remove = (type, listener)=>{
	            if (listeners[type]) {
	                platform.removeEventListener(this, type, listener);
	                delete listeners[type];
	            }
	        };
	        const listener = (width, height)=>{
	            if (this.canvas) {
	                this.resize(width, height);
	            }
	        };
	        let detached;
	        const attached = ()=>{
	            _remove('attach', attached);
	            this.attached = true;
	            this.resize();
	            _add('resize', listener);
	            _add('detach', detached);
	        };
	        detached = ()=>{
	            this.attached = false;
	            _remove('resize', listener);
	            this._stop();
	            this._resize(0, 0);
	            _add('attach', attached);
	        };
	        if (platform.isAttached(this.canvas)) {
	            attached();
	        } else {
	            detached();
	        }
	    }
	 unbindEvents() {
	        each(this._listeners, (listener, type)=>{
	            this.platform.removeEventListener(this, type, listener);
	        });
	        this._listeners = {};
	        each(this._responsiveListeners, (listener, type)=>{
	            this.platform.removeEventListener(this, type, listener);
	        });
	        this._responsiveListeners = undefined;
	    }
	    updateHoverStyle(items, mode, enabled) {
	        const prefix = enabled ? 'set' : 'remove';
	        let meta, item, i, ilen;
	        if (mode === 'dataset') {
	            meta = this.getDatasetMeta(items[0].datasetIndex);
	            meta.controller['_' + prefix + 'DatasetHoverStyle']();
	        }
	        for(i = 0, ilen = items.length; i < ilen; ++i){
	            item = items[i];
	            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;
	            if (controller) {
	                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);
	            }
	        }
	    }
	 getActiveElements() {
	        return this._active || [];
	    }
	 setActiveElements(activeElements) {
	        const lastActive = this._active || [];
	        const active = activeElements.map(({ datasetIndex , index  })=>{
	            const meta = this.getDatasetMeta(datasetIndex);
	            if (!meta) {
	                throw new Error('No dataset found at index ' + datasetIndex);
	            }
	            return {
	                datasetIndex,
	                element: meta.data[index],
	                index
	            };
	        });
	        const changed = !_elementsEqual(active, lastActive);
	        if (changed) {
	            this._active = active;
	            this._lastEvent = null;
	            this._updateHoverStyles(active, lastActive);
	        }
	    }
	 notifyPlugins(hook, args, filter) {
	        return this._plugins.notify(this, hook, args, filter);
	    }
	 isPluginEnabled(pluginId) {
	        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;
	    }
	 _updateHoverStyles(active, lastActive, replay) {
	        const hoverOptions = this.options.hover;
	        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));
	        const deactivated = diff(lastActive, active);
	        const activated = replay ? active : diff(active, lastActive);
	        if (deactivated.length) {
	            this.updateHoverStyle(deactivated, hoverOptions.mode, false);
	        }
	        if (activated.length && hoverOptions.mode) {
	            this.updateHoverStyle(activated, hoverOptions.mode, true);
	        }
	    }
	 _eventHandler(e, replay) {
	        const args = {
	            event: e,
	            replay,
	            cancelable: true,
	            inChartArea: this.isPointInArea(e)
	        };
	        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);
	        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {
	            return;
	        }
	        const changed = this._handleEvent(e, replay, args.inChartArea);
	        args.cancelable = false;
	        this.notifyPlugins('afterEvent', args, eventFilter);
	        if (changed || args.changed) {
	            this.render();
	        }
	        return this;
	    }
	 _handleEvent(e, replay, inChartArea) {
	        const { _active: lastActive = [] , options  } = this;
	        const useFinalPosition = replay;
	        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);
	        const isClick = _isClickEvent(e);
	        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);
	        if (inChartArea) {
	            this._lastEvent = null;
	            callback(options.onHover, [
	                e,
	                active,
	                this
	            ], this);
	            if (isClick) {
	                callback(options.onClick, [
	                    e,
	                    active,
	                    this
	                ], this);
	            }
	        }
	        const changed = !_elementsEqual(active, lastActive);
	        if (changed || replay) {
	            this._active = active;
	            this._updateHoverStyles(active, lastActive, replay);
	        }
	        this._lastEvent = lastEvent;
	        return changed;
	    }
	 _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {
	        if (e.type === 'mouseout') {
	            return [];
	        }
	        if (!inChartArea) {
	            return lastActive;
	        }
	        const hoverOptions = this.options.hover;
	        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);
	    }
	}
	function invalidatePlugins() {
	    return each(Chart.instances, (chart)=>chart._plugins.invalidate());
	}

	function clipSelf(ctx, element, endAngle) {
	    const { startAngle , x , y , outerRadius , innerRadius , options  } = element;
	    const { borderWidth , borderJoinStyle  } = options;
	    const outerAngleClip = Math.min(borderWidth / outerRadius, _normalizeAngle(startAngle - endAngle));
	    ctx.beginPath();
	    ctx.arc(x, y, outerRadius - borderWidth / 2, startAngle + outerAngleClip / 2, endAngle - outerAngleClip / 2);
	    if (innerRadius > 0) {
	        const innerAngleClip = Math.min(borderWidth / innerRadius, _normalizeAngle(startAngle - endAngle));
	        ctx.arc(x, y, innerRadius + borderWidth / 2, endAngle - innerAngleClip / 2, startAngle + innerAngleClip / 2, true);
	    } else {
	        const clipWidth = Math.min(borderWidth / 2, outerRadius * _normalizeAngle(startAngle - endAngle));
	        if (borderJoinStyle === 'round') {
	            ctx.arc(x, y, clipWidth, endAngle - PI / 2, startAngle + PI / 2, true);
	        } else if (borderJoinStyle === 'bevel') {
	            const r = 2 * clipWidth * clipWidth;
	            const endX = -r * Math.cos(endAngle + PI / 2) + x;
	            const endY = -r * Math.sin(endAngle + PI / 2) + y;
	            const startX = r * Math.cos(startAngle + PI / 2) + x;
	            const startY = r * Math.sin(startAngle + PI / 2) + y;
	            ctx.lineTo(endX, endY);
	            ctx.lineTo(startX, startY);
	        }
	    }
	    ctx.closePath();
	    ctx.moveTo(0, 0);
	    ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);
	    ctx.clip('evenodd');
	}
	function clipArc(ctx, element, endAngle) {
	    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;
	    let angleMargin = pixelMargin / outerRadius;
	    // Draw an inner border by clipping the arc and drawing a double-width border
	    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders
	    ctx.beginPath();
	    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);
	    if (innerRadius > pixelMargin) {
	        angleMargin = pixelMargin / innerRadius;
	        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);
	    } else {
	        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);
	    }
	    ctx.closePath();
	    ctx.clip();
	}
	function toRadiusCorners(value) {
	    return _readValueToProps(value, [
	        'outerStart',
	        'outerEnd',
	        'innerStart',
	        'innerEnd'
	    ]);
	}
	/**
	 * Parse border radius from the provided options
	 */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {
	    const o = toRadiusCorners(arc.options.borderRadius);
	    const halfThickness = (outerRadius - innerRadius) / 2;
	    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);
	    // Outer limits are complicated. We want to compute the available angular distance at
	    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.
	    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.
	    //
	    // If the borderRadius is large, that value can become negative.
	    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius
	    // we know that the thickness term will dominate and compute the limits at that point
	    const computeOuterLimit = (val)=>{
	        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;
	        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));
	    };
	    return {
	        outerStart: computeOuterLimit(o.outerStart),
	        outerEnd: computeOuterLimit(o.outerEnd),
	        innerStart: _limitValue(o.innerStart, 0, innerLimit),
	        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)
	    };
	}
	/**
	 * Convert (r, 𝜃) to (x, y)
	 */ function rThetaToXY(r, theta, x, y) {
	    return {
	        x: x + r * Math.cos(theta),
	        y: y + r * Math.sin(theta)
	    };
	}
	/**
	 * Path the arc, respecting border radius by separating into left and right halves.
	 *
	 *   Start      End
	 *
	 *    1--->a--->2    Outer
	 *   /           \
	 *   8           3
	 *   |           |
	 *   |           |
	 *   7           4
	 *   \           /
	 *    6<---b<---5    Inner
	 */ function pathArc(ctx, element, offset, spacing, end, circular) {
	    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;
	    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);
	    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;
	    let spacingOffset = 0;
	    const alpha = end - start;
	    if (spacing) {
	        // When spacing is present, it is the same for all items
	        // So we adjust the start and end angle of the arc such that
	        // the distance is the same as it would be without the spacing
	        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;
	        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;
	        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;
	        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;
	        spacingOffset = (alpha - adjustedAngle) / 2;
	    }
	    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;
	    const angleOffset = (alpha - beta) / 2;
	    const startAngle = start + angleOffset + spacingOffset;
	    const endAngle = end - angleOffset - spacingOffset;
	    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);
	    const outerStartAdjustedRadius = outerRadius - outerStart;
	    const outerEndAdjustedRadius = outerRadius - outerEnd;
	    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;
	    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;
	    const innerStartAdjustedRadius = innerRadius + innerStart;
	    const innerEndAdjustedRadius = innerRadius + innerEnd;
	    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;
	    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;
	    ctx.beginPath();
	    if (circular) {
	        // The first arc segments from point 1 to point a to point 2
	        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;
	        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);
	        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);
	        // The corner segment from point 2 to point 3
	        if (outerEnd > 0) {
	            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);
	            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);
	        }
	        // The line from point 3 to point 4
	        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);
	        ctx.lineTo(p4.x, p4.y);
	        // The corner segment from point 4 to point 5
	        if (innerEnd > 0) {
	            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);
	            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);
	        }
	        // The inner arc from point 5 to point b to point 6
	        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;
	        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);
	        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);
	        // The corner segment from point 6 to point 7
	        if (innerStart > 0) {
	            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);
	            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);
	        }
	        // The line from point 7 to point 8
	        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);
	        ctx.lineTo(p8.x, p8.y);
	        // The corner segment from point 8 to point 1
	        if (outerStart > 0) {
	            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);
	            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);
	        }
	    } else {
	        ctx.moveTo(x, y);
	        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;
	        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;
	        ctx.lineTo(outerStartX, outerStartY);
	        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;
	        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;
	        ctx.lineTo(outerEndX, outerEndY);
	    }
	    ctx.closePath();
	}
	function drawArc(ctx, element, offset, spacing, circular) {
	    const { fullCircles , startAngle , circumference  } = element;
	    let endAngle = element.endAngle;
	    if (fullCircles) {
	        pathArc(ctx, element, offset, spacing, endAngle, circular);
	        for(let i = 0; i < fullCircles; ++i){
	            ctx.fill();
	        }
	        if (!isNaN(circumference)) {
	            endAngle = startAngle + (circumference % TAU || TAU);
	        }
	    }
	    pathArc(ctx, element, offset, spacing, endAngle, circular);
	    ctx.fill();
	    return endAngle;
	}
	function drawBorder(ctx, element, offset, spacing, circular) {
	    const { fullCircles , startAngle , circumference , options  } = element;
	    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset , borderRadius  } = options;
	    const inner = options.borderAlign === 'inner';
	    if (!borderWidth) {
	        return;
	    }
	    ctx.setLineDash(borderDash || []);
	    ctx.lineDashOffset = borderDashOffset;
	    if (inner) {
	        ctx.lineWidth = borderWidth * 2;
	        ctx.lineJoin = borderJoinStyle || 'round';
	    } else {
	        ctx.lineWidth = borderWidth;
	        ctx.lineJoin = borderJoinStyle || 'bevel';
	    }
	    let endAngle = element.endAngle;
	    if (fullCircles) {
	        pathArc(ctx, element, offset, spacing, endAngle, circular);
	        for(let i = 0; i < fullCircles; ++i){
	            ctx.stroke();
	        }
	        if (!isNaN(circumference)) {
	            endAngle = startAngle + (circumference % TAU || TAU);
	        }
	    }
	    if (inner) {
	        clipArc(ctx, element, endAngle);
	    }
	    if (options.selfJoin && endAngle - startAngle >= PI && borderRadius === 0 && borderJoinStyle !== 'miter') {
	        clipSelf(ctx, element, endAngle);
	    }
	    if (!fullCircles) {
	        pathArc(ctx, element, offset, spacing, endAngle, circular);
	        ctx.stroke();
	    }
	}
	class ArcElement extends Element$1 {
	    static id = 'arc';
	    static defaults = {
	        borderAlign: 'center',
	        borderColor: '#fff',
	        borderDash: [],
	        borderDashOffset: 0,
	        borderJoinStyle: undefined,
	        borderRadius: 0,
	        borderWidth: 2,
	        offset: 0,
	        spacing: 0,
	        angle: undefined,
	        circular: true,
	        selfJoin: false
	    };
	    static defaultRoutes = {
	        backgroundColor: 'backgroundColor'
	    };
	    static descriptors = {
	        _scriptable: true,
	        _indexable: (name)=>name !== 'borderDash'
	    };
	    circumference;
	    endAngle;
	    fullCircles;
	    innerRadius;
	    outerRadius;
	    pixelMargin;
	    startAngle;
	    constructor(cfg){
	        super();
	        this.options = undefined;
	        this.circumference = undefined;
	        this.startAngle = undefined;
	        this.endAngle = undefined;
	        this.innerRadius = undefined;
	        this.outerRadius = undefined;
	        this.pixelMargin = 0;
	        this.fullCircles = 0;
	        if (cfg) {
	            Object.assign(this, cfg);
	        }
	    }
	    inRange(chartX, chartY, useFinalPosition) {
	        const point = this.getProps([
	            'x',
	            'y'
	        ], useFinalPosition);
	        const { angle , distance  } = getAngleFromPoint(point, {
	            x: chartX,
	            y: chartY
	        });
	        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([
	            'startAngle',
	            'endAngle',
	            'innerRadius',
	            'outerRadius',
	            'circumference'
	        ], useFinalPosition);
	        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;
	        const _circumference = valueOrDefault(circumference, endAngle - startAngle);
	        const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;
	        const betweenAngles = _circumference >= TAU || nonZeroBetween;
	        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);
	        return betweenAngles && withinRadius;
	    }
	    getCenterPoint(useFinalPosition) {
	        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([
	            'x',
	            'y',
	            'startAngle',
	            'endAngle',
	            'innerRadius',
	            'outerRadius'
	        ], useFinalPosition);
	        const { offset , spacing  } = this.options;
	        const halfAngle = (startAngle + endAngle) / 2;
	        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;
	        return {
	            x: x + Math.cos(halfAngle) * halfRadius,
	            y: y + Math.sin(halfAngle) * halfRadius
	        };
	    }
	    tooltipPosition(useFinalPosition) {
	        return this.getCenterPoint(useFinalPosition);
	    }
	    draw(ctx) {
	        const { options , circumference  } = this;
	        const offset = (options.offset || 0) / 4;
	        const spacing = (options.spacing || 0) / 2;
	        const circular = options.circular;
	        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;
	        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;
	        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {
	            return;
	        }
	        ctx.save();
	        const halfAngle = (this.startAngle + this.endAngle) / 2;
	        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);
	        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));
	        const radiusOffset = offset * fix;
	        ctx.fillStyle = options.backgroundColor;
	        ctx.strokeStyle = options.borderColor;
	        drawArc(ctx, this, radiusOffset, spacing, circular);
	        drawBorder(ctx, this, radiusOffset, spacing, circular);
	        ctx.restore();
	    }
	}

	function inRange$1(el, pos, axis, useFinalPosition) {
	    const options = el.options;
	    const { [axis]: value  } = el.getProps([
	        axis
	    ], useFinalPosition);
	    return Math.abs(pos - value) < options.radius + options.hitRadius;
	}
	class PointElement extends Element$1 {
	    static id = 'point';
	    parsed;
	    skip;
	    stop;
	    /**
	   * @type {any}
	   */ static defaults = {
	        borderWidth: 1,
	        hitRadius: 1,
	        hoverBorderWidth: 1,
	        hoverRadius: 4,
	        pointStyle: 'circle',
	        radius: 3,
	        rotation: 0
	    };
	    /**
	   * @type {any}
	   */ static defaultRoutes = {
	        backgroundColor: 'backgroundColor',
	        borderColor: 'borderColor'
	    };
	    constructor(cfg){
	        super();
	        this.options = undefined;
	        this.parsed = undefined;
	        this.skip = undefined;
	        this.stop = undefined;
	        if (cfg) {
	            Object.assign(this, cfg);
	        }
	    }
	    inRange(mouseX, mouseY, useFinalPosition) {
	        const options = this.options;
	        const { x , y  } = this.getProps([
	            'x',
	            'y'
	        ], useFinalPosition);
	        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);
	    }
	    inXRange(mouseX, useFinalPosition) {
	        return inRange$1(this, mouseX, 'x', useFinalPosition);
	    }
	    inYRange(mouseY, useFinalPosition) {
	        return inRange$1(this, mouseY, 'y', useFinalPosition);
	    }
	    getCenterPoint(useFinalPosition) {
	        const { x , y  } = this.getProps([
	            'x',
	            'y'
	        ], useFinalPosition);
	        return {
	            x,
	            y
	        };
	    }
	    size(options) {
	        options = options || this.options || {};
	        let radius = options.radius || 0;
	        radius = Math.max(radius, radius && options.hoverRadius || 0);
	        const borderWidth = radius && options.borderWidth || 0;
	        return (radius + borderWidth) * 2;
	    }
	    draw(ctx, area) {
	        const options = this.options;
	        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {
	            return;
	        }
	        ctx.strokeStyle = options.borderColor;
	        ctx.lineWidth = options.borderWidth;
	        ctx.fillStyle = options.backgroundColor;
	        drawPoint$1(ctx, options, this.x, this.y);
	    }
	    getRange() {
	        const options = this.options || {};
	        // @ts-expect-error Fallbacks should never be hit in practice
	        return options.radius + options.hitRadius;
	    }
	}

	function getBarBounds(bar, useFinalPosition) {
	    const { x , y , base , width , height  } =  bar.getProps([
	        'x',
	        'y',
	        'base',
	        'width',
	        'height'
	    ], useFinalPosition);
	    let left, right, top, bottom, half;
	    if (bar.horizontal) {
	        half = height / 2;
	        left = Math.min(x, base);
	        right = Math.max(x, base);
	        top = y - half;
	        bottom = y + half;
	    } else {
	        half = width / 2;
	        left = x - half;
	        right = x + half;
	        top = Math.min(y, base);
	        bottom = Math.max(y, base);
	    }
	    return {
	        left,
	        top,
	        right,
	        bottom
	    };
	}
	function skipOrLimit(skip, value, min, max) {
	    return skip ? 0 : _limitValue(value, min, max);
	}
	function parseBorderWidth(bar, maxW, maxH) {
	    const value = bar.options.borderWidth;
	    const skip = bar.borderSkipped;
	    const o = toTRBL(value);
	    return {
	        t: skipOrLimit(skip.top, o.top, 0, maxH),
	        r: skipOrLimit(skip.right, o.right, 0, maxW),
	        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),
	        l: skipOrLimit(skip.left, o.left, 0, maxW)
	    };
	}
	function parseBorderRadius(bar, maxW, maxH) {
	    const { enableBorderRadius  } = bar.getProps([
	        'enableBorderRadius'
	    ]);
	    const value = bar.options.borderRadius;
	    const o = toTRBLCorners(value);
	    const maxR = Math.min(maxW, maxH);
	    const skip = bar.borderSkipped;
	    const enableBorder = enableBorderRadius || isObject(value);
	    return {
	        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),
	        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),
	        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),
	        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)
	    };
	}
	function boundingRects$1(bar) {
	    const bounds = getBarBounds(bar);
	    const width = bounds.right - bounds.left;
	    const height = bounds.bottom - bounds.top;
	    const border = parseBorderWidth(bar, width / 2, height / 2);
	    const radius = parseBorderRadius(bar, width / 2, height / 2);
	    return {
	        outer: {
	            x: bounds.left,
	            y: bounds.top,
	            w: width,
	            h: height,
	            radius
	        },
	        inner: {
	            x: bounds.left + border.l,
	            y: bounds.top + border.t,
	            w: width - border.l - border.r,
	            h: height - border.t - border.b,
	            radius: {
	                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),
	                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),
	                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),
	                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))
	            }
	        }
	    };
	}
	function inRange(bar, x, y, useFinalPosition) {
	    const skipX = x === null;
	    const skipY = y === null;
	    const skipBoth = skipX && skipY;
	    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);
	    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));
	}
	function hasRadius(radius) {
	    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;
	}
	 function addNormalRectPath(ctx, rect) {
	    ctx.rect(rect.x, rect.y, rect.w, rect.h);
	}
	function inflateRect(rect, amount, refRect = {}) {
	    const x = rect.x !== refRect.x ? -amount : 0;
	    const y = rect.y !== refRect.y ? -amount : 0;
	    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;
	    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;
	    return {
	        x: rect.x + x,
	        y: rect.y + y,
	        w: rect.w + w,
	        h: rect.h + h,
	        radius: rect.radius
	    };
	}
	class BarElement extends Element$1 {
	    static id = 'bar';
	 static defaults = {
	        borderSkipped: 'start',
	        borderWidth: 0,
	        borderRadius: 0,
	        inflateAmount: 'auto',
	        pointStyle: undefined
	    };
	 static defaultRoutes = {
	        backgroundColor: 'backgroundColor',
	        borderColor: 'borderColor'
	    };
	    constructor(cfg){
	        super();
	        this.options = undefined;
	        this.horizontal = undefined;
	        this.base = undefined;
	        this.width = undefined;
	        this.height = undefined;
	        this.inflateAmount = undefined;
	        if (cfg) {
	            Object.assign(this, cfg);
	        }
	    }
	    draw(ctx) {
	        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;
	        const { inner , outer  } = boundingRects$1(this);
	        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;
	        ctx.save();
	        if (outer.w !== inner.w || outer.h !== inner.h) {
	            ctx.beginPath();
	            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));
	            ctx.clip();
	            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));
	            ctx.fillStyle = borderColor;
	            ctx.fill('evenodd');
	        }
	        ctx.beginPath();
	        addRectPath(ctx, inflateRect(inner, inflateAmount));
	        ctx.fillStyle = backgroundColor;
	        ctx.fill();
	        ctx.restore();
	    }
	    inRange(mouseX, mouseY, useFinalPosition) {
	        return inRange(this, mouseX, mouseY, useFinalPosition);
	    }
	    inXRange(mouseX, useFinalPosition) {
	        return inRange(this, mouseX, null, useFinalPosition);
	    }
	    inYRange(mouseY, useFinalPosition) {
	        return inRange(this, null, mouseY, useFinalPosition);
	    }
	    getCenterPoint(useFinalPosition) {
	        const { x , y , base , horizontal  } =  this.getProps([
	            'x',
	            'y',
	            'base',
	            'horizontal'
	        ], useFinalPosition);
	        return {
	            x: horizontal ? (x + base) / 2 : x,
	            y: horizontal ? y : (y + base) / 2
	        };
	    }
	    getRange(axis) {
	        return axis === 'x' ? this.width / 2 : this.height / 2;
	    }
	}

	const getBoxSize = (labelOpts, fontSize)=>{
	    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;
	    if (labelOpts.usePointStyle) {
	        boxHeight = Math.min(boxHeight, fontSize);
	        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);
	    }
	    return {
	        boxWidth,
	        boxHeight,
	        itemHeight: Math.max(fontSize, boxHeight)
	    };
	};
	const itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;
	class Legend extends Element$1 {
	 constructor(config){
	        super();
	        this._added = false;
	        this.legendHitBoxes = [];
	 this._hoveredItem = null;
	        this.doughnutMode = false;
	        this.chart = config.chart;
	        this.options = config.options;
	        this.ctx = config.ctx;
	        this.legendItems = undefined;
	        this.columnSizes = undefined;
	        this.lineWidths = undefined;
	        this.maxHeight = undefined;
	        this.maxWidth = undefined;
	        this.top = undefined;
	        this.bottom = undefined;
	        this.left = undefined;
	        this.right = undefined;
	        this.height = undefined;
	        this.width = undefined;
	        this._margins = undefined;
	        this.position = undefined;
	        this.weight = undefined;
	        this.fullSize = undefined;
	    }
	    update(maxWidth, maxHeight, margins) {
	        this.maxWidth = maxWidth;
	        this.maxHeight = maxHeight;
	        this._margins = margins;
	        this.setDimensions();
	        this.buildLabels();
	        this.fit();
	    }
	    setDimensions() {
	        if (this.isHorizontal()) {
	            this.width = this.maxWidth;
	            this.left = this._margins.left;
	            this.right = this.width;
	        } else {
	            this.height = this.maxHeight;
	            this.top = this._margins.top;
	            this.bottom = this.height;
	        }
	    }
	    buildLabels() {
	        const labelOpts = this.options.labels || {};
	        let legendItems = callback(labelOpts.generateLabels, [
	            this.chart
	        ], this) || [];
	        if (labelOpts.filter) {
	            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));
	        }
	        if (labelOpts.sort) {
	            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));
	        }
	        if (this.options.reverse) {
	            legendItems.reverse();
	        }
	        this.legendItems = legendItems;
	    }
	    fit() {
	        const { options , ctx  } = this;
	        if (!options.display) {
	            this.width = this.height = 0;
	            return;
	        }
	        const labelOpts = options.labels;
	        const labelFont = toFont(labelOpts.font);
	        const fontSize = labelFont.size;
	        const titleHeight = this._computeTitleHeight();
	        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);
	        let width, height;
	        ctx.font = labelFont.string;
	        if (this.isHorizontal()) {
	            width = this.maxWidth;
	            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
	        } else {
	            height = this.maxHeight;
	            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;
	        }
	        this.width = Math.min(width, options.maxWidth || this.maxWidth);
	        this.height = Math.min(height, options.maxHeight || this.maxHeight);
	    }
	 _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
	        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;
	        const hitboxes = this.legendHitBoxes = [];
	        const lineWidths = this.lineWidths = [
	            0
	        ];
	        const lineHeight = itemHeight + padding;
	        let totalHeight = titleHeight;
	        ctx.textAlign = 'left';
	        ctx.textBaseline = 'middle';
	        let row = -1;
	        let top = -lineHeight;
	        this.legendItems.forEach((legendItem, i)=>{
	            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
	            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
	                totalHeight += lineHeight;
	                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
	                top += lineHeight;
	                row++;
	            }
	            hitboxes[i] = {
	                left: 0,
	                top,
	                row,
	                width: itemWidth,
	                height: itemHeight
	            };
	            lineWidths[lineWidths.length - 1] += itemWidth + padding;
	        });
	        return totalHeight;
	    }
	    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {
	        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;
	        const hitboxes = this.legendHitBoxes = [];
	        const columnSizes = this.columnSizes = [];
	        const heightLimit = maxHeight - titleHeight;
	        let totalWidth = padding;
	        let currentColWidth = 0;
	        let currentColHeight = 0;
	        let left = 0;
	        let col = 0;
	        this.legendItems.forEach((legendItem, i)=>{
	            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);
	            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
	                totalWidth += currentColWidth + padding;
	                columnSizes.push({
	                    width: currentColWidth,
	                    height: currentColHeight
	                });
	                left += currentColWidth + padding;
	                col++;
	                currentColWidth = currentColHeight = 0;
	            }
	            hitboxes[i] = {
	                left,
	                top: currentColHeight,
	                col,
	                width: itemWidth,
	                height: itemHeight
	            };
	            currentColWidth = Math.max(currentColWidth, itemWidth);
	            currentColHeight += itemHeight + padding;
	        });
	        totalWidth += currentColWidth;
	        columnSizes.push({
	            width: currentColWidth,
	            height: currentColHeight
	        });
	        return totalWidth;
	    }
	    adjustHitBoxes() {
	        if (!this.options.display) {
	            return;
	        }
	        const titleHeight = this._computeTitleHeight();
	        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;
	        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);
	        if (this.isHorizontal()) {
	            let row = 0;
	            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
	            for (const hitbox of hitboxes){
	                if (row !== hitbox.row) {
	                    row = hitbox.row;
	                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
	                }
	                hitbox.top += this.top + titleHeight + padding;
	                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
	                left += hitbox.width + padding;
	            }
	        } else {
	            let col = 0;
	            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
	            for (const hitbox of hitboxes){
	                if (hitbox.col !== col) {
	                    col = hitbox.col;
	                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
	                }
	                hitbox.top = top;
	                hitbox.left += this.left + padding;
	                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);
	                top += hitbox.height + padding;
	            }
	        }
	    }
	    isHorizontal() {
	        return this.options.position === 'top' || this.options.position === 'bottom';
	    }
	    draw() {
	        if (this.options.display) {
	            const ctx = this.ctx;
	            clipArea(ctx, this);
	            this._draw();
	            unclipArea(ctx);
	        }
	    }
	 _draw() {
	        const { options: opts , columnSizes , lineWidths , ctx  } = this;
	        const { align , labels: labelOpts  } = opts;
	        const defaultColor = defaults$1.color;
	        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
	        const labelFont = toFont(labelOpts.font);
	        const { padding  } = labelOpts;
	        const fontSize = labelFont.size;
	        const halfFontSize = fontSize / 2;
	        let cursor;
	        this.drawTitle();
	        ctx.textAlign = rtlHelper.textAlign('left');
	        ctx.textBaseline = 'middle';
	        ctx.lineWidth = 0.5;
	        ctx.font = labelFont.string;
	        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);
	        const drawLegendBox = function(x, y, legendItem) {
	            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {
	                return;
	            }
	            ctx.save();
	            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);
	            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);
	            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');
	            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);
	            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');
	            ctx.lineWidth = lineWidth;
	            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);
	            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));
	            if (labelOpts.usePointStyle) {
	                const drawOptions = {
	                    radius: boxHeight * Math.SQRT2 / 2,
	                    pointStyle: legendItem.pointStyle,
	                    rotation: legendItem.rotation,
	                    borderWidth: lineWidth
	                };
	                const centerX = rtlHelper.xPlus(x, boxWidth / 2);
	                const centerY = y + halfFontSize;
	                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);
	            } else {
	                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);
	                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);
	                const borderRadius = toTRBLCorners(legendItem.borderRadius);
	                ctx.beginPath();
	                if (Object.values(borderRadius).some((v)=>v !== 0)) {
	                    addRoundedRectPath(ctx, {
	                        x: xBoxLeft,
	                        y: yBoxTop,
	                        w: boxWidth,
	                        h: boxHeight,
	                        radius: borderRadius
	                    });
	                } else {
	                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
	                }
	                ctx.fill();
	                if (lineWidth !== 0) {
	                    ctx.stroke();
	                }
	            }
	            ctx.restore();
	        };
	        const fillText = function(x, y, legendItem) {
	            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {
	                strikethrough: legendItem.hidden,
	                textAlign: rtlHelper.textAlign(legendItem.textAlign)
	            });
	        };
	        const isHorizontal = this.isHorizontal();
	        const titleHeight = this._computeTitleHeight();
	        if (isHorizontal) {
	            cursor = {
	                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),
	                y: this.top + padding + titleHeight,
	                line: 0
	            };
	        } else {
	            cursor = {
	                x: this.left + padding,
	                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),
	                line: 0
	            };
	        }
	        overrideTextDirection(this.ctx, opts.textDirection);
	        const lineHeight = itemHeight + padding;
	        this.legendItems.forEach((legendItem, i)=>{
	            ctx.strokeStyle = legendItem.fontColor;
	            ctx.fillStyle = legendItem.fontColor;
	            const textWidth = ctx.measureText(legendItem.text).width;
	            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
	            const width = boxWidth + halfFontSize + textWidth;
	            let x = cursor.x;
	            let y = cursor.y;
	            rtlHelper.setWidth(this.width);
	            if (isHorizontal) {
	                if (i > 0 && x + width + padding > this.right) {
	                    y = cursor.y += lineHeight;
	                    cursor.line++;
	                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);
	                }
	            } else if (i > 0 && y + lineHeight > this.bottom) {
	                x = cursor.x = x + columnSizes[cursor.line].width + padding;
	                cursor.line++;
	                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);
	            }
	            const realX = rtlHelper.x(x);
	            drawLegendBox(realX, y, legendItem);
	            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);
	            fillText(rtlHelper.x(x), y, legendItem);
	            if (isHorizontal) {
	                cursor.x += width + padding;
	            } else if (typeof legendItem.text !== 'string') {
	                const fontLineHeight = labelFont.lineHeight;
	                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;
	            } else {
	                cursor.y += lineHeight;
	            }
	        });
	        restoreTextDirection(this.ctx, opts.textDirection);
	    }
	 drawTitle() {
	        const opts = this.options;
	        const titleOpts = opts.title;
	        const titleFont = toFont(titleOpts.font);
	        const titlePadding = toPadding(titleOpts.padding);
	        if (!titleOpts.display) {
	            return;
	        }
	        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
	        const ctx = this.ctx;
	        const position = titleOpts.position;
	        const halfFontSize = titleFont.size / 2;
	        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
	        let y;
	        let left = this.left;
	        let maxWidth = this.width;
	        if (this.isHorizontal()) {
	            maxWidth = Math.max(...this.lineWidths);
	            y = this.top + topPaddingPlusHalfFontSize;
	            left = _alignStartEnd(opts.align, left, this.right - maxWidth);
	        } else {
	            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);
	            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());
	        }
	        const x = _alignStartEnd(position, left, left + maxWidth);
	        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));
	        ctx.textBaseline = 'middle';
	        ctx.strokeStyle = titleOpts.color;
	        ctx.fillStyle = titleOpts.color;
	        ctx.font = titleFont.string;
	        renderText(ctx, titleOpts.text, x, y, titleFont);
	    }
	 _computeTitleHeight() {
	        const titleOpts = this.options.title;
	        const titleFont = toFont(titleOpts.font);
	        const titlePadding = toPadding(titleOpts.padding);
	        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
	    }
	 _getLegendItemAt(x, y) {
	        let i, hitBox, lh;
	        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {
	            lh = this.legendHitBoxes;
	            for(i = 0; i < lh.length; ++i){
	                hitBox = lh[i];
	                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {
	                    return this.legendItems[i];
	                }
	            }
	        }
	        return null;
	    }
	 handleEvent(e) {
	        const opts = this.options;
	        if (!isListened(e.type, opts)) {
	            return;
	        }
	        const hoveredItem = this._getLegendItemAt(e.x, e.y);
	        if (e.type === 'mousemove' || e.type === 'mouseout') {
	            const previous = this._hoveredItem;
	            const sameItem = itemsEqual(previous, hoveredItem);
	            if (previous && !sameItem) {
	                callback(opts.onLeave, [
	                    e,
	                    previous,
	                    this
	                ], this);
	            }
	            this._hoveredItem = hoveredItem;
	            if (hoveredItem && !sameItem) {
	                callback(opts.onHover, [
	                    e,
	                    hoveredItem,
	                    this
	                ], this);
	            }
	        } else if (hoveredItem) {
	            callback(opts.onClick, [
	                e,
	                hoveredItem,
	                this
	            ], this);
	        }
	    }
	}
	function calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {
	    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);
	    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);
	    return {
	        itemWidth,
	        itemHeight
	    };
	}
	function calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {
	    let legendItemText = legendItem.text;
	    if (legendItemText && typeof legendItemText !== 'string') {
	        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);
	    }
	    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;
	}
	function calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {
	    let itemHeight = _itemHeight;
	    if (typeof legendItem.text !== 'string') {
	        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);
	    }
	    return itemHeight;
	}
	function calculateLegendItemHeight(legendItem, fontLineHeight) {
	    const labelHeight = legendItem.text ? legendItem.text.length : 0;
	    return fontLineHeight * labelHeight;
	}
	function isListened(type, opts) {
	    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {
	        return true;
	    }
	    if (opts.onClick && (type === 'click' || type === 'mouseup')) {
	        return true;
	    }
	    return false;
	}
	var plugin_legend = {
	    id: 'legend',
	 _element: Legend,
	    start (chart, _args, options) {
	        const legend = chart.legend = new Legend({
	            ctx: chart.ctx,
	            options,
	            chart
	        });
	        layouts.configure(chart, legend, options);
	        layouts.addBox(chart, legend);
	    },
	    stop (chart) {
	        layouts.removeBox(chart, chart.legend);
	        delete chart.legend;
	    },
	    beforeUpdate (chart, _args, options) {
	        const legend = chart.legend;
	        layouts.configure(chart, legend, options);
	        legend.options = options;
	    },
	    afterUpdate (chart) {
	        const legend = chart.legend;
	        legend.buildLabels();
	        legend.adjustHitBoxes();
	    },
	    afterEvent (chart, args) {
	        if (!args.replay) {
	            chart.legend.handleEvent(args.event);
	        }
	    },
	    defaults: {
	        display: true,
	        position: 'top',
	        align: 'center',
	        fullSize: true,
	        reverse: false,
	        weight: 1000,
	        onClick (e, legendItem, legend) {
	            const index = legendItem.datasetIndex;
	            const ci = legend.chart;
	            if (ci.isDatasetVisible(index)) {
	                ci.hide(index);
	                legendItem.hidden = true;
	            } else {
	                ci.show(index);
	                legendItem.hidden = false;
	            }
	        },
	        onHover: null,
	        onLeave: null,
	        labels: {
	            color: (ctx)=>ctx.chart.options.color,
	            boxWidth: 40,
	            padding: 10,
	            generateLabels (chart) {
	                const datasets = chart.data.datasets;
	                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;
	                return chart._getSortedDatasetMetas().map((meta)=>{
	                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);
	                    const borderWidth = toPadding(style.borderWidth);
	                    return {
	                        text: datasets[meta.index].label,
	                        fillStyle: style.backgroundColor,
	                        fontColor: color,
	                        hidden: !meta.visible,
	                        lineCap: style.borderCapStyle,
	                        lineDash: style.borderDash,
	                        lineDashOffset: style.borderDashOffset,
	                        lineJoin: style.borderJoinStyle,
	                        lineWidth: (borderWidth.width + borderWidth.height) / 4,
	                        strokeStyle: style.borderColor,
	                        pointStyle: pointStyle || style.pointStyle,
	                        rotation: style.rotation,
	                        textAlign: textAlign || style.textAlign,
	                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),
	                        datasetIndex: meta.index
	                    };
	                }, this);
	            }
	        },
	        title: {
	            color: (ctx)=>ctx.chart.options.color,
	            display: false,
	            position: 'center',
	            text: ''
	        }
	    },
	    descriptors: {
	        _scriptable: (name)=>!name.startsWith('on'),
	        labels: {
	            _scriptable: (name)=>![
	                    'generateLabels',
	                    'filter',
	                    'sort'
	                ].includes(name)
	        }
	    }
	};

	class Title extends Element$1 {
	 constructor(config){
	        super();
	        this.chart = config.chart;
	        this.options = config.options;
	        this.ctx = config.ctx;
	        this._padding = undefined;
	        this.top = undefined;
	        this.bottom = undefined;
	        this.left = undefined;
	        this.right = undefined;
	        this.width = undefined;
	        this.height = undefined;
	        this.position = undefined;
	        this.weight = undefined;
	        this.fullSize = undefined;
	    }
	    update(maxWidth, maxHeight) {
	        const opts = this.options;
	        this.left = 0;
	        this.top = 0;
	        if (!opts.display) {
	            this.width = this.height = this.right = this.bottom = 0;
	            return;
	        }
	        this.width = this.right = maxWidth;
	        this.height = this.bottom = maxHeight;
	        const lineCount = isArray(opts.text) ? opts.text.length : 1;
	        this._padding = toPadding(opts.padding);
	        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;
	        if (this.isHorizontal()) {
	            this.height = textSize;
	        } else {
	            this.width = textSize;
	        }
	    }
	    isHorizontal() {
	        const pos = this.options.position;
	        return pos === 'top' || pos === 'bottom';
	    }
	    _drawArgs(offset) {
	        const { top , left , bottom , right , options  } = this;
	        const align = options.align;
	        let rotation = 0;
	        let maxWidth, titleX, titleY;
	        if (this.isHorizontal()) {
	            titleX = _alignStartEnd(align, left, right);
	            titleY = top + offset;
	            maxWidth = right - left;
	        } else {
	            if (options.position === 'left') {
	                titleX = left + offset;
	                titleY = _alignStartEnd(align, bottom, top);
	                rotation = PI * -0.5;
	            } else {
	                titleX = right - offset;
	                titleY = _alignStartEnd(align, top, bottom);
	                rotation = PI * 0.5;
	            }
	            maxWidth = bottom - top;
	        }
	        return {
	            titleX,
	            titleY,
	            maxWidth,
	            rotation
	        };
	    }
	    draw() {
	        const ctx = this.ctx;
	        const opts = this.options;
	        if (!opts.display) {
	            return;
	        }
	        const fontOpts = toFont(opts.font);
	        const lineHeight = fontOpts.lineHeight;
	        const offset = lineHeight / 2 + this._padding.top;
	        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);
	        renderText(ctx, opts.text, 0, 0, fontOpts, {
	            color: opts.color,
	            maxWidth,
	            rotation,
	            textAlign: _toLeftRightCenter(opts.align),
	            textBaseline: 'middle',
	            translation: [
	                titleX,
	                titleY
	            ]
	        });
	    }
	}
	function createTitle(chart, titleOpts) {
	    const title = new Title({
	        ctx: chart.ctx,
	        options: titleOpts,
	        chart
	    });
	    layouts.configure(chart, title, titleOpts);
	    layouts.addBox(chart, title);
	    chart.titleBlock = title;
	}
	var plugin_title = {
	    id: 'title',
	 _element: Title,
	    start (chart, _args, options) {
	        createTitle(chart, options);
	    },
	    stop (chart) {
	        const titleBlock = chart.titleBlock;
	        layouts.removeBox(chart, titleBlock);
	        delete chart.titleBlock;
	    },
	    beforeUpdate (chart, _args, options) {
	        const title = chart.titleBlock;
	        layouts.configure(chart, title, options);
	        title.options = options;
	    },
	    defaults: {
	        align: 'center',
	        display: false,
	        font: {
	            weight: 'bold'
	        },
	        fullSize: true,
	        padding: 10,
	        position: 'top',
	        text: '',
	        weight: 2000
	    },
	    defaultRoutes: {
	        color: 'color'
	    },
	    descriptors: {
	        _scriptable: true,
	        _indexable: false
	    }
	};

	const positioners$1 = {
	 average (items) {
	        if (!items.length) {
	            return false;
	        }
	        let i, len;
	        let xSet = new Set();
	        let y = 0;
	        let count = 0;
	        for(i = 0, len = items.length; i < len; ++i){
	            const el = items[i].element;
	            if (el && el.hasValue()) {
	                const pos = el.tooltipPosition();
	                xSet.add(pos.x);
	                y += pos.y;
	                ++count;
	            }
	        }
	        if (count === 0 || xSet.size === 0) {
	            return false;
	        }
	        const xAverage = [
	            ...xSet
	        ].reduce((a, b)=>a + b) / xSet.size;
	        return {
	            x: xAverage,
	            y: y / count
	        };
	    },
	 nearest (items, eventPosition) {
	        if (!items.length) {
	            return false;
	        }
	        let x = eventPosition.x;
	        let y = eventPosition.y;
	        let minDistance = Number.POSITIVE_INFINITY;
	        let i, len, nearestElement;
	        for(i = 0, len = items.length; i < len; ++i){
	            const el = items[i].element;
	            if (el && el.hasValue()) {
	                const center = el.getCenterPoint();
	                const d = distanceBetweenPoints(eventPosition, center);
	                if (d < minDistance) {
	                    minDistance = d;
	                    nearestElement = el;
	                }
	            }
	        }
	        if (nearestElement) {
	            const tp = nearestElement.tooltipPosition();
	            x = tp.x;
	            y = tp.y;
	        }
	        return {
	            x,
	            y
	        };
	    }
	};
	function pushOrConcat(base, toPush) {
	    if (toPush) {
	        if (isArray(toPush)) {
	            Array.prototype.push.apply(base, toPush);
	        } else {
	            base.push(toPush);
	        }
	    }
	    return base;
	}
	 function splitNewlines(str) {
	    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) {
	        return str.split('\n');
	    }
	    return str;
	}
	 function createTooltipItem(chart, item) {
	    const { element , datasetIndex , index  } = item;
	    const controller = chart.getDatasetMeta(datasetIndex).controller;
	    const { label , value  } = controller.getLabelAndValue(index);
	    return {
	        chart,
	        label,
	        parsed: controller.getParsed(index),
	        raw: chart.data.datasets[datasetIndex].data[index],
	        formattedValue: value,
	        dataset: controller.getDataset(),
	        dataIndex: index,
	        datasetIndex,
	        element
	    };
	}
	 function getTooltipSize(tooltip, options) {
	    const ctx = tooltip.chart.ctx;
	    const { body , footer , title  } = tooltip;
	    const { boxWidth , boxHeight  } = options;
	    const bodyFont = toFont(options.bodyFont);
	    const titleFont = toFont(options.titleFont);
	    const footerFont = toFont(options.footerFont);
	    const titleLineCount = title.length;
	    const footerLineCount = footer.length;
	    const bodyLineItemCount = body.length;
	    const padding = toPadding(options.padding);
	    let height = padding.height;
	    let width = 0;
	    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);
	    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
	    if (titleLineCount) {
	        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;
	    }
	    if (combinedBodyLength) {
	        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
	        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;
	    }
	    if (footerLineCount) {
	        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;
	    }
	    let widthPadding = 0;
	    const maxLineWidth = function(line) {
	        width = Math.max(width, ctx.measureText(line).width + widthPadding);
	    };
	    ctx.save();
	    ctx.font = titleFont.string;
	    each(tooltip.title, maxLineWidth);
	    ctx.font = bodyFont.string;
	    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
	    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;
	    each(body, (bodyItem)=>{
	        each(bodyItem.before, maxLineWidth);
	        each(bodyItem.lines, maxLineWidth);
	        each(bodyItem.after, maxLineWidth);
	    });
	    widthPadding = 0;
	    ctx.font = footerFont.string;
	    each(tooltip.footer, maxLineWidth);
	    ctx.restore();
	    width += padding.width;
	    return {
	        width,
	        height
	    };
	}
	function determineYAlign(chart, size) {
	    const { y , height  } = size;
	    if (y < height / 2) {
	        return 'top';
	    } else if (y > chart.height - height / 2) {
	        return 'bottom';
	    }
	    return 'center';
	}
	function doesNotFitWithAlign(xAlign, chart, options, size) {
	    const { x , width  } = size;
	    const caret = options.caretSize + options.caretPadding;
	    if (xAlign === 'left' && x + width + caret > chart.width) {
	        return true;
	    }
	    if (xAlign === 'right' && x - width - caret < 0) {
	        return true;
	    }
	}
	function determineXAlign(chart, options, size, yAlign) {
	    const { x , width  } = size;
	    const { width: chartWidth , chartArea: { left , right  }  } = chart;
	    let xAlign = 'center';
	    if (yAlign === 'center') {
	        xAlign = x <= (left + right) / 2 ? 'left' : 'right';
	    } else if (x <= width / 2) {
	        xAlign = 'left';
	    } else if (x >= chartWidth - width / 2) {
	        xAlign = 'right';
	    }
	    if (doesNotFitWithAlign(xAlign, chart, options, size)) {
	        xAlign = 'center';
	    }
	    return xAlign;
	}
	 function determineAlignment(chart, options, size) {
	    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);
	    return {
	        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),
	        yAlign
	    };
	}
	function alignX(size, xAlign) {
	    let { x , width  } = size;
	    if (xAlign === 'right') {
	        x -= width;
	    } else if (xAlign === 'center') {
	        x -= width / 2;
	    }
	    return x;
	}
	function alignY(size, yAlign, paddingAndSize) {
	    let { y , height  } = size;
	    if (yAlign === 'top') {
	        y += paddingAndSize;
	    } else if (yAlign === 'bottom') {
	        y -= height + paddingAndSize;
	    } else {
	        y -= height / 2;
	    }
	    return y;
	}
	 function getBackgroundPoint(options, size, alignment, chart) {
	    const { caretSize , caretPadding , cornerRadius  } = options;
	    const { xAlign , yAlign  } = alignment;
	    const paddingAndSize = caretSize + caretPadding;
	    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);
	    let x = alignX(size, xAlign);
	    const y = alignY(size, yAlign, paddingAndSize);
	    if (yAlign === 'center') {
	        if (xAlign === 'left') {
	            x += paddingAndSize;
	        } else if (xAlign === 'right') {
	            x -= paddingAndSize;
	        }
	    } else if (xAlign === 'left') {
	        x -= Math.max(topLeft, bottomLeft) + caretSize;
	    } else if (xAlign === 'right') {
	        x += Math.max(topRight, bottomRight) + caretSize;
	    }
	    return {
	        x: _limitValue(x, 0, chart.width - size.width),
	        y: _limitValue(y, 0, chart.height - size.height)
	    };
	}
	function getAlignedX(tooltip, align, options) {
	    const padding = toPadding(options.padding);
	    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;
	}
	 function getBeforeAfterBodyLines(callback) {
	    return pushOrConcat([], splitNewlines(callback));
	}
	function createTooltipContext(parent, tooltip, tooltipItems) {
	    return createContext(parent, {
	        tooltip,
	        tooltipItems,
	        type: 'tooltip'
	    });
	}
	function overrideCallbacks(callbacks, context) {
	    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
	    return override ? callbacks.override(override) : callbacks;
	}
	const defaultCallbacks = {
	    beforeTitle: noop,
	    title (tooltipItems) {
	        if (tooltipItems.length > 0) {
	            const item = tooltipItems[0];
	            const labels = item.chart.data.labels;
	            const labelCount = labels ? labels.length : 0;
	            if (this && this.options && this.options.mode === 'dataset') {
	                return item.dataset.label || '';
	            } else if (item.label) {
	                return item.label;
	            } else if (labelCount > 0 && item.dataIndex < labelCount) {
	                return labels[item.dataIndex];
	            }
	        }
	        return '';
	    },
	    afterTitle: noop,
	    beforeBody: noop,
	    beforeLabel: noop,
	    label (tooltipItem) {
	        if (this && this.options && this.options.mode === 'dataset') {
	            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;
	        }
	        let label = tooltipItem.dataset.label || '';
	        if (label) {
	            label += ': ';
	        }
	        const value = tooltipItem.formattedValue;
	        if (!isNullOrUndef(value)) {
	            label += value;
	        }
	        return label;
	    },
	    labelColor (tooltipItem) {
	        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
	        const options = meta.controller.getStyle(tooltipItem.dataIndex);
	        return {
	            borderColor: options.borderColor,
	            backgroundColor: options.backgroundColor,
	            borderWidth: options.borderWidth,
	            borderDash: options.borderDash,
	            borderDashOffset: options.borderDashOffset,
	            borderRadius: 0
	        };
	    },
	    labelTextColor () {
	        return this.options.bodyColor;
	    },
	    labelPointStyle (tooltipItem) {
	        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
	        const options = meta.controller.getStyle(tooltipItem.dataIndex);
	        return {
	            pointStyle: options.pointStyle,
	            rotation: options.rotation
	        };
	    },
	    afterLabel: noop,
	    afterBody: noop,
	    beforeFooter: noop,
	    footer: noop,
	    afterFooter: noop
	};
	 function invokeCallbackWithFallback(callbacks, name, ctx, arg) {
	    const result = callbacks[name].call(ctx, arg);
	    if (typeof result === 'undefined') {
	        return defaultCallbacks[name].call(ctx, arg);
	    }
	    return result;
	}
	class Tooltip extends Element$1 {
	 static positioners = positioners$1;
	    constructor(config){
	        super();
	        this.opacity = 0;
	        this._active = [];
	        this._eventPosition = undefined;
	        this._size = undefined;
	        this._cachedAnimations = undefined;
	        this._tooltipItems = [];
	        this.$animations = undefined;
	        this.$context = undefined;
	        this.chart = config.chart;
	        this.options = config.options;
	        this.dataPoints = undefined;
	        this.title = undefined;
	        this.beforeBody = undefined;
	        this.body = undefined;
	        this.afterBody = undefined;
	        this.footer = undefined;
	        this.xAlign = undefined;
	        this.yAlign = undefined;
	        this.x = undefined;
	        this.y = undefined;
	        this.height = undefined;
	        this.width = undefined;
	        this.caretX = undefined;
	        this.caretY = undefined;
	        this.labelColors = undefined;
	        this.labelPointStyles = undefined;
	        this.labelTextColors = undefined;
	    }
	    initialize(options) {
	        this.options = options;
	        this._cachedAnimations = undefined;
	        this.$context = undefined;
	    }
	 _resolveAnimations() {
	        const cached = this._cachedAnimations;
	        if (cached) {
	            return cached;
	        }
	        const chart = this.chart;
	        const options = this.options.setContext(this.getContext());
	        const opts = options.enabled && chart.options.animation && options.animations;
	        const animations = new Animations(this.chart, opts);
	        if (opts._cacheable) {
	            this._cachedAnimations = Object.freeze(animations);
	        }
	        return animations;
	    }
	 getContext() {
	        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));
	    }
	    getTitle(context, options) {
	        const { callbacks  } = options;
	        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);
	        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);
	        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);
	        let lines = [];
	        lines = pushOrConcat(lines, splitNewlines(beforeTitle));
	        lines = pushOrConcat(lines, splitNewlines(title));
	        lines = pushOrConcat(lines, splitNewlines(afterTitle));
	        return lines;
	    }
	    getBeforeBody(tooltipItems, options) {
	        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));
	    }
	    getBody(tooltipItems, options) {
	        const { callbacks  } = options;
	        const bodyItems = [];
	        each(tooltipItems, (context)=>{
	            const bodyItem = {
	                before: [],
	                lines: [],
	                after: []
	            };
	            const scoped = overrideCallbacks(callbacks, context);
	            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));
	            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));
	            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));
	            bodyItems.push(bodyItem);
	        });
	        return bodyItems;
	    }
	    getAfterBody(tooltipItems, options) {
	        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));
	    }
	    getFooter(tooltipItems, options) {
	        const { callbacks  } = options;
	        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);
	        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);
	        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);
	        let lines = [];
	        lines = pushOrConcat(lines, splitNewlines(beforeFooter));
	        lines = pushOrConcat(lines, splitNewlines(footer));
	        lines = pushOrConcat(lines, splitNewlines(afterFooter));
	        return lines;
	    }
	 _createItems(options) {
	        const active = this._active;
	        const data = this.chart.data;
	        const labelColors = [];
	        const labelPointStyles = [];
	        const labelTextColors = [];
	        let tooltipItems = [];
	        let i, len;
	        for(i = 0, len = active.length; i < len; ++i){
	            tooltipItems.push(createTooltipItem(this.chart, active[i]));
	        }
	        if (options.filter) {
	            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));
	        }
	        if (options.itemSort) {
	            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));
	        }
	        each(tooltipItems, (context)=>{
	            const scoped = overrideCallbacks(options.callbacks, context);
	            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));
	            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));
	            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));
	        });
	        this.labelColors = labelColors;
	        this.labelPointStyles = labelPointStyles;
	        this.labelTextColors = labelTextColors;
	        this.dataPoints = tooltipItems;
	        return tooltipItems;
	    }
	    update(changed, replay) {
	        const options = this.options.setContext(this.getContext());
	        const active = this._active;
	        let properties;
	        let tooltipItems = [];
	        if (!active.length) {
	            if (this.opacity !== 0) {
	                properties = {
	                    opacity: 0
	                };
	            }
	        } else {
	            const position = positioners$1[options.position].call(this, active, this._eventPosition);
	            tooltipItems = this._createItems(options);
	            this.title = this.getTitle(tooltipItems, options);
	            this.beforeBody = this.getBeforeBody(tooltipItems, options);
	            this.body = this.getBody(tooltipItems, options);
	            this.afterBody = this.getAfterBody(tooltipItems, options);
	            this.footer = this.getFooter(tooltipItems, options);
	            const size = this._size = getTooltipSize(this, options);
	            const positionAndSize = Object.assign({}, position, size);
	            const alignment = determineAlignment(this.chart, options, positionAndSize);
	            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);
	            this.xAlign = alignment.xAlign;
	            this.yAlign = alignment.yAlign;
	            properties = {
	                opacity: 1,
	                x: backgroundPoint.x,
	                y: backgroundPoint.y,
	                width: size.width,
	                height: size.height,
	                caretX: position.x,
	                caretY: position.y
	            };
	        }
	        this._tooltipItems = tooltipItems;
	        this.$context = undefined;
	        if (properties) {
	            this._resolveAnimations().update(this, properties);
	        }
	        if (changed && options.external) {
	            options.external.call(this, {
	                chart: this.chart,
	                tooltip: this,
	                replay
	            });
	        }
	    }
	    drawCaret(tooltipPoint, ctx, size, options) {
	        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);
	        ctx.lineTo(caretPosition.x1, caretPosition.y1);
	        ctx.lineTo(caretPosition.x2, caretPosition.y2);
	        ctx.lineTo(caretPosition.x3, caretPosition.y3);
	    }
	    getCaretPosition(tooltipPoint, size, options) {
	        const { xAlign , yAlign  } = this;
	        const { caretSize , cornerRadius  } = options;
	        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);
	        const { x: ptX , y: ptY  } = tooltipPoint;
	        const { width , height  } = size;
	        let x1, x2, x3, y1, y2, y3;
	        if (yAlign === 'center') {
	            y2 = ptY + height / 2;
	            if (xAlign === 'left') {
	                x1 = ptX;
	                x2 = x1 - caretSize;
	                y1 = y2 + caretSize;
	                y3 = y2 - caretSize;
	            } else {
	                x1 = ptX + width;
	                x2 = x1 + caretSize;
	                y1 = y2 - caretSize;
	                y3 = y2 + caretSize;
	            }
	            x3 = x1;
	        } else {
	            if (xAlign === 'left') {
	                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;
	            } else if (xAlign === 'right') {
	                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;
	            } else {
	                x2 = this.caretX;
	            }
	            if (yAlign === 'top') {
	                y1 = ptY;
	                y2 = y1 - caretSize;
	                x1 = x2 - caretSize;
	                x3 = x2 + caretSize;
	            } else {
	                y1 = ptY + height;
	                y2 = y1 + caretSize;
	                x1 = x2 + caretSize;
	                x3 = x2 - caretSize;
	            }
	            y3 = y1;
	        }
	        return {
	            x1,
	            x2,
	            x3,
	            y1,
	            y2,
	            y3
	        };
	    }
	    drawTitle(pt, ctx, options) {
	        const title = this.title;
	        const length = title.length;
	        let titleFont, titleSpacing, i;
	        if (length) {
	            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
	            pt.x = getAlignedX(this, options.titleAlign, options);
	            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);
	            ctx.textBaseline = 'middle';
	            titleFont = toFont(options.titleFont);
	            titleSpacing = options.titleSpacing;
	            ctx.fillStyle = options.titleColor;
	            ctx.font = titleFont.string;
	            for(i = 0; i < length; ++i){
	                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);
	                pt.y += titleFont.lineHeight + titleSpacing;
	                if (i + 1 === length) {
	                    pt.y += options.titleMarginBottom - titleSpacing;
	                }
	            }
	        }
	    }
	 _drawColorBox(ctx, pt, i, rtlHelper, options) {
	        const labelColor = this.labelColors[i];
	        const labelPointStyle = this.labelPointStyles[i];
	        const { boxHeight , boxWidth  } = options;
	        const bodyFont = toFont(options.bodyFont);
	        const colorX = getAlignedX(this, 'left', options);
	        const rtlColorX = rtlHelper.x(colorX);
	        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
	        const colorY = pt.y + yOffSet;
	        if (options.usePointStyle) {
	            const drawOptions = {
	                radius: Math.min(boxWidth, boxHeight) / 2,
	                pointStyle: labelPointStyle.pointStyle,
	                rotation: labelPointStyle.rotation,
	                borderWidth: 1
	            };
	            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
	            const centerY = colorY + boxHeight / 2;
	            ctx.strokeStyle = options.multiKeyBackground;
	            ctx.fillStyle = options.multiKeyBackground;
	            drawPoint$1(ctx, drawOptions, centerX, centerY);
	            ctx.strokeStyle = labelColor.borderColor;
	            ctx.fillStyle = labelColor.backgroundColor;
	            drawPoint$1(ctx, drawOptions, centerX, centerY);
	        } else {
	            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;
	            ctx.strokeStyle = labelColor.borderColor;
	            ctx.setLineDash(labelColor.borderDash || []);
	            ctx.lineDashOffset = labelColor.borderDashOffset || 0;
	            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);
	            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);
	            const borderRadius = toTRBLCorners(labelColor.borderRadius);
	            if (Object.values(borderRadius).some((v)=>v !== 0)) {
	                ctx.beginPath();
	                ctx.fillStyle = options.multiKeyBackground;
	                addRoundedRectPath(ctx, {
	                    x: outerX,
	                    y: colorY,
	                    w: boxWidth,
	                    h: boxHeight,
	                    radius: borderRadius
	                });
	                ctx.fill();
	                ctx.stroke();
	                ctx.fillStyle = labelColor.backgroundColor;
	                ctx.beginPath();
	                addRoundedRectPath(ctx, {
	                    x: innerX,
	                    y: colorY + 1,
	                    w: boxWidth - 2,
	                    h: boxHeight - 2,
	                    radius: borderRadius
	                });
	                ctx.fill();
	            } else {
	                ctx.fillStyle = options.multiKeyBackground;
	                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
	                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
	                ctx.fillStyle = labelColor.backgroundColor;
	                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
	            }
	        }
	        ctx.fillStyle = this.labelTextColors[i];
	    }
	    drawBody(pt, ctx, options) {
	        const { body  } = this;
	        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;
	        const bodyFont = toFont(options.bodyFont);
	        let bodyLineHeight = bodyFont.lineHeight;
	        let xLinePadding = 0;
	        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
	        const fillLineOfText = function(line) {
	            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);
	            pt.y += bodyLineHeight + bodySpacing;
	        };
	        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
	        let bodyItem, textColor, lines, i, j, ilen, jlen;
	        ctx.textAlign = bodyAlign;
	        ctx.textBaseline = 'middle';
	        ctx.font = bodyFont.string;
	        pt.x = getAlignedX(this, bodyAlignForCalculation, options);
	        ctx.fillStyle = options.bodyColor;
	        each(this.beforeBody, fillLineOfText);
	        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;
	        for(i = 0, ilen = body.length; i < ilen; ++i){
	            bodyItem = body[i];
	            textColor = this.labelTextColors[i];
	            ctx.fillStyle = textColor;
	            each(bodyItem.before, fillLineOfText);
	            lines = bodyItem.lines;
	            if (displayColors && lines.length) {
	                this._drawColorBox(ctx, pt, i, rtlHelper, options);
	                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
	            }
	            for(j = 0, jlen = lines.length; j < jlen; ++j){
	                fillLineOfText(lines[j]);
	                bodyLineHeight = bodyFont.lineHeight;
	            }
	            each(bodyItem.after, fillLineOfText);
	        }
	        xLinePadding = 0;
	        bodyLineHeight = bodyFont.lineHeight;
	        each(this.afterBody, fillLineOfText);
	        pt.y -= bodySpacing;
	    }
	    drawFooter(pt, ctx, options) {
	        const footer = this.footer;
	        const length = footer.length;
	        let footerFont, i;
	        if (length) {
	            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
	            pt.x = getAlignedX(this, options.footerAlign, options);
	            pt.y += options.footerMarginTop;
	            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);
	            ctx.textBaseline = 'middle';
	            footerFont = toFont(options.footerFont);
	            ctx.fillStyle = options.footerColor;
	            ctx.font = footerFont.string;
	            for(i = 0; i < length; ++i){
	                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);
	                pt.y += footerFont.lineHeight + options.footerSpacing;
	            }
	        }
	    }
	    drawBackground(pt, ctx, tooltipSize, options) {
	        const { xAlign , yAlign  } = this;
	        const { x , y  } = pt;
	        const { width , height  } = tooltipSize;
	        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);
	        ctx.fillStyle = options.backgroundColor;
	        ctx.strokeStyle = options.borderColor;
	        ctx.lineWidth = options.borderWidth;
	        ctx.beginPath();
	        ctx.moveTo(x + topLeft, y);
	        if (yAlign === 'top') {
	            this.drawCaret(pt, ctx, tooltipSize, options);
	        }
	        ctx.lineTo(x + width - topRight, y);
	        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);
	        if (yAlign === 'center' && xAlign === 'right') {
	            this.drawCaret(pt, ctx, tooltipSize, options);
	        }
	        ctx.lineTo(x + width, y + height - bottomRight);
	        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);
	        if (yAlign === 'bottom') {
	            this.drawCaret(pt, ctx, tooltipSize, options);
	        }
	        ctx.lineTo(x + bottomLeft, y + height);
	        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);
	        if (yAlign === 'center' && xAlign === 'left') {
	            this.drawCaret(pt, ctx, tooltipSize, options);
	        }
	        ctx.lineTo(x, y + topLeft);
	        ctx.quadraticCurveTo(x, y, x + topLeft, y);
	        ctx.closePath();
	        ctx.fill();
	        if (options.borderWidth > 0) {
	            ctx.stroke();
	        }
	    }
	 _updateAnimationTarget(options) {
	        const chart = this.chart;
	        const anims = this.$animations;
	        const animX = anims && anims.x;
	        const animY = anims && anims.y;
	        if (animX || animY) {
	            const position = positioners$1[options.position].call(this, this._active, this._eventPosition);
	            if (!position) {
	                return;
	            }
	            const size = this._size = getTooltipSize(this, options);
	            const positionAndSize = Object.assign({}, position, this._size);
	            const alignment = determineAlignment(chart, options, positionAndSize);
	            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);
	            if (animX._to !== point.x || animY._to !== point.y) {
	                this.xAlign = alignment.xAlign;
	                this.yAlign = alignment.yAlign;
	                this.width = size.width;
	                this.height = size.height;
	                this.caretX = position.x;
	                this.caretY = position.y;
	                this._resolveAnimations().update(this, point);
	            }
	        }
	    }
	 _willRender() {
	        return !!this.opacity;
	    }
	    draw(ctx) {
	        const options = this.options.setContext(this.getContext());
	        let opacity = this.opacity;
	        if (!opacity) {
	            return;
	        }
	        this._updateAnimationTarget(options);
	        const tooltipSize = {
	            width: this.width,
	            height: this.height
	        };
	        const pt = {
	            x: this.x,
	            y: this.y
	        };
	        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
	        const padding = toPadding(options.padding);
	        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
	        if (options.enabled && hasTooltipContent) {
	            ctx.save();
	            ctx.globalAlpha = opacity;
	            this.drawBackground(pt, ctx, tooltipSize, options);
	            overrideTextDirection(ctx, options.textDirection);
	            pt.y += padding.top;
	            this.drawTitle(pt, ctx, options);
	            this.drawBody(pt, ctx, options);
	            this.drawFooter(pt, ctx, options);
	            restoreTextDirection(ctx, options.textDirection);
	            ctx.restore();
	        }
	    }
	 getActiveElements() {
	        return this._active || [];
	    }
	 setActiveElements(activeElements, eventPosition) {
	        const lastActive = this._active;
	        const active = activeElements.map(({ datasetIndex , index  })=>{
	            const meta = this.chart.getDatasetMeta(datasetIndex);
	            if (!meta) {
	                throw new Error('Cannot find a dataset at index ' + datasetIndex);
	            }
	            return {
	                datasetIndex,
	                element: meta.data[index],
	                index
	            };
	        });
	        const changed = !_elementsEqual(lastActive, active);
	        const positionChanged = this._positionChanged(active, eventPosition);
	        if (changed || positionChanged) {
	            this._active = active;
	            this._eventPosition = eventPosition;
	            this._ignoreReplayEvents = true;
	            this.update(true);
	        }
	    }
	 handleEvent(e, replay, inChartArea = true) {
	        if (replay && this._ignoreReplayEvents) {
	            return false;
	        }
	        this._ignoreReplayEvents = false;
	        const options = this.options;
	        const lastActive = this._active || [];
	        const active = this._getActiveElements(e, lastActive, replay, inChartArea);
	        const positionChanged = this._positionChanged(active, e);
	        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;
	        if (changed) {
	            this._active = active;
	            if (options.enabled || options.external) {
	                this._eventPosition = {
	                    x: e.x,
	                    y: e.y
	                };
	                this.update(true, replay);
	            }
	        }
	        return changed;
	    }
	 _getActiveElements(e, lastActive, replay, inChartArea) {
	        const options = this.options;
	        if (e.type === 'mouseout') {
	            return [];
	        }
	        if (!inChartArea) {
	            return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);
	        }
	        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);
	        if (options.reverse) {
	            active.reverse();
	        }
	        return active;
	    }
	 _positionChanged(active, e) {
	        const { caretX , caretY , options  } = this;
	        const position = positioners$1[options.position].call(this, active, e);
	        return position !== false && (caretX !== position.x || caretY !== position.y);
	    }
	}
	var plugin_tooltip = {
	    id: 'tooltip',
	    _element: Tooltip,
	    positioners: positioners$1,
	    afterInit (chart, _args, options) {
	        if (options) {
	            chart.tooltip = new Tooltip({
	                chart,
	                options
	            });
	        }
	    },
	    beforeUpdate (chart, _args, options) {
	        if (chart.tooltip) {
	            chart.tooltip.initialize(options);
	        }
	    },
	    reset (chart, _args, options) {
	        if (chart.tooltip) {
	            chart.tooltip.initialize(options);
	        }
	    },
	    afterDraw (chart) {
	        const tooltip = chart.tooltip;
	        if (tooltip && tooltip._willRender()) {
	            const args = {
	                tooltip
	            };
	            if (chart.notifyPlugins('beforeTooltipDraw', {
	                ...args,
	                cancelable: true
	            }) === false) {
	                return;
	            }
	            tooltip.draw(chart.ctx);
	            chart.notifyPlugins('afterTooltipDraw', args);
	        }
	    },
	    afterEvent (chart, args) {
	        if (chart.tooltip) {
	            const useFinalPosition = args.replay;
	            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {
	                args.changed = true;
	            }
	        }
	    },
	    defaults: {
	        enabled: true,
	        external: null,
	        position: 'average',
	        backgroundColor: 'rgba(0,0,0,0.8)',
	        titleColor: '#fff',
	        titleFont: {
	            weight: 'bold'
	        },
	        titleSpacing: 2,
	        titleMarginBottom: 6,
	        titleAlign: 'left',
	        bodyColor: '#fff',
	        bodySpacing: 2,
	        bodyFont: {},
	        bodyAlign: 'left',
	        footerColor: '#fff',
	        footerSpacing: 2,
	        footerMarginTop: 6,
	        footerFont: {
	            weight: 'bold'
	        },
	        footerAlign: 'left',
	        padding: 6,
	        caretPadding: 2,
	        caretSize: 5,
	        cornerRadius: 6,
	        boxHeight: (ctx, opts)=>opts.bodyFont.size,
	        boxWidth: (ctx, opts)=>opts.bodyFont.size,
	        multiKeyBackground: '#fff',
	        displayColors: true,
	        boxPadding: 0,
	        borderColor: 'rgba(0,0,0,0)',
	        borderWidth: 0,
	        animation: {
	            duration: 400,
	            easing: 'easeOutQuart'
	        },
	        animations: {
	            numbers: {
	                type: 'number',
	                properties: [
	                    'x',
	                    'y',
	                    'width',
	                    'height',
	                    'caretX',
	                    'caretY'
	                ]
	            },
	            opacity: {
	                easing: 'linear',
	                duration: 200
	            }
	        },
	        callbacks: defaultCallbacks
	    },
	    defaultRoutes: {
	        bodyFont: 'font',
	        footerFont: 'font',
	        titleFont: 'font'
	    },
	    descriptors: {
	        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',
	        _indexable: false,
	        callbacks: {
	            _scriptable: false,
	            _indexable: false
	        },
	        animation: {
	            _fallback: false
	        },
	        animations: {
	            _fallback: 'animation'
	        }
	    },
	    additionalOptionScopes: [
	        'interaction'
	    ]
	};

	const addIfString = (labels, raw, index, addedLabels)=>{
	    if (typeof raw === 'string') {
	        index = labels.push(raw) - 1;
	        addedLabels.unshift({
	            index,
	            label: raw
	        });
	    } else if (isNaN(raw)) {
	        index = null;
	    }
	    return index;
	};
	function findOrAddLabel(labels, raw, index, addedLabels) {
	    const first = labels.indexOf(raw);
	    if (first === -1) {
	        return addIfString(labels, raw, index, addedLabels);
	    }
	    const last = labels.lastIndexOf(raw);
	    return first !== last ? index : first;
	}
	const validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);
	function _getLabelForValue(value) {
	    const labels = this.getLabels();
	    if (value >= 0 && value < labels.length) {
	        return labels[value];
	    }
	    return value;
	}
	class CategoryScale extends Scale {
	    static id = 'category';
	 static defaults = {
	        ticks: {
	            callback: _getLabelForValue
	        }
	    };
	    constructor(cfg){
	        super(cfg);
	         this._startValue = undefined;
	        this._valueRange = 0;
	        this._addedLabels = [];
	    }
	    init(scaleOptions) {
	        const added = this._addedLabels;
	        if (added.length) {
	            const labels = this.getLabels();
	            for (const { index , label  } of added){
	                if (labels[index] === label) {
	                    labels.splice(index, 1);
	                }
	            }
	            this._addedLabels = [];
	        }
	        super.init(scaleOptions);
	    }
	    parse(raw, index) {
	        if (isNullOrUndef(raw)) {
	            return null;
	        }
	        const labels = this.getLabels();
	        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);
	        return validIndex(index, labels.length - 1);
	    }
	    determineDataLimits() {
	        const { minDefined , maxDefined  } = this.getUserBounds();
	        let { min , max  } = this.getMinMax(true);
	        if (this.options.bounds === 'ticks') {
	            if (!minDefined) {
	                min = 0;
	            }
	            if (!maxDefined) {
	                max = this.getLabels().length - 1;
	            }
	        }
	        this.min = min;
	        this.max = max;
	    }
	    buildTicks() {
	        const min = this.min;
	        const max = this.max;
	        const offset = this.options.offset;
	        const ticks = [];
	        let labels = this.getLabels();
	        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);
	        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
	        this._startValue = this.min - (offset ? 0.5 : 0);
	        for(let value = min; value <= max; value++){
	            ticks.push({
	                value
	            });
	        }
	        return ticks;
	    }
	    getLabelForValue(value) {
	        return _getLabelForValue.call(this, value);
	    }
	 configure() {
	        super.configure();
	        if (!this.isHorizontal()) {
	            this._reversePixels = !this._reversePixels;
	        }
	    }
	    getPixelForValue(value) {
	        if (typeof value !== 'number') {
	            value = this.parse(value);
	        }
	        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
	    }
	    getPixelForTick(index) {
	        const ticks = this.ticks;
	        if (index < 0 || index > ticks.length - 1) {
	            return null;
	        }
	        return this.getPixelForValue(ticks[index].value);
	    }
	    getValueForPixel(pixel) {
	        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);
	    }
	    getBasePixel() {
	        return this.bottom;
	    }
	}

	function generateTicks$1(generationOptions, dataRange) {
	    const ticks = [];
	    const MIN_SPACING = 1e-14;
	    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;
	    const unit = step || 1;
	    const maxSpaces = maxTicks - 1;
	    const { min: rmin , max: rmax  } = dataRange;
	    const minDefined = !isNullOrUndef(min);
	    const maxDefined = !isNullOrUndef(max);
	    const countDefined = !isNullOrUndef(count);
	    const minSpacing = (rmax - rmin) / (maxDigits + 1);
	    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;
	    let factor, niceMin, niceMax, numSpaces;
	    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {
	        return [
	            {
	                value: rmin
	            },
	            {
	                value: rmax
	            }
	        ];
	    }
	    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
	    if (numSpaces > maxSpaces) {
	        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;
	    }
	    if (!isNullOrUndef(precision)) {
	        factor = Math.pow(10, precision);
	        spacing = Math.ceil(spacing * factor) / factor;
	    }
	    if (bounds === 'ticks') {
	        niceMin = Math.floor(rmin / spacing) * spacing;
	        niceMax = Math.ceil(rmax / spacing) * spacing;
	    } else {
	        niceMin = rmin;
	        niceMax = rmax;
	    }
	    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {
	        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));
	        spacing = (max - min) / numSpaces;
	        niceMin = min;
	        niceMax = max;
	    } else if (countDefined) {
	        niceMin = minDefined ? min : niceMin;
	        niceMax = maxDefined ? max : niceMax;
	        numSpaces = count - 1;
	        spacing = (niceMax - niceMin) / numSpaces;
	    } else {
	        numSpaces = (niceMax - niceMin) / spacing;
	        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
	            numSpaces = Math.round(numSpaces);
	        } else {
	            numSpaces = Math.ceil(numSpaces);
	        }
	    }
	    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));
	    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);
	    niceMin = Math.round(niceMin * factor) / factor;
	    niceMax = Math.round(niceMax * factor) / factor;
	    let j = 0;
	    if (minDefined) {
	        if (includeBounds && niceMin !== min) {
	            ticks.push({
	                value: min
	            });
	            if (niceMin < min) {
	                j++;
	            }
	            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {
	                j++;
	            }
	        } else if (niceMin < min) {
	            j++;
	        }
	    }
	    for(; j < numSpaces; ++j){
	        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;
	        if (maxDefined && tickValue > max) {
	            break;
	        }
	        ticks.push({
	            value: tickValue
	        });
	    }
	    if (maxDefined && includeBounds && niceMax !== max) {
	        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {
	            ticks[ticks.length - 1].value = max;
	        } else {
	            ticks.push({
	                value: max
	            });
	        }
	    } else if (!maxDefined || niceMax === max) {
	        ticks.push({
	            value: niceMax
	        });
	    }
	    return ticks;
	}
	function relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {
	    const rad = toRadians(minRotation);
	    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;
	    const length = 0.75 * minSpacing * ('' + value).length;
	    return Math.min(minSpacing / ratio, length);
	}
	class LinearScaleBase extends Scale {
	    constructor(cfg){
	        super(cfg);
	         this.start = undefined;
	         this.end = undefined;
	         this._startValue = undefined;
	         this._endValue = undefined;
	        this._valueRange = 0;
	    }
	    parse(raw, index) {
	        if (isNullOrUndef(raw)) {
	            return null;
	        }
	        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {
	            return null;
	        }
	        return +raw;
	    }
	    handleTickRangeOptions() {
	        const { beginAtZero  } = this.options;
	        const { minDefined , maxDefined  } = this.getUserBounds();
	        let { min , max  } = this;
	        const setMin = (v)=>min = minDefined ? min : v;
	        const setMax = (v)=>max = maxDefined ? max : v;
	        if (beginAtZero) {
	            const minSign = sign(min);
	            const maxSign = sign(max);
	            if (minSign < 0 && maxSign < 0) {
	                setMax(0);
	            } else if (minSign > 0 && maxSign > 0) {
	                setMin(0);
	            }
	        }
	        if (min === max) {
	            let offset = max === 0 ? 1 : Math.abs(max * 0.05);
	            setMax(max + offset);
	            if (!beginAtZero) {
	                setMin(min - offset);
	            }
	        }
	        this.min = min;
	        this.max = max;
	    }
	    getTickLimit() {
	        const tickOpts = this.options.ticks;
	        let { maxTicksLimit , stepSize  } = tickOpts;
	        let maxTicks;
	        if (stepSize) {
	            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;
	            if (maxTicks > 1000) {
	                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);
	                maxTicks = 1000;
	            }
	        } else {
	            maxTicks = this.computeTickLimit();
	            maxTicksLimit = maxTicksLimit || 11;
	        }
	        if (maxTicksLimit) {
	            maxTicks = Math.min(maxTicksLimit, maxTicks);
	        }
	        return maxTicks;
	    }
	 computeTickLimit() {
	        return Number.POSITIVE_INFINITY;
	    }
	    buildTicks() {
	        const opts = this.options;
	        const tickOpts = opts.ticks;
	        let maxTicks = this.getTickLimit();
	        maxTicks = Math.max(2, maxTicks);
	        const numericGeneratorOptions = {
	            maxTicks,
	            bounds: opts.bounds,
	            min: opts.min,
	            max: opts.max,
	            precision: tickOpts.precision,
	            step: tickOpts.stepSize,
	            count: tickOpts.count,
	            maxDigits: this._maxDigits(),
	            horizontal: this.isHorizontal(),
	            minRotation: tickOpts.minRotation || 0,
	            includeBounds: tickOpts.includeBounds !== false
	        };
	        const dataRange = this._range || this;
	        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);
	        if (opts.bounds === 'ticks') {
	            _setMinAndMaxByKey(ticks, this, 'value');
	        }
	        if (opts.reverse) {
	            ticks.reverse();
	            this.start = this.max;
	            this.end = this.min;
	        } else {
	            this.start = this.min;
	            this.end = this.max;
	        }
	        return ticks;
	    }
	 configure() {
	        const ticks = this.ticks;
	        let start = this.min;
	        let end = this.max;
	        super.configure();
	        if (this.options.offset && ticks.length) {
	            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
	            start -= offset;
	            end += offset;
	        }
	        this._startValue = start;
	        this._endValue = end;
	        this._valueRange = end - start;
	    }
	    getLabelForValue(value) {
	        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);
	    }
	}

	class LinearScale extends LinearScaleBase {
	    static id = 'linear';
	 static defaults = {
	        ticks: {
	            callback: Ticks.formatters.numeric
	        }
	    };
	    determineDataLimits() {
	        const { min , max  } = this.getMinMax(true);
	        this.min = isNumberFinite(min) ? min : 0;
	        this.max = isNumberFinite(max) ? max : 1;
	        this.handleTickRangeOptions();
	    }
	 computeTickLimit() {
	        const horizontal = this.isHorizontal();
	        const length = horizontal ? this.width : this.height;
	        const minRotation = toRadians(this.options.ticks.minRotation);
	        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;
	        const tickFont = this._resolveTickFontOptions(0);
	        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));
	    }
	    getPixelForValue(value) {
	        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
	    }
	    getValueForPixel(pixel) {
	        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
	    }
	}

	const INTERVALS = {
	    millisecond: {
	        common: true,
	        size: 1,
	        steps: 1000
	    },
	    second: {
	        common: true,
	        size: 1000,
	        steps: 60
	    },
	    minute: {
	        common: true,
	        size: 60000,
	        steps: 60
	    },
	    hour: {
	        common: true,
	        size: 3600000,
	        steps: 24
	    },
	    day: {
	        common: true,
	        size: 86400000,
	        steps: 30
	    },
	    week: {
	        common: false,
	        size: 604800000,
	        steps: 4
	    },
	    month: {
	        common: true,
	        size: 2.628e9,
	        steps: 12
	    },
	    quarter: {
	        common: false,
	        size: 7.884e9,
	        steps: 4
	    },
	    year: {
	        common: true,
	        size: 3.154e10
	    }
	};
	 const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);
	 function sorter(a, b) {
	    return a - b;
	}
	 function parse(scale, input) {
	    if (isNullOrUndef(input)) {
	        return null;
	    }
	    const adapter = scale._adapter;
	    const { parser , round , isoWeekday  } = scale._parseOpts;
	    let value = input;
	    if (typeof parser === 'function') {
	        value = parser(value);
	    }
	    if (!isNumberFinite(value)) {
	        value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);
	    }
	    if (value === null) {
	        return null;
	    }
	    if (round) {
	        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);
	    }
	    return +value;
	}
	 function determineUnitForAutoTicks(minUnit, min, max, capacity) {
	    const ilen = UNITS.length;
	    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){
	        const interval = INTERVALS[UNITS[i]];
	        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
	        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
	            return UNITS[i];
	        }
	    }
	    return UNITS[ilen - 1];
	}
	 function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
	    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){
	        const unit = UNITS[i];
	        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
	            return unit;
	        }
	    }
	    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
	}
	 function determineMajorUnit(unit) {
	    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){
	        if (INTERVALS[UNITS[i]].common) {
	            return UNITS[i];
	        }
	    }
	}
	 function addTick(ticks, time, timestamps) {
	    if (!timestamps) {
	        ticks[time] = true;
	    } else if (timestamps.length) {
	        const { lo , hi  } = _lookup(timestamps, time);
	        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];
	        ticks[timestamp] = true;
	    }
	}
	 function setMajorTicks(scale, ticks, map, majorUnit) {
	    const adapter = scale._adapter;
	    const first = +adapter.startOf(ticks[0].value, majorUnit);
	    const last = ticks[ticks.length - 1].value;
	    let major, index;
	    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){
	        index = map[major];
	        if (index >= 0) {
	            ticks[index].major = true;
	        }
	    }
	    return ticks;
	}
	 function ticksFromTimestamps(scale, values, majorUnit) {
	    const ticks = [];
	     const map = {};
	    const ilen = values.length;
	    let i, value;
	    for(i = 0; i < ilen; ++i){
	        value = values[i];
	        map[value] = i;
	        ticks.push({
	            value,
	            major: false
	        });
	    }
	    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
	}
	class TimeScale extends Scale {
	    static id = 'time';
	 static defaults = {
	 bounds: 'data',
	        adapters: {},
	        time: {
	            parser: false,
	            unit: false,
	            round: false,
	            isoWeekday: false,
	            minUnit: 'millisecond',
	            displayFormats: {}
	        },
	        ticks: {
	 source: 'auto',
	            callback: false,
	            major: {
	                enabled: false
	            }
	        }
	    };
	 constructor(props){
	        super(props);
	         this._cache = {
	            data: [],
	            labels: [],
	            all: []
	        };
	         this._unit = 'day';
	         this._majorUnit = undefined;
	        this._offsets = {};
	        this._normalized = false;
	        this._parseOpts = undefined;
	    }
	    init(scaleOpts, opts = {}) {
	        const time = scaleOpts.time || (scaleOpts.time = {});
	         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);
	        adapter.init(opts);
	        mergeIf(time.displayFormats, adapter.formats());
	        this._parseOpts = {
	            parser: time.parser,
	            round: time.round,
	            isoWeekday: time.isoWeekday
	        };
	        super.init(scaleOpts);
	        this._normalized = opts.normalized;
	    }
	 parse(raw, index) {
	        if (raw === undefined) {
	            return null;
	        }
	        return parse(this, raw);
	    }
	    beforeLayout() {
	        super.beforeLayout();
	        this._cache = {
	            data: [],
	            labels: [],
	            all: []
	        };
	    }
	    determineDataLimits() {
	        const options = this.options;
	        const adapter = this._adapter;
	        const unit = options.time.unit || 'day';
	        let { min , max , minDefined , maxDefined  } = this.getUserBounds();
	 function _applyBounds(bounds) {
	            if (!minDefined && !isNaN(bounds.min)) {
	                min = Math.min(min, bounds.min);
	            }
	            if (!maxDefined && !isNaN(bounds.max)) {
	                max = Math.max(max, bounds.max);
	            }
	        }
	        if (!minDefined || !maxDefined) {
	            _applyBounds(this._getLabelBounds());
	            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {
	                _applyBounds(this.getMinMax(false));
	            }
	        }
	        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);
	        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;
	        this.min = Math.min(min, max - 1);
	        this.max = Math.max(min + 1, max);
	    }
	 _getLabelBounds() {
	        const arr = this.getLabelTimestamps();
	        let min = Number.POSITIVE_INFINITY;
	        let max = Number.NEGATIVE_INFINITY;
	        if (arr.length) {
	            min = arr[0];
	            max = arr[arr.length - 1];
	        }
	        return {
	            min,
	            max
	        };
	    }
	 buildTicks() {
	        const options = this.options;
	        const timeOpts = options.time;
	        const tickOpts = options.ticks;
	        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();
	        if (options.bounds === 'ticks' && timestamps.length) {
	            this.min = this._userMin || timestamps[0];
	            this.max = this._userMax || timestamps[timestamps.length - 1];
	        }
	        const min = this.min;
	        const max = this.max;
	        const ticks = _filterBetween(timestamps, min, max);
	        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));
	        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);
	        this.initOffsets(timestamps);
	        if (options.reverse) {
	            ticks.reverse();
	        }
	        return ticksFromTimestamps(this, ticks, this._majorUnit);
	    }
	    afterAutoSkip() {
	        if (this.options.offsetAfterAutoskip) {
	            this.initOffsets(this.ticks.map((tick)=>+tick.value));
	        }
	    }
	 initOffsets(timestamps = []) {
	        let start = 0;
	        let end = 0;
	        let first, last;
	        if (this.options.offset && timestamps.length) {
	            first = this.getDecimalForValue(timestamps[0]);
	            if (timestamps.length === 1) {
	                start = 1 - first;
	            } else {
	                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;
	            }
	            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);
	            if (timestamps.length === 1) {
	                end = last;
	            } else {
	                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
	            }
	        }
	        const limit = timestamps.length < 3 ? 0.5 : 0.25;
	        start = _limitValue(start, 0, limit);
	        end = _limitValue(end, 0, limit);
	        this._offsets = {
	            start,
	            end,
	            factor: 1 / (start + 1 + end)
	        };
	    }
	 _generate() {
	        const adapter = this._adapter;
	        const min = this.min;
	        const max = this.max;
	        const options = this.options;
	        const timeOpts = options.time;
	        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));
	        const stepSize = valueOrDefault(options.ticks.stepSize, 1);
	        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;
	        const hasWeekday = isNumber(weekday) || weekday === true;
	        const ticks = {};
	        let first = min;
	        let time, count;
	        if (hasWeekday) {
	            first = +adapter.startOf(first, 'isoWeek', weekday);
	        }
	        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);
	        if (adapter.diff(max, min, minor) > 100000 * stepSize) {
	            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);
	        }
	        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();
	        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){
	            addTick(ticks, time, timestamps);
	        }
	        if (time === max || options.bounds === 'ticks' || count === 1) {
	            addTick(ticks, time, timestamps);
	        }
	        return Object.keys(ticks).sort(sorter).map((x)=>+x);
	    }
	 getLabelForValue(value) {
	        const adapter = this._adapter;
	        const timeOpts = this.options.time;
	        if (timeOpts.tooltipFormat) {
	            return adapter.format(value, timeOpts.tooltipFormat);
	        }
	        return adapter.format(value, timeOpts.displayFormats.datetime);
	    }
	 format(value, format) {
	        const options = this.options;
	        const formats = options.time.displayFormats;
	        const unit = this._unit;
	        const fmt = format || formats[unit];
	        return this._adapter.format(value, fmt);
	    }
	 _tickFormatFunction(time, index, ticks, format) {
	        const options = this.options;
	        const formatter = options.ticks.callback;
	        if (formatter) {
	            return callback(formatter, [
	                time,
	                index,
	                ticks
	            ], this);
	        }
	        const formats = options.time.displayFormats;
	        const unit = this._unit;
	        const majorUnit = this._majorUnit;
	        const minorFormat = unit && formats[unit];
	        const majorFormat = majorUnit && formats[majorUnit];
	        const tick = ticks[index];
	        const major = majorUnit && majorFormat && tick && tick.major;
	        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));
	    }
	 generateTickLabels(ticks) {
	        let i, ilen, tick;
	        for(i = 0, ilen = ticks.length; i < ilen; ++i){
	            tick = ticks[i];
	            tick.label = this._tickFormatFunction(tick.value, i, ticks);
	        }
	    }
	 getDecimalForValue(value) {
	        return value === null ? NaN : (value - this.min) / (this.max - this.min);
	    }
	 getPixelForValue(value) {
	        const offsets = this._offsets;
	        const pos = this.getDecimalForValue(value);
	        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);
	    }
	 getValueForPixel(pixel) {
	        const offsets = this._offsets;
	        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
	        return this.min + pos * (this.max - this.min);
	    }
	 _getLabelSize(label) {
	        const ticksOpts = this.options.ticks;
	        const tickLabelWidth = this.ctx.measureText(label).width;
	        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
	        const cosRotation = Math.cos(angle);
	        const sinRotation = Math.sin(angle);
	        const tickFontSize = this._resolveTickFontOptions(0).size;
	        return {
	            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
	            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
	        };
	    }
	 _getLabelCapacity(exampleTime) {
	        const timeOpts = this.options.time;
	        const displayFormats = timeOpts.displayFormats;
	        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
	        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [
	            exampleTime
	        ], this._majorUnit), format);
	        const size = this._getLabelSize(exampleLabel);
	        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;
	        return capacity > 0 ? capacity : 1;
	    }
	 getDataTimestamps() {
	        let timestamps = this._cache.data || [];
	        let i, ilen;
	        if (timestamps.length) {
	            return timestamps;
	        }
	        const metas = this.getMatchingVisibleMetas();
	        if (this._normalized && metas.length) {
	            return this._cache.data = metas[0].controller.getAllParsedValues(this);
	        }
	        for(i = 0, ilen = metas.length; i < ilen; ++i){
	            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));
	        }
	        return this._cache.data = this.normalize(timestamps);
	    }
	 getLabelTimestamps() {
	        const timestamps = this._cache.labels || [];
	        let i, ilen;
	        if (timestamps.length) {
	            return timestamps;
	        }
	        const labels = this.getLabels();
	        for(i = 0, ilen = labels.length; i < ilen; ++i){
	            timestamps.push(parse(this, labels[i]));
	        }
	        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);
	    }
	 normalize(values) {
	        return _arrayUnique(values.sort(sorter));
	    }
	}

	function interpolate(table, val, reverse) {
	    let lo = 0;
	    let hi = table.length - 1;
	    let prevSource, nextSource, prevTarget, nextTarget;
	    if (reverse) {
	        if (val >= table[lo].pos && val <= table[hi].pos) {
	            ({ lo , hi  } = _lookupByKey(table, 'pos', val));
	        }
	        ({ pos: prevSource , time: prevTarget  } = table[lo]);
	        ({ pos: nextSource , time: nextTarget  } = table[hi]);
	    } else {
	        if (val >= table[lo].time && val <= table[hi].time) {
	            ({ lo , hi  } = _lookupByKey(table, 'time', val));
	        }
	        ({ time: prevSource , pos: prevTarget  } = table[lo]);
	        ({ time: nextSource , pos: nextTarget  } = table[hi]);
	    }
	    const span = nextSource - prevSource;
	    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
	}
	class TimeSeriesScale extends TimeScale {
	    static id = 'timeseries';
	 static defaults = TimeScale.defaults;
	 constructor(props){
	        super(props);
	         this._table = [];
	         this._minPos = undefined;
	         this._tableRange = undefined;
	    }
	 initOffsets() {
	        const timestamps = this._getTimestampsForTable();
	        const table = this._table = this.buildLookupTable(timestamps);
	        this._minPos = interpolate(table, this.min);
	        this._tableRange = interpolate(table, this.max) - this._minPos;
	        super.initOffsets(timestamps);
	    }
	 buildLookupTable(timestamps) {
	        const { min , max  } = this;
	        const items = [];
	        const table = [];
	        let i, ilen, prev, curr, next;
	        for(i = 0, ilen = timestamps.length; i < ilen; ++i){
	            curr = timestamps[i];
	            if (curr >= min && curr <= max) {
	                items.push(curr);
	            }
	        }
	        if (items.length < 2) {
	            return [
	                {
	                    time: min,
	                    pos: 0
	                },
	                {
	                    time: max,
	                    pos: 1
	                }
	            ];
	        }
	        for(i = 0, ilen = items.length; i < ilen; ++i){
	            next = items[i + 1];
	            prev = items[i - 1];
	            curr = items[i];
	            if (Math.round((next + prev) / 2) !== curr) {
	                table.push({
	                    time: curr,
	                    pos: i / (ilen - 1)
	                });
	            }
	        }
	        return table;
	    }
	 _generate() {
	        const min = this.min;
	        const max = this.max;
	        let timestamps = super.getDataTimestamps();
	        if (!timestamps.includes(min) || !timestamps.length) {
	            timestamps.splice(0, 0, min);
	        }
	        if (!timestamps.includes(max) || timestamps.length === 1) {
	            timestamps.push(max);
	        }
	        return timestamps.sort((a, b)=>a - b);
	    }
	 _getTimestampsForTable() {
	        let timestamps = this._cache.all || [];
	        if (timestamps.length) {
	            return timestamps;
	        }
	        const data = this.getDataTimestamps();
	        const label = this.getLabelTimestamps();
	        if (data.length && label.length) {
	            timestamps = this.normalize(data.concat(label));
	        } else {
	            timestamps = data.length ? data : label;
	        }
	        timestamps = this._cache.all = timestamps;
	        return timestamps;
	    }
	 getDecimalForValue(value) {
	        return (interpolate(this._table, value) - this._minPos) / this._tableRange;
	    }
	 getValueForPixel(pixel) {
	        const offsets = this._offsets;
	        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
	        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);
	    }
	}

	ImportanceChart2[FILENAME] = 'src/ce_mlflow_extension/templates/components/ImportanceChart2.svelte';

	var root$4 = add_locations(from_html(`<div class="importance-chart-container"><canvas class="svelte-ec5xpb"></canvas></div>`), ImportanceChart2[FILENAME], [[234, 0, [[235, 2]]]]);

	function ImportanceChart2($$anchor, $$props) {
		check_target(new.target);
		push($$props, true, ImportanceChart2);
		Chart.register(BarController, BarElement, CategoryScale, LinearScale, plugin_title, plugin_tooltip, plugin_legend);

		// Props using Svelte 5 runes
		let data = prop($$props, 'data', 19, () => []),
			selectedLabel = prop($$props, 'selectedLabel', 15, null);

		// Event dispatcher
		const dispatch = createEventDispatcher();

		// Internal state
		let previousSelectedIndex = tag(state(null), 'previousSelectedIndex');

		let chart = tag(state(null), 'chart');
		let chartCanvas = tag(state(null), 'chartCanvas');
		const DEFAULT_COLOR = '#36a2eb';
		const CLICKED_COLOR = '#0000eb';
		const MAX_DISPLAYED_ITEMS = 20;

		// Derived values using $derived with safety checks
		const orderedData = tag(
			user_derived(() => Array.isArray(data())
				? [...data()].sort((a, b) => b.importance - a.importance)
				: []),
			'orderedData'
		);

		const totalImportance = tag(
			user_derived(() => get(orderedData).length > 0
				? get(orderedData).reduce((sum, item) => sum + Math.abs(item.importance), 0)
				: 1),
			'totalImportance'
		);

		const percentageData = tag(
			user_derived(() => get(orderedData).map((item) => ({
				feature_name: item.feature_name,
				importance: Math.round(Math.abs(item.importance) / get(totalImportance) * 10000) / 100
			}))),
			'percentageData'
		);

		const displayData = tag(
			user_derived(() => get(percentageData).length > MAX_DISPLAYED_ITEMS
				? (() => {
					const topItems = get(percentageData).slice(0, MAX_DISPLAYED_ITEMS);
					const othersSum = get(percentageData).slice(MAX_DISPLAYED_ITEMS).reduce((sum, item) => sum + item.importance, 0);

					if (othersSum > 0) {
						return [
							...topItems,

							{
								feature_name: 'Others',
								importance: Math.round(othersSum * 100) / 100
							}
						];
					}

					return topItems;
				})()
				: get(percentageData)),
			'displayData'
		);

		let maxY = tag(user_derived(() => Math.max(...get(displayData).map((item) => item.importance)) * 1.1), 'maxY');

		// Effect to initialize canvas cleanup
		user_effect(() => {
			if (!get(chartCanvas)) return;

			console.log("ImportanceChart2: Canvas ready");

			// Cleanup function
			return () => {
				if (get(chart)) {
					console.log("ImportanceChart2: Cleaning up chart");
					get(chart).destroy();
					set$1(chart, null);
				}
			};
		});

		// Effect to create/update chart when data changes
		user_effect(() => {
			console.log("ImportanceChart2: Effect triggered");
			console.log(...log_if_contains_state('log', "ImportanceChart2: chartCanvas:", get(chartCanvas)));
			console.log(...log_if_contains_state('log', "ImportanceChart2: displayData:", get(displayData)));
			console.log(...log_if_contains_state('log', "ImportanceChart2: displayData.length:", get(displayData).length));

			if (!get(chartCanvas)) {
				console.log("ImportanceChart2: No canvas yet");

				return;
			}

			if (!get(displayData).length) {
				console.log("ImportanceChart2: No data yet");

				return;
			}

			console.log(...log_if_contains_state('log', "ImportanceChart2: Creating/updating chart with displayData:", get(displayData)));

			const ctx = get(chartCanvas).getContext('2d');

			if (!ctx) {
				throw new Error('Failed to get 2D context');
			}

			try {
				// If chart exists, update it instead of recreating
				if (get(chart)) {
					console.log("ImportanceChart2: Updating existing chart");
					get(chart).data.labels = get(displayData).map((d) => d.feature_name);
					get(chart).data.datasets[0].data = get(displayData).map((d) => d.importance);
					get(chart).data.datasets[0].backgroundColor = get(displayData).map(() => DEFAULT_COLOR);
					get(chart).data.datasets[0].borderColor = get(displayData).map(() => DEFAULT_COLOR);
					get(chart // Use 'none' to avoid animations
					).update('none');

					return;
				}

				// Create new chart
				console.log("ImportanceChart2: Creating new chart");

				set$1(
					chart,
					new Chart(ctx, {
						type: 'bar',

						data: {
							labels: get(displayData).map((d) => d.feature_name),

							datasets: [
								{
									label: 'Feature Importance',
									data: get(displayData).map((d) => d.importance),
									backgroundColor: get(displayData).map(() => DEFAULT_COLOR),
									borderColor: get(displayData).map(() => DEFAULT_COLOR),
									borderWidth: 1
								}
							]
						},

						options: {
							responsive: true,
							maintainAspectRatio: false,
							animation: { duration: 0 // Disable animations to prevent effect loops
							 },
							layout: { padding: { top: 10, bottom: 10, left: 10, right: 10 } },

							plugins: {
								title: {
									display: true,
									text: ["Feature Importance (%)"],
									padding: { top: 10, bottom: 20 },
									font: { size: 16 }
								},

								legend: { display: false },

								tooltip: {
									callbacks: {
										label(context) {
											return `${context.dataset.label}: ${context.parsed.x}%`;
										}
									}
								}
							},

							indexAxis: 'y',

							scales: {
								x: {
									beginAtZero: true,
									max: Math.ceil(get(maxY) * 1.05 / 10) * 10,

									ticks: {
										callback(value) {
											return value + '%';
										}
									}
								},

								y: { ticks: { autoSkip: false, font: { size: 16 } } }
							},

							onClick: (event, elements) => {
								if (!get(chart) || strict_equals(elements.length, 0)) return;

								const elementIndex = elements[0].index;

								const backgroundColor = Array.isArray(get(chart).data.datasets[0].backgroundColor)
									? [...get(chart).data.datasets[0].backgroundColor]
									: new Array(get(displayData).length).fill(DEFAULT_COLOR);

								// Reset previous selection
								if (strict_equals(get(previousSelectedIndex), null, false)) {
									backgroundColor[get(previousSelectedIndex)] = DEFAULT_COLOR;
								}

								// Toggle selection
								if (strict_equals(get(previousSelectedIndex), elementIndex)) {
									selectedLabel(null);
									dispatch('labelSelected', null);
									set$1(previousSelectedIndex, null);
								} else {
									const selectedFeature = get(displayData)[elementIndex].feature_name;

									// Special handling for "Others" category
									if (strict_equals(selectedFeature, 'Others')) {
										selectedLabel(null);
										dispatch('labelSelected', null);
									} else {
										selectedLabel(selectedFeature);
										dispatch('labelSelected', selectedFeature);
									}

									set$1(previousSelectedIndex, elementIndex, true);
									backgroundColor[elementIndex] = CLICKED_COLOR;
								}

								get(chart).data.datasets[0].backgroundColor = backgroundColor;
								get(chart // Use 'none' to avoid animation loops
								).update('none');
							}
						}
					}),
					true
				);

				console.log("ImportanceChart2: Chart created successfully");
			} catch(error) {
				console.error(...log_if_contains_state('error', "ImportanceChart2: Error creating chart:", error));
			}
		});

		console.log("ImportanceChart2: Component mounted and chart created");

		var div = root$4();
		var canvas = child(div);

		bind_this(canvas, ($$value) => set$1(chartCanvas, $$value), () => get(chartCanvas));
		append($$anchor, div);

		return pop({ ...legacy_api() });
	}

	ScatterShapValues[FILENAME] = 'src/ce_mlflow_extension/templates/components/ScatterShapValues.svelte';

	var root$3 = add_locations(from_html(`<div class="scatter-shap-container"><canvas class="svelte-ec5xpb"></canvas></div>`), ScatterShapValues[FILENAME], [[247, 0, [[248, 2]]]]);

	function ScatterShapValues($$anchor, $$props) {
		check_target(new.target);
		push($$props, true, ScatterShapValues);

		// import { colorMap } from '../utils/colormap';
		// For feature value mapping
		// Optional prop to determine if higher output is better
		let featureEncodings = prop($$props, 'featureEncodings', 19, () => [{}]),
			isHigherOutputBetter = prop($$props, 'isHigherOutputBetter', 3, false);

		let chart = tag(state(void 0), 'chart');
		let chartCanvas = tag(state(void 0), 'chartCanvas');

		console.log(...log_if_contains_state('log', 'ScatterShapValues: Loaded with props:', {
			shapValues: $$props.shapValues,
			selectedFeatureIndex: $$props.selectedFeatureIndex,
			selectedFeature: $$props.selectedFeature,
			featureEncodings: featureEncodings(),
			isHigherOutputBetter: isHigherOutputBetter()
		}));

		user_effect(() => {
			console.log(...log_if_contains_state('log', 'ScatterShapValues: Props changed:', {
				shapValues: $$props.shapValues,
				selectedFeatureIndex: $$props.selectedFeatureIndex,
				selectedFeature: $$props.selectedFeature,
				isHigherOutputBetter: isHigherOutputBetter(),
				featureEncodings: featureEncodings()
			}));
		});

		let dataToPlot = tag(
			user_derived(() => $$props.shapValues.map((row, index) => {
				return {
					x: $$props.featureValues[index][$$props.selectedFeatureIndex],
					y: row[$$props.selectedFeatureIndex]
				};
			})),
			'dataToPlot'
		);

		console.log("ScatterShapValues: before second mapping row");

		// Color mapping based on isHigherOutputBetter prop
		let pointBackgroundColor = tag(
			user_derived(() => get(dataToPlot).map((d) => {
				// const normalizedValue = (d.y - minOfData) / (maxOfData - minOfData) * 100;
				const normalizedValue = d.y * 100;

				// If higher output is better, use inverted color mapping (green=high, red=low)
				// If higher output is NOT better, use normal color mapping (red=high, green=low)
				isHigherOutputBetter() ? 100 - normalizedValue : normalizedValue;

				return '#36a2eb'; // Default color, replace with colorMap logic if needed

				// return colorMap(colorValue);
			})),
			'pointBackgroundColor'
		);

		console.log("ScatterShapValues: before third mapping row");

		let labels = tag(user_derived(() => [...new Set(get(dataToPlot).map((d) => d.x))]), 'labels');

		// Helper: get y-axis label mapping from featureEncodings if available
		function getXAxisLabelMap() {
			if (featureEncodings() && featureEncodings()[$$props.selectedFeature]) {
				// If encoding is a mapping object (e.g., {0: "Maui", 1: "Samoa"})
				const enc = featureEncodings()[$$props.selectedFeature];

				if (enc && strict_equals(typeof enc, 'object') && !Array.isArray(enc)) {
					return enc;
				}
			}

			return null;
		}

		function getXConfig() {
			const yAxisLabelMap = getXAxisLabelMap();

			if (yAxisLabelMap) {
				return {
					type: 'linear',
					position: 'left',

					ticks: {
						callback(value) {
							// Map numeric y value to label if mapping exists
							return yAxisLabelMap.hasOwnProperty(value) ? yAxisLabelMap[value] : value;
						}
					}
				};
			} else {
				return { type: 'linear', position: 'left' };
			}
		}

		function updateChart(dataToPlot, pointBackgroundColor, labels) {
			console.log(...log_if_contains_state('log', "ScatterShapValues: In update chart", dataToPlot));

			if (get(chart)) {
				// todo: not really performant, we could transform this before somewhere
				if (strict_equals(dataToPlot[0].x, true) || strict_equals(dataToPlot[0].x, false)) {
					labels = labels.map((l) => l ? 'True' : 'False');

					dataToPlot = dataToPlot.map((d) => {
						return { x: d.x ? 'True' : 'False', y: d.y };
					});
				}

				get(chart).data.datasets[0].data = dataToPlot;
				get(chart).data.datasets[0].pointBackgroundColor = pointBackgroundColor;
				get(chart).options.plugins.title.text = [`Shap Values for ${$$props.selectedFeature}`];

				if (get(chart).options.scales) {
					get(chart).options.scales.x = getXConfig();
				}

				if (get(chart).options.plugins?.tooltip?.callbacks) {
					get(chart).options.plugins.tooltip.callbacks.label = function (context) {
						return [
							`Feature: ${$$props.selectedFeature}`,
							`Shap Value: ${context.raw.y}`
						];
					};
				}

				get(chart).update();
			}
		}

		console.log("ScatterShapValues: before update chart");

		run(() => {
			updateChart(get(dataToPlot), get(pointBackgroundColor), get(labels));
		});

		run(() => {
			if (get(chart)) {
				updateChart(get(dataToPlot), get(pointBackgroundColor), get(labels));
			}
		});

		function createChart() {
			let df = {
				datasets: [
					{
						// label: [`Shap Values for ${selectedFeature.feature_display_name}\n${selectedFeatureDisplayDescription}`, ],
						data: get(dataToPlot),

						labels: get(labels),
						backgroundColor: 'rgba(75, 192, 192, 0.2)',

						// borderColor: 'rgba(75, 192, 192, 1)',
						pointBackgroundColor: get(pointBackgroundColor),

						borderWidth: 1
					}
				]
			};

			console.log(...log_if_contains_state('log', 'ScatterShapValues: Creating chart with data:', df));

			// Chart.register(BarController, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);
			Chart.register(ScatterController, PointElement, LinearScale, plugin_title, plugin_tooltip, plugin_legend);

			const ctx = get(chartCanvas)?.getContext('2d');

			if (!ctx) {
				throw new Error('Failed to get 2D context');
			}

			set$1(
				chart,
				new Chart(ctx, {
					type: 'scatter',
					data: df,

					options: {
						responsive: true,
						maintainAspectRatio: false,
						layout: { padding: { top: 10, bottom: 10, left: 10, right: 10 } },
						interaction: { intersect: false, mode: 'nearest', axis: 'xy' },

						plugins: {
							title: {
								display: true,
								text: [`Shap Values for ${$$props.selectedFeature}`],
								padding: { top: 10 },
								font: { size: 16 }
							},

							legend: { display: false },

							tooltip: {
								enabled: true,
								mode: 'nearest',
								intersect: false,

								filter(tooltipItem) {
									// Only show tooltip for the nearest point
									return true;
								},

								callbacks: {
									label(context) {
										return [
											`Feature: ${$$props.selectedFeature}`,
											`Shap Value: ${context.raw.y}`
										];
									}
								}
							}
						},

						scales: {
							x: getXConfig(get(labels)),
							y: { type: 'linear', position: 'left' }
						}
					}
				}),
				true
			);

			updateChart(get(dataToPlot), get(pointBackgroundColor), get(labels));
		}

		onMount(() => {
			createChart();
		});

		// Cleanup chart instance on component destroy
		onDestroy(() => {
			if (get(chart)) {
				get(chart).destroy();
			}
		});

		console.log("ScatterShapValues: Component mounted and chart created");

		var div = root$3();
		var canvas = child(div);

		bind_this(canvas, ($$value) => set$1(chartCanvas, $$value), () => get(chartCanvas));
		append($$anchor, div);

		return pop({ ...legacy_api() });
	}

	ChartManager[FILENAME] = 'src/ce_mlflow_extension/templates/components/ChartManager.svelte';

	var root_1$1 = add_locations(from_html(`<div class="selected-info svelte-169j5gc"><p class="svelte-169j5gc"><strong>Selected Feature:</strong> </p></div>`), ChartManager[FILENAME], [[70, 4, [[71, 6, [[71, 9]]]]]]);

	var root$2 = add_locations(from_html(`<div class="chart-manager svelte-169j5gc"><div class="charts-row svelte-169j5gc"><div class="chart-section svelte-169j5gc"><h3 class="svelte-169j5gc">Feature Importance Chart</h3> <div class="chart-container svelte-169j5gc"><!></div></div> <div class="chart-section svelte-169j5gc"><h3 class="svelte-169j5gc">SHAP Values</h3> <div class="chart-container svelte-169j5gc"><!></div></div></div> <!></div>`), ChartManager[FILENAME], [
		[
			40,
			0,

			[
				[
					41,
					2,
					[[42, 4, [[43, 6], [44, 6]]], [53, 4, [[54, 6], [55, 6]]]]
				]
			]
		]
	]);

	function ChartManager($$anchor, $$props) {
		check_target(new.target);
		push($$props, true, ChartManager);

		// Props using Svelte 5 runes
		// For feature value mapping
		let featureEncodings = prop($$props, 'featureEncodings', 19, () => ({}));

		// Reactive state for selected label using $state
		let selectedLabel = tag(state(null), 'selectedLabel');

		console.log(...log_if_contains_state('log', "ChartManager", $$props.importanceData));

		let featureNames = tag(user_derived(() => $$props.importanceData.map((item) => item.feature_name)), 'featureNames');

		console.log('ChartManager: called');
		console.log(...log_if_contains_state('log', 'ChartManager: importanceData:', $$props.importanceData));
		console.log(...log_if_contains_state('log', 'ChartManager: selectedLabel:', get(selectedLabel)));
		console.log(...log_if_contains_state('log', 'ChartManager: featureValues:', $$props.featureValues));

		// Handle label selection changes
		function handleLabelSelection(event) {
			set$1(selectedLabel, event.detail, true);
			console.log(...log_if_contains_state('log', 'ChartManager: selectedLabel updated to:', get(selectedLabel)));
		}

		let selectedFeatureIndex = tag(user_derived(() => get(featureNames).indexOf(get(selectedLabel) || null)), 'selectedFeatureIndex');

		user_effect(() => {
			console.log(...log_if_contains_state('log', 'ChartManager: selectedFeatureIndex updated to:', get(selectedFeatureIndex)));
		});

		var div = root$2();
		var div_1 = child(div);
		var div_2 = child(div_1);
		var div_3 = sibling(child(div_2), 2);
		var node = child(div_3);

		add_svelte_meta(
			() => ImportanceChart2(node, {
				get data() {
					return $$props.importanceData;
				},

				get selectedLabel() {
					return get(selectedLabel);
				},

				set selectedLabel($$value) {
					set$1(selectedLabel, $$value, true);
				},

				$$events: { labelSelected: handleLabelSelection }
			}),
			'component',
			ChartManager,
			45,
			8,
			{ componentTag: 'ImportanceChart2' }
		);

		var div_4 = sibling(div_2, 2);
		var div_5 = sibling(child(div_4), 2);
		var node_1 = child(div_5);

		add_svelte_meta(
			() => ScatterShapValues(node_1, {
				get shapValues() {
					return $$props.shapValues;
				},

				get featureValues() {
					return $$props.featureValues;
				},

				get selectedFeature() {
					return get(selectedLabel);
				},

				isHigherOutputBetter: true,

				get featureEncodings() {
					return featureEncodings();
				},

				get selectedFeatureIndex() {
					return get(selectedFeatureIndex);
				},

				set selectedFeatureIndex($$value) {
					set$1(selectedFeatureIndex, $$value);
				},

				get selectedLabel() {
					return get(selectedLabel);
				},

				set selectedLabel($$value) {
					set$1(selectedLabel, $$value, true);
				}
			}),
			'component',
			ChartManager,
			56,
			8,
			{ componentTag: 'ScatterShapValues' }
		);

		var node_2 = sibling(div_1, 2);

		{
			var consequent = ($$anchor) => {
				var div_6 = root_1$1();
				var p = child(div_6);
				var text = sibling(child(p));
				template_effect(() => set_text(text, ` ${get(selectedLabel) ?? ''}`));
				append($$anchor, div_6);
			};

			add_svelte_meta(
				() => if_block(node_2, ($$render) => {
					if (get(selectedLabel)) $$render(consequent);
				}),
				'if',
				ChartManager,
				69,
				2
			);
		}
		append($$anchor, div);

		return pop({ ...legacy_api() });
	}

	/*!
	* chartjs-plugin-annotation v3.1.0
	* https://www.chartjs.org/chartjs-plugin-annotation/index
	 * (c) 2024 chartjs-plugin-annotation Contributors
	 * Released under the MIT License
	 */

	/**
	 * @typedef { import("chart.js").ChartEvent } ChartEvent
	 * @typedef { import('../../types/element').AnnotationElement } AnnotationElement
	 */

	const interaction = {
	  modes: {
	    /**
	     * Point mode returns all elements that hit test based on the event position
	     * @param {AnnotationElement[]} visibleElements - annotation elements which are visible
	     * @param {ChartEvent} event - the event we are find things at
	     * @return {AnnotationElement[]} - elements that are found
	     */
	    point(visibleElements, event) {
	      return filterElements(visibleElements, event, {intersect: true});
	    },

	    /**
	     * Nearest mode returns the element closest to the event position
	     * @param {AnnotationElement[]} visibleElements - annotation elements which are visible
	     * @param {ChartEvent} event - the event we are find things at
	     * @param {Object} options - interaction options to use
	     * @return {AnnotationElement[]} - elements that are found (only 1 element)
	     */
	    nearest(visibleElements, event, options) {
	      return getNearestItem(visibleElements, event, options);
	    },
	    /**
	     * x mode returns the elements that hit-test at the current x coordinate
	     * @param {AnnotationElement[]} visibleElements - annotation elements which are visible
	     * @param {ChartEvent} event - the event we are find things at
	     * @param {Object} options - interaction options to use
	     * @return {AnnotationElement[]} - elements that are found
	     */
	    x(visibleElements, event, options) {
	      return filterElements(visibleElements, event, {intersect: options.intersect, axis: 'x'});
	    },

	    /**
	     * y mode returns the elements that hit-test at the current y coordinate
	     * @param {AnnotationElement[]} visibleElements - annotation elements which are visible
	     * @param {ChartEvent} event - the event we are find things at
	     * @param {Object} options - interaction options to use
	     * @return {AnnotationElement[]} - elements that are found
	     */
	    y(visibleElements, event, options) {
	      return filterElements(visibleElements, event, {intersect: options.intersect, axis: 'y'});
	    }
	  }
	};

	/**
	 * Returns all elements that hit test based on the event position
	 * @param {AnnotationElement[]} visibleElements - annotation elements which are visible
	 * @param {ChartEvent} event - the event we are find things at
	 * @param {Object} options - interaction options to use
	 * @return {AnnotationElement[]} - elements that are found
	 */
	function getElements(visibleElements, event, options) {
	  const mode = interaction.modes[options.mode] || interaction.modes.nearest;
	  return mode(visibleElements, event, options);
	}

	function inRangeByAxis(element, event, axis) {
	  if (axis !== 'x' && axis !== 'y') {
	    return element.inRange(event.x, event.y, 'x', true) || element.inRange(event.x, event.y, 'y', true);
	  }
	  return element.inRange(event.x, event.y, axis, true);
	}

	function getPointByAxis(event, center, axis) {
	  if (axis === 'x') {
	    return {x: event.x, y: center.y};
	  } else if (axis === 'y') {
	    return {x: center.x, y: event.y};
	  }
	  return center;
	}

	function filterElements(visibleElements, event, options) {
	  return visibleElements.filter((element) => options.intersect ? element.inRange(event.x, event.y) : inRangeByAxis(element, event, options.axis));
	}

	function getNearestItem(visibleElements, event, options) {
	  let minDistance = Number.POSITIVE_INFINITY;

	  return filterElements(visibleElements, event, options)
	    .reduce((nearestItems, element) => {
	      const center = element.getCenterPoint();
	      const evenPoint = getPointByAxis(event, center, options.axis);
	      const distance = distanceBetweenPoints(event, evenPoint);
	      if (distance < minDistance) {
	        nearestItems = [element];
	        minDistance = distance;
	      } else if (distance === minDistance) {
	        // Can have multiple items at the same distance in which case we sort by size
	        nearestItems.push(element);
	      }

	      return nearestItems;
	    }, [])
	    .sort((a, b) => a._index - b._index)
	    .slice(0, 1); // return only the top item;
	}

	/**
	 * @typedef {import('chart.js').Point} Point
	 */

	/**
	 * Rotate a `point` relative to `center` point by `angle`
	 * @param {Point} point - the point to rotate
	 * @param {Point} center - center point for rotation
	 * @param {number} angle - angle for rotation, in radians
	 * @returns {Point} rotated point
	 */
	function rotated$1(point, center, angle) {
	  const cos = Math.cos(angle);
	  const sin = Math.sin(angle);
	  const cx = center.x;
	  const cy = center.y;

	  return {
	    x: cx + cos * (point.x - cx) - sin * (point.y - cy),
	    y: cy + sin * (point.x - cx) + cos * (point.y - cy)
	  };
	}

	const isOlderPart = (act, req) => req > act || (act.length > req.length && act.slice(0, req.length) === req);

	/**
	 * @typedef { import('chart.js').Point } Point
	 * @typedef { import('chart.js').InteractionAxis } InteractionAxis
	 * @typedef { import('../../types/element').AnnotationElement } AnnotationElement
	 */

	const EPSILON = 0.001;
	const clamp = (x, from, to) => Math.min(to, Math.max(from, x));

	/**
	 * @param {{value: number, start: number, end: number}} limit
	 * @param {number} hitSize
	 * @returns {boolean}
	 */
	const inLimit = (limit, hitSize) => limit.value >= limit.start - hitSize && limit.value <= limit.end + hitSize;

	/**
	 * @param {Object} obj
	 * @param {number} from
	 * @param {number} to
	 * @returns {Object}
	 */
	function clampAll(obj, from, to) {
	  for (const key of Object.keys(obj)) {
	    obj[key] = clamp(obj[key], from, to);
	  }
	  return obj;
	}

	/**
	 * @param {Point} point
	 * @param {Point} center
	 * @param {number} radius
	 * @param {number} hitSize
	 * @returns {boolean}
	 */
	function inPointRange(point, center, radius, hitSize) {
	  if (!point || !center || radius <= 0) {
	    return false;
	  }
	  return (Math.pow(point.x - center.x, 2) + Math.pow(point.y - center.y, 2)) <= Math.pow(radius + hitSize, 2);
	}

	/**
	 * @param {Point} point
	 * @param {{x: number, y: number, x2: number, y2: number}} rect
	 * @param {InteractionAxis} axis
	 * @param {{borderWidth: number, hitTolerance: number}} hitsize
	 * @returns {boolean}
	 */
	function inBoxRange(point, {x, y, x2, y2}, axis, {borderWidth, hitTolerance}) {
	  const hitSize = (borderWidth + hitTolerance) / 2;
	  const inRangeX = point.x >= x - hitSize - EPSILON && point.x <= x2 + hitSize + EPSILON;
	  const inRangeY = point.y >= y - hitSize - EPSILON && point.y <= y2 + hitSize + EPSILON;
	  if (axis === 'x') {
	    return inRangeX;
	  } else if (axis === 'y') {
	    return inRangeY;
	  }
	  return inRangeX && inRangeY;
	}

	/**
	 * @param {Point} point
	 * @param {rect: {x: number, y: number, x2: number, y2: number}, center: {x: number, y: number}} element
	 * @param {InteractionAxis} axis
	 * @param {{rotation: number, borderWidth: number, hitTolerance: number}}
	 * @returns {boolean}
	 */
	function inLabelRange(point, {rect, center}, axis, {rotation, borderWidth, hitTolerance}) {
	  const rotPoint = rotated$1(point, center, toRadians(-rotation));
	  return inBoxRange(rotPoint, rect, axis, {borderWidth, hitTolerance});
	}

	/**
	 * @param {AnnotationElement} element
	 * @param {boolean} useFinalPosition
	 * @returns {Point}
	 */
	function getElementCenterPoint(element, useFinalPosition) {
	  const {centerX, centerY} = element.getProps(['centerX', 'centerY'], useFinalPosition);
	  return {x: centerX, y: centerY};
	}

	/**
	 * @param {string} pkg
	 * @param {string} min
	 * @param {string} ver
	 * @param {boolean} [strict=true]
	 * @returns {boolean}
	 */
	function requireVersion(pkg, min, ver, strict = true) {
	  const parts = ver.split('.');
	  let i = 0;
	  for (const req of min.split('.')) {
	    const act = parts[i++];
	    if (parseInt(req, 10) < parseInt(act, 10)) {
	      break;
	    }
	    if (isOlderPart(act, req)) {
	      if (strict) {
	        throw new Error(`${pkg} v${ver} is not supported. v${min} or newer is required.`);
	      } else {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	const isPercentString = (s) => typeof s === 'string' && s.endsWith('%');
	const toPercent = (s) => parseFloat(s) / 100;
	const toPositivePercent = (s) => clamp(toPercent(s), 0, 1);

	const boxAppering = (x, y) => ({x, y, x2: x, y2: y, width: 0, height: 0});
	const defaultInitAnimation = {
	  box: (properties) => boxAppering(properties.centerX, properties.centerY),
	  doughnutLabel: (properties) => boxAppering(properties.centerX, properties.centerY),
	  ellipse: (properties) => ({centerX: properties.centerX, centerY: properties.centerX, radius: 0, width: 0, height: 0}),
	  label: (properties) => boxAppering(properties.centerX, properties.centerY),
	  line: (properties) => boxAppering(properties.x, properties.y),
	  point: (properties) => ({centerX: properties.centerX, centerY: properties.centerY, radius: 0, width: 0, height: 0}),
	  polygon: (properties) => boxAppering(properties.centerX, properties.centerY)
	};

	/**
	 * @typedef { import('chart.js').FontSpec } FontSpec
	 * @typedef { import('chart.js').Point } Point
	 * @typedef { import('chart.js').Padding } Padding
	 * @typedef { import('../../types/element').AnnotationBoxModel } AnnotationBoxModel
	 * @typedef { import('../../types/element').AnnotationElement } AnnotationElement
	 * @typedef { import('../../types/options').AnnotationPointCoordinates } AnnotationPointCoordinates
	 * @typedef { import('../../types/label').CoreLabelOptions } CoreLabelOptions
	 * @typedef { import('../../types/label').LabelPositionObject } LabelPositionObject
	 */

	/**
	 * @param {number} size
	 * @param {number|string} position
	 * @returns {number}
	 */
	function getRelativePosition(size, position) {
	  if (position === 'start') {
	    return 0;
	  }
	  if (position === 'end') {
	    return size;
	  }
	  if (isPercentString(position)) {
	    return toPositivePercent(position) * size;
	  }
	  return size / 2;
	}

	/**
	 * @param {number} size
	 * @param {number|string} value
	 * @param {boolean} [positivePercent=true]
	 * @returns {number}
	 */
	function getSize(size, value, positivePercent = true) {
	  if (typeof value === 'number') {
	    return value;
	  } else if (isPercentString(value)) {
	    return (positivePercent ? toPositivePercent(value) : toPercent(value)) * size;
	  }
	  return size;
	}

	/**
	 * @param {{x: number, width: number}} size
	 * @param {CoreLabelOptions} options
	 * @returns {number}
	 */
	function calculateTextAlignment(size, options) {
	  const {x, width} = size;
	  const textAlign = options.textAlign;
	  if (textAlign === 'center') {
	    return x + width / 2;
	  } else if (textAlign === 'end' || textAlign === 'right') {
	    return x + width;
	  }
	  return x;
	}

	/**
	 * @param {Point} point
	 * @param {{height: number, width: number}} labelSize
	 * @param {{borderWidth: number, position: {LabelPositionObject|string}, xAdjust: number, yAdjust: number}} options
	 * @param {Padding|undefined} padding
	 * @returns {{x: number, y: number, x2: number, y2: number, height: number, width: number, centerX: number, centerY: number}}
	 */
	function measureLabelRectangle(point, labelSize, {borderWidth, position, xAdjust, yAdjust}, padding) {
	  const hasPadding = isObject(padding);
	  const width = labelSize.width + (hasPadding ? padding.width : 0) + borderWidth;
	  const height = labelSize.height + (hasPadding ? padding.height : 0) + borderWidth;
	  const positionObj = toPosition(position);
	  const x = calculateLabelPosition$1(point.x, width, xAdjust, positionObj.x);
	  const y = calculateLabelPosition$1(point.y, height, yAdjust, positionObj.y);

	  return {
	    x,
	    y,
	    x2: x + width,
	    y2: y + height,
	    width,
	    height,
	    centerX: x + width / 2,
	    centerY: y + height / 2
	  };
	}

	/**
	 * @param {LabelPositionObject|string} value
	 * @param {string|number} defaultValue
	 * @returns {LabelPositionObject}
	 */
	function toPosition(value, defaultValue = 'center') {
	  if (isObject(value)) {
	    return {
	      x: valueOrDefault(value.x, defaultValue),
	      y: valueOrDefault(value.y, defaultValue),
	    };
	  }
	  value = valueOrDefault(value, defaultValue);
	  return {
	    x: value,
	    y: value
	  };
	}

	/**
	 * @param {CoreLabelOptions} options
	 * @param {number} fitRatio
	 * @returns {boolean}
	 */
	const shouldFit = (options, fitRatio) => options && options.autoFit && fitRatio < 1;

	/**
	 * @param {CoreLabelOptions} options
	 * @param {number} fitRatio
	 * @returns {FontSpec[]}
	 */
	function toFonts(options, fitRatio) {
	  const optFont = options.font;
	  const fonts = isArray(optFont) ? optFont : [optFont];
	  if (shouldFit(options, fitRatio)) {
	    return fonts.map(function(f) {
	      const font = toFont(f);
	      font.size = Math.floor(f.size * fitRatio);
	      font.lineHeight = f.lineHeight;
	      return toFont(font);
	    });
	  }
	  return fonts.map(f => toFont(f));
	}

	/**
	 * @param {AnnotationPointCoordinates} options
	 * @returns {boolean}
	 */
	function isBoundToPoint(options) {
	  return options && (defined(options.xValue) || defined(options.yValue));
	}

	function calculateLabelPosition$1(start, size, adjust = 0, position) {
	  return start - getRelativePosition(size, position) + adjust;
	}

	/**
	 * @param {Chart} chart
	 * @param {AnnotationBoxModel} properties
	 * @param {CoreAnnotationOptions} options
	 * @returns {AnnotationElement}
	 */
	function initAnimationProperties(chart, properties, options) {
	  const initAnim = options.init;
	  if (!initAnim) {
	    return;
	  } else if (initAnim === true) {
	    return applyDefault(properties, options);
	  }
	  return execCallback(chart, properties, options);
	}

	/**
	 * @param {Object} options
	 * @param {Array} hooks
	 * @param {Object} hooksContainer
	 * @returns {boolean}
	 */
	function loadHooks(options, hooks, hooksContainer) {
	  let activated = false;
	  hooks.forEach(hook => {
	    if (isFunction(options[hook])) {
	      activated = true;
	      hooksContainer[hook] = options[hook];
	    } else if (defined(hooksContainer[hook])) {
	      delete hooksContainer[hook];
	    }
	  });
	  return activated;
	}

	function applyDefault(properties, options) {
	  const type = options.type || 'line';
	  return defaultInitAnimation[type](properties);
	}

	function execCallback(chart, properties, options) {
	  const result = callback(options.init, [{chart, properties, options}]);
	  if (result === true) {
	    return applyDefault(properties, options);
	  } else if (isObject(result)) {
	    return result;
	  }
	}

	const widthCache = new Map();
	const notRadius = (radius) => isNaN(radius) || radius <= 0;
	const fontsKey = (fonts) => fonts.reduce(function(prev, item) {
	  prev += item.string;
	  return prev;
	}, '');

	/**
	 * @typedef { import('chart.js').Point } Point
	 * @typedef { import('../../types/label').CoreLabelOptions } CoreLabelOptions
	 * @typedef { import('../../types/options').PointAnnotationOptions } PointAnnotationOptions
	 */

	/**
	 * Determine if content is an image or a canvas.
	 * @param {*} content
	 * @returns boolean|undefined
	 * @todo move this function to chart.js helpers
	 */
	function isImageOrCanvas(content) {
	  if (content && typeof content === 'object') {
	    const type = content.toString();
	    return (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]');
	  }
	}

	/**
	 * Set the translation on the canvas if the rotation must be applied.
	 * @param {CanvasRenderingContext2D} ctx - chart canvas context
	 * @param {Point} point - the point of translation
	 * @param {number} rotation - rotation (in degrees) to apply
	 */
	function translate(ctx, {x, y}, rotation) {
	  if (rotation) {
	    ctx.translate(x, y);
	    ctx.rotate(toRadians(rotation));
	    ctx.translate(-x, -y);
	  }
	}

	/**
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {Object} options
	 * @returns {boolean|undefined}
	 */
	function setBorderStyle(ctx, options) {
	  if (options && options.borderWidth) {
	    ctx.lineCap = options.borderCapStyle || 'butt';
	    ctx.setLineDash(options.borderDash);
	    ctx.lineDashOffset = options.borderDashOffset;
	    ctx.lineJoin = options.borderJoinStyle || 'miter';
	    ctx.lineWidth = options.borderWidth;
	    ctx.strokeStyle = options.borderColor;
	    return true;
	  }
	}

	/**
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {Object} options
	 */
	function setShadowStyle(ctx, options) {
	  ctx.shadowColor = options.backgroundShadowColor;
	  ctx.shadowBlur = options.shadowBlur;
	  ctx.shadowOffsetX = options.shadowOffsetX;
	  ctx.shadowOffsetY = options.shadowOffsetY;
	}

	/**
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {CoreLabelOptions} options
	 * @returns {{width: number, height: number}}
	 */
	function measureLabelSize(ctx, options) {
	  const content = options.content;
	  if (isImageOrCanvas(content)) {
	    const size = {
	      width: getSize(content.width, options.width),
	      height: getSize(content.height, options.height)
	    };
	    return size;
	  }
	  const fonts = toFonts(options);
	  const strokeWidth = options.textStrokeWidth;
	  const lines = isArray(content) ? content : [content];
	  const mapKey = lines.join() + fontsKey(fonts) + strokeWidth + (ctx._measureText ? '-spriting' : '');
	  if (!widthCache.has(mapKey)) {
	    widthCache.set(mapKey, calculateLabelSize(ctx, lines, fonts, strokeWidth));
	  }
	  return widthCache.get(mapKey);
	}

	/**
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {{x: number, y: number, width: number, height: number}} rect
	 * @param {Object} options
	 */
	function drawBox(ctx, rect, options) {
	  const {x, y, width, height} = rect;
	  ctx.save();
	  setShadowStyle(ctx, options);
	  const stroke = setBorderStyle(ctx, options);
	  ctx.fillStyle = options.backgroundColor;
	  ctx.beginPath();
	  addRoundedRectPath(ctx, {
	    x, y, w: width, h: height,
	    radius: clampAll(toTRBLCorners(options.borderRadius), 0, Math.min(width, height) / 2)
	  });
	  ctx.closePath();
	  ctx.fill();
	  if (stroke) {
	    ctx.shadowColor = options.borderShadowColor;
	    ctx.stroke();
	  }
	  ctx.restore();
	}

	/**
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {{x: number, y: number, width: number, height: number}} rect
	 * @param {CoreLabelOptions} options
	 * @param {number} fitRatio
	 */
	function drawLabel(ctx, rect, options, fitRatio) {
	  const content = options.content;
	  if (isImageOrCanvas(content)) {
	    ctx.save();
	    ctx.globalAlpha = getOpacity(options.opacity, content.style.opacity);
	    ctx.drawImage(content, rect.x, rect.y, rect.width, rect.height);
	    ctx.restore();
	    return;
	  }
	  const labels = isArray(content) ? content : [content];
	  const fonts = toFonts(options, fitRatio);
	  const optColor = options.color;
	  const colors = isArray(optColor) ? optColor : [optColor];
	  const x = calculateTextAlignment(rect, options);
	  const y = rect.y + options.textStrokeWidth / 2;
	  ctx.save();
	  ctx.textBaseline = 'middle';
	  ctx.textAlign = options.textAlign;
	  if (setTextStrokeStyle(ctx, options)) {
	    applyLabelDecoration(ctx, {x, y}, labels, fonts);
	  }
	  applyLabelContent(ctx, {x, y}, labels, {fonts, colors});
	  ctx.restore();
	}

	function setTextStrokeStyle(ctx, options) {
	  if (options.textStrokeWidth > 0) {
	    // https://stackoverflow.com/questions/13627111/drawing-text-with-an-outer-stroke-with-html5s-canvas
	    ctx.lineJoin = 'round';
	    ctx.miterLimit = 2;
	    ctx.lineWidth = options.textStrokeWidth;
	    ctx.strokeStyle = options.textStrokeColor;
	    return true;
	  }
	}

	/**
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {{radius: number, options: PointAnnotationOptions}} element
	 * @param {number} x
	 * @param {number} y
	 */
	function drawPoint(ctx, element, x, y) {
	  const {radius, options} = element;
	  const style = options.pointStyle;
	  const rotation = options.rotation;
	  let rad = (rotation || 0) * RAD_PER_DEG;

	  if (isImageOrCanvas(style)) {
	    ctx.save();
	    ctx.translate(x, y);
	    ctx.rotate(rad);
	    ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
	    ctx.restore();
	    return;
	  }
	  if (notRadius(radius)) {
	    return;
	  }
	  drawPointStyle(ctx, {x, y, radius, rotation, style, rad});
	}

	function drawPointStyle(ctx, {x, y, radius, rotation, style, rad}) {
	  let xOffset, yOffset, size, cornerRadius;
	  ctx.beginPath();

	  switch (style) {
	  // Default includes circle
	  default:
	    ctx.arc(x, y, radius, 0, TAU);
	    ctx.closePath();
	    break;
	  case 'triangle':
	    ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
	    rad += TWO_THIRDS_PI;
	    ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
	    rad += TWO_THIRDS_PI;
	    ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
	    ctx.closePath();
	    break;
	  case 'rectRounded':
	    // NOTE: the rounded rect implementation changed to use `arc` instead of
	    // `quadraticCurveTo` since it generates better results when rect is
	    // almost a circle. 0.516 (instead of 0.5) produces results with visually
	    // closer proportion to the previous impl and it is inscribed in the
	    // circle with `radius`. For more details, see the following PRs:
	    // https://github.com/chartjs/Chart.js/issues/5597
	    // https://github.com/chartjs/Chart.js/issues/5858
	    cornerRadius = radius * 0.516;
	    size = radius - cornerRadius;
	    xOffset = Math.cos(rad + QUARTER_PI) * size;
	    yOffset = Math.sin(rad + QUARTER_PI) * size;
	    ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
	    ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);
	    ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);
	    ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
	    ctx.closePath();
	    break;
	  case 'rect':
	    if (!rotation) {
	      size = Math.SQRT1_2 * radius;
	      ctx.rect(x - size, y - size, 2 * size, 2 * size);
	      break;
	    }
	    rad += QUARTER_PI;
	    /* falls through */
	  case 'rectRot':
	    xOffset = Math.cos(rad) * radius;
	    yOffset = Math.sin(rad) * radius;
	    ctx.moveTo(x - xOffset, y - yOffset);
	    ctx.lineTo(x + yOffset, y - xOffset);
	    ctx.lineTo(x + xOffset, y + yOffset);
	    ctx.lineTo(x - yOffset, y + xOffset);
	    ctx.closePath();
	    break;
	  case 'crossRot':
	    rad += QUARTER_PI;
	    /* falls through */
	  case 'cross':
	    xOffset = Math.cos(rad) * radius;
	    yOffset = Math.sin(rad) * radius;
	    ctx.moveTo(x - xOffset, y - yOffset);
	    ctx.lineTo(x + xOffset, y + yOffset);
	    ctx.moveTo(x + yOffset, y - xOffset);
	    ctx.lineTo(x - yOffset, y + xOffset);
	    break;
	  case 'star':
	    xOffset = Math.cos(rad) * radius;
	    yOffset = Math.sin(rad) * radius;
	    ctx.moveTo(x - xOffset, y - yOffset);
	    ctx.lineTo(x + xOffset, y + yOffset);
	    ctx.moveTo(x + yOffset, y - xOffset);
	    ctx.lineTo(x - yOffset, y + xOffset);
	    rad += QUARTER_PI;
	    xOffset = Math.cos(rad) * radius;
	    yOffset = Math.sin(rad) * radius;
	    ctx.moveTo(x - xOffset, y - yOffset);
	    ctx.lineTo(x + xOffset, y + yOffset);
	    ctx.moveTo(x + yOffset, y - xOffset);
	    ctx.lineTo(x - yOffset, y + xOffset);
	    break;
	  case 'line':
	    xOffset = Math.cos(rad) * radius;
	    yOffset = Math.sin(rad) * radius;
	    ctx.moveTo(x - xOffset, y - yOffset);
	    ctx.lineTo(x + xOffset, y + yOffset);
	    break;
	  case 'dash':
	    ctx.moveTo(x, y);
	    ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);
	    break;
	  }

	  ctx.fill();
	}

	function calculateLabelSize(ctx, lines, fonts, strokeWidth) {
	  ctx.save();
	  const count = lines.length;
	  let width = 0;
	  let height = strokeWidth;
	  for (let i = 0; i < count; i++) {
	    const font = fonts[Math.min(i, fonts.length - 1)];
	    ctx.font = font.string;
	    const text = lines[i];
	    width = Math.max(width, ctx.measureText(text).width + strokeWidth);
	    height += font.lineHeight;
	  }
	  ctx.restore();
	  return {width, height};
	}

	function applyLabelDecoration(ctx, {x, y}, labels, fonts) {
	  ctx.beginPath();
	  let lhs = 0;
	  labels.forEach(function(l, i) {
	    const f = fonts[Math.min(i, fonts.length - 1)];
	    const lh = f.lineHeight;
	    ctx.font = f.string;
	    ctx.strokeText(l, x, y + lh / 2 + lhs);
	    lhs += lh;
	  });
	  ctx.stroke();
	}

	function applyLabelContent(ctx, {x, y}, labels, {fonts, colors}) {
	  let lhs = 0;
	  labels.forEach(function(l, i) {
	    const c = colors[Math.min(i, colors.length - 1)];
	    const f = fonts[Math.min(i, fonts.length - 1)];
	    const lh = f.lineHeight;
	    ctx.beginPath();
	    ctx.font = f.string;
	    ctx.fillStyle = c;
	    ctx.fillText(l, x, y + lh / 2 + lhs);
	    lhs += lh;
	    ctx.fill();
	  });
	}

	function getOpacity(value, elementValue) {
	  const opacity = isNumber(value) ? value : elementValue;
	  return isNumber(opacity) ? clamp(opacity, 0, 1) : 1;
	}

	const positions = ['left', 'bottom', 'top', 'right'];

	/**
	 * @typedef { import('../../types/element').AnnotationElement } AnnotationElement
	 */

	/**
	 * Drawa the callout component for labels.
	 * @param {CanvasRenderingContext2D} ctx - chart canvas context
	 * @param {AnnotationElement} element - the label element
	 */
	function drawCallout(ctx, element) {
	  const {pointX, pointY, options} = element;
	  const callout = options.callout;
	  const calloutPosition = callout && callout.display && resolveCalloutPosition(element, callout);
	  if (!calloutPosition || isPointInRange(element, callout, calloutPosition)) {
	    return;
	  }

	  ctx.save();
	  ctx.beginPath();
	  const stroke = setBorderStyle(ctx, callout);
	  if (!stroke) {
	    return ctx.restore();
	  }
	  const {separatorStart, separatorEnd} = getCalloutSeparatorCoord(element, calloutPosition);
	  const {sideStart, sideEnd} = getCalloutSideCoord(element, calloutPosition, separatorStart);
	  if (callout.margin > 0 || options.borderWidth === 0) {
	    ctx.moveTo(separatorStart.x, separatorStart.y);
	    ctx.lineTo(separatorEnd.x, separatorEnd.y);
	  }
	  ctx.moveTo(sideStart.x, sideStart.y);
	  ctx.lineTo(sideEnd.x, sideEnd.y);
	  const rotatedPoint = rotated$1({x: pointX, y: pointY}, element.getCenterPoint(), toRadians(-element.rotation));
	  ctx.lineTo(rotatedPoint.x, rotatedPoint.y);
	  ctx.stroke();
	  ctx.restore();
	}

	function getCalloutSeparatorCoord(element, position) {
	  const {x, y, x2, y2} = element;
	  const adjust = getCalloutSeparatorAdjust(element, position);
	  let separatorStart, separatorEnd;
	  if (position === 'left' || position === 'right') {
	    separatorStart = {x: x + adjust, y};
	    separatorEnd = {x: separatorStart.x, y: y2};
	  } else {
	    //  position 'top' or 'bottom'
	    separatorStart = {x, y: y + adjust};
	    separatorEnd = {x: x2, y: separatorStart.y};
	  }
	  return {separatorStart, separatorEnd};
	}

	function getCalloutSeparatorAdjust(element, position) {
	  const {width, height, options} = element;
	  const adjust = options.callout.margin + options.borderWidth / 2;
	  if (position === 'right') {
	    return width + adjust;
	  } else if (position === 'bottom') {
	    return height + adjust;
	  }
	  return -adjust;
	}

	function getCalloutSideCoord(element, position, separatorStart) {
	  const {y, width, height, options} = element;
	  const start = options.callout.start;
	  const side = getCalloutSideAdjust(position, options.callout);
	  let sideStart, sideEnd;
	  if (position === 'left' || position === 'right') {
	    sideStart = {x: separatorStart.x, y: y + getSize(height, start)};
	    sideEnd = {x: sideStart.x + side, y: sideStart.y};
	  } else {
	    //  position 'top' or 'bottom'
	    sideStart = {x: separatorStart.x + getSize(width, start), y: separatorStart.y};
	    sideEnd = {x: sideStart.x, y: sideStart.y + side};
	  }
	  return {sideStart, sideEnd};
	}

	function getCalloutSideAdjust(position, options) {
	  const side = options.side;
	  if (position === 'left' || position === 'top') {
	    return -side;
	  }
	  return side;
	}

	function resolveCalloutPosition(element, options) {
	  const position = options.position;
	  if (positions.includes(position)) {
	    return position;
	  }
	  return resolveCalloutAutoPosition(element, options);
	}

	function resolveCalloutAutoPosition(element, options) {
	  const {x, y, x2, y2, width, height, pointX, pointY, centerX, centerY, rotation} = element;
	  const center = {x: centerX, y: centerY};
	  const start = options.start;
	  const xAdjust = getSize(width, start);
	  const yAdjust = getSize(height, start);
	  const xPoints = [x, x + xAdjust, x + xAdjust, x2];
	  const yPoints = [y + yAdjust, y2, y, y2];
	  const result = [];
	  for (let index = 0; index < 4; index++) {
	    const rotatedPoint = rotated$1({x: xPoints[index], y: yPoints[index]}, center, toRadians(rotation));
	    result.push({
	      position: positions[index],
	      distance: distanceBetweenPoints(rotatedPoint, {x: pointX, y: pointY})
	    });
	  }
	  return result.sort((a, b) => a.distance - b.distance)[0].position;
	}

	function isPointInRange(element, callout, position) {
	  const {pointX, pointY} = element;
	  const margin = callout.margin;
	  let x = pointX;
	  let y = pointY;
	  if (position === 'left') {
	    x += margin;
	  } else if (position === 'right') {
	    x -= margin;
	  } else if (position === 'top') {
	    y += margin;
	  } else if (position === 'bottom') {
	    y -= margin;
	  }
	  return element.inRange(x, y);
	}

	const limitedLineScale = {
	  xScaleID: {min: 'xMin', max: 'xMax', start: 'left', end: 'right', startProp: 'x', endProp: 'x2'},
	  yScaleID: {min: 'yMin', max: 'yMax', start: 'bottom', end: 'top', startProp: 'y', endProp: 'y2'}
	};

	/**
	 * @typedef { import("chart.js").Chart } Chart
	 * @typedef { import("chart.js").Scale } Scale
	 * @typedef { import("chart.js").Point } Point
	 * @typedef { import('../../types/element').AnnotationBoxModel } AnnotationBoxModel
	 * @typedef { import('../../types/options').CoreAnnotationOptions } CoreAnnotationOptions
	 * @typedef { import('../../types/options').LineAnnotationOptions } LineAnnotationOptions
	 * @typedef { import('../../types/options').PointAnnotationOptions } PointAnnotationOptions
	 * @typedef { import('../../types/options').PolygonAnnotationOptions } PolygonAnnotationOptions
	 */

	/**
	 * @param {Scale} scale
	 * @param {number|string} value
	 * @param {number} fallback
	 * @returns {number}
	 */
	function scaleValue(scale, value, fallback) {
	  value = typeof value === 'number' ? value : scale.parse(value);
	  return isNumberFinite(value) ? scale.getPixelForValue(value) : fallback;
	}

	/**
	 * Search the scale defined in chartjs by the axis related to the annotation options key.
	 * @param {{ [key: string]: Scale }} scales
	 * @param {CoreAnnotationOptions} options
	 * @param {string} key
	 * @returns {string}
	 */
	function retrieveScaleID(scales, options, key) {
	  const scaleID = options[key];
	  if (scaleID || key === 'scaleID') {
	    return scaleID;
	  }
	  const axis = key.charAt(0);
	  const axes = Object.values(scales).filter((scale) => scale.axis && scale.axis === axis);
	  if (axes.length) {
	    return axes[0].id;
	  }
	  return axis;
	}

	/**
	 * @param {Scale} scale
	 * @param {{min: number, max: number, start: number, end: number}} options
	 * @returns {{start: number, end: number}|undefined}
	 */
	function getDimensionByScale(scale, options) {
	  if (scale) {
	    const reverse = scale.options.reverse;
	    const start = scaleValue(scale, options.min, reverse ? options.end : options.start);
	    const end = scaleValue(scale, options.max, reverse ? options.start : options.end);
	    return {
	      start,
	      end
	    };
	  }
	}

	/**
	 * @param {Chart} chart
	 * @param {CoreAnnotationOptions} options
	 * @returns {Point}
	 */
	function getChartPoint(chart, options) {
	  const {chartArea, scales} = chart;
	  const xScale = scales[retrieveScaleID(scales, options, 'xScaleID')];
	  const yScale = scales[retrieveScaleID(scales, options, 'yScaleID')];
	  let x = chartArea.width / 2;
	  let y = chartArea.height / 2;

	  if (xScale) {
	    x = scaleValue(xScale, options.xValue, xScale.left + xScale.width / 2);
	  }

	  if (yScale) {
	    y = scaleValue(yScale, options.yValue, yScale.top + yScale.height / 2);
	  }
	  return {x, y};
	}

	/**
	 * @param {Chart} chart
	 * @param {CoreAnnotationOptions} options
	 * @returns {AnnotationBoxModel}
	 */
	function resolveBoxProperties(chart, options) {
	  const scales = chart.scales;
	  const xScale = scales[retrieveScaleID(scales, options, 'xScaleID')];
	  const yScale = scales[retrieveScaleID(scales, options, 'yScaleID')];

	  if (!xScale && !yScale) {
	    return {};
	  }

	  let {left: x, right: x2} = xScale || chart.chartArea;
	  let {top: y, bottom: y2} = yScale || chart.chartArea;
	  const xDim = getChartDimensionByScale(xScale, {min: options.xMin, max: options.xMax, start: x, end: x2});
	  x = xDim.start;
	  x2 = xDim.end;
	  const yDim = getChartDimensionByScale(yScale, {min: options.yMin, max: options.yMax, start: y2, end: y});
	  y = yDim.start;
	  y2 = yDim.end;

	  return {
	    x,
	    y,
	    x2,
	    y2,
	    width: x2 - x,
	    height: y2 - y,
	    centerX: x + (x2 - x) / 2,
	    centerY: y + (y2 - y) / 2
	  };
	}

	/**
	 * @param {Chart} chart
	 * @param {PointAnnotationOptions|PolygonAnnotationOptions} options
	 * @returns {AnnotationBoxModel}
	 */
	function resolvePointProperties(chart, options) {
	  if (!isBoundToPoint(options)) {
	    const box = resolveBoxProperties(chart, options);
	    let radius = options.radius;
	    if (!radius || isNaN(radius)) {
	      radius = Math.min(box.width, box.height) / 2;
	      options.radius = radius;
	    }
	    const size = radius * 2;
	    const adjustCenterX = box.centerX + options.xAdjust;
	    const adjustCenterY = box.centerY + options.yAdjust;
	    return {
	      x: adjustCenterX - radius,
	      y: adjustCenterY - radius,
	      x2: adjustCenterX + radius,
	      y2: adjustCenterY + radius,
	      centerX: adjustCenterX,
	      centerY: adjustCenterY,
	      width: size,
	      height: size,
	      radius
	    };
	  }
	  return getChartCircle(chart, options);
	}
	/**
	 * @param {Chart} chart
	 * @param {LineAnnotationOptions} options
	 * @returns {AnnotationBoxModel}
	 */
	function resolveLineProperties(chart, options) {
	  const {scales, chartArea} = chart;
	  const scale = scales[options.scaleID];
	  const area = {x: chartArea.left, y: chartArea.top, x2: chartArea.right, y2: chartArea.bottom};

	  if (scale) {
	    resolveFullLineProperties(scale, area, options);
	  } else {
	    resolveLimitedLineProperties(scales, area, options);
	  }
	  return area;
	}

	/**
	 * @param {Chart} chart
	 * @param {CoreAnnotationOptions} options
	 * @param {boolean} [centerBased=false]
	 * @returns {AnnotationBoxModel}
	 */
	function resolveBoxAndLabelProperties(chart, options) {
	  const properties = resolveBoxProperties(chart, options);
	  properties.initProperties = initAnimationProperties(chart, properties, options);
	  properties.elements = [{
	    type: 'label',
	    optionScope: 'label',
	    properties: resolveLabelElementProperties$1(chart, properties, options),
	    initProperties: properties.initProperties
	  }];
	  return properties;
	}

	function getChartCircle(chart, options) {
	  const point = getChartPoint(chart, options);
	  const size = options.radius * 2;
	  return {
	    x: point.x - options.radius + options.xAdjust,
	    y: point.y - options.radius + options.yAdjust,
	    x2: point.x + options.radius + options.xAdjust,
	    y2: point.y + options.radius + options.yAdjust,
	    centerX: point.x + options.xAdjust,
	    centerY: point.y + options.yAdjust,
	    radius: options.radius,
	    width: size,
	    height: size
	  };
	}

	function getChartDimensionByScale(scale, options) {
	  const result = getDimensionByScale(scale, options) || options;
	  return {
	    start: Math.min(result.start, result.end),
	    end: Math.max(result.start, result.end)
	  };
	}

	function resolveFullLineProperties(scale, area, options) {
	  const min = scaleValue(scale, options.value, NaN);
	  const max = scaleValue(scale, options.endValue, min);
	  if (scale.isHorizontal()) {
	    area.x = min;
	    area.x2 = max;
	  } else {
	    area.y = min;
	    area.y2 = max;
	  }
	}

	function resolveLimitedLineProperties(scales, area, options) {
	  for (const scaleId of Object.keys(limitedLineScale)) {
	    const scale = scales[retrieveScaleID(scales, options, scaleId)];
	    if (scale) {
	      const {min, max, start, end, startProp, endProp} = limitedLineScale[scaleId];
	      const dim = getDimensionByScale(scale, {min: options[min], max: options[max], start: scale[start], end: scale[end]});
	      area[startProp] = dim.start;
	      area[endProp] = dim.end;
	    }
	  }
	}

	function calculateX({properties, options}, labelSize, position, padding) {
	  const {x: start, x2: end, width: size} = properties;
	  return calculatePosition({start, end, borderWidth: options.borderWidth}, {
	    position: position.x,
	    padding: {start: padding.left, end: padding.right},
	    adjust: options.label.xAdjust,
	    size: labelSize.width
	  });
	}

	function calculateY({properties, options}, labelSize, position, padding) {
	  const {y: start, y2: end, height: size} = properties;
	  return calculatePosition({start, end, borderWidth: options.borderWidth}, {
	    position: position.y,
	    padding: {start: padding.top, end: padding.bottom},
	    adjust: options.label.yAdjust,
	    size: labelSize.height
	  });
	}

	function calculatePosition(boxOpts, labelOpts) {
	  const {start, end, borderWidth} = boxOpts;
	  const {position, padding: {start: padStart, end: padEnd}, adjust} = labelOpts;
	  const availableSize = end - borderWidth - start - padStart - padEnd - labelOpts.size;
	  return start + borderWidth / 2 + adjust + getRelativePosition(availableSize, position);
	}

	function resolveLabelElementProperties$1(chart, properties, options) {
	  const label = options.label;
	  label.backgroundColor = 'transparent';
	  label.callout.display = false;
	  const position = toPosition(label.position);
	  const padding = toPadding(label.padding);
	  const labelSize = measureLabelSize(chart.ctx, label);
	  const x = calculateX({properties, options}, labelSize, position, padding);
	  const y = calculateY({properties, options}, labelSize, position, padding);
	  const width = labelSize.width + padding.width;
	  const height = labelSize.height + padding.height;
	  return {
	    x,
	    y,
	    x2: x + width,
	    y2: y + height,
	    width,
	    height,
	    centerX: x + width / 2,
	    centerY: y + height / 2,
	    rotation: label.rotation
	  };

	}

	const moveHooks = ['enter', 'leave'];

	/**
	 * @typedef { import("chart.js").Chart } Chart
	 * @typedef { import('../../types/options').AnnotationPluginOptions } AnnotationPluginOptions
	 */

	const eventHooks = moveHooks.concat('click');

	/**
	 * @param {Chart} chart
	 * @param {Object} state
	 * @param {AnnotationPluginOptions} options
	 */
	function updateListeners(chart, state, options) {
	  state.listened = loadHooks(options, eventHooks, state.listeners);
	  state.moveListened = false;

	  moveHooks.forEach(hook => {
	    if (isFunction(options[hook])) {
	      state.moveListened = true;
	    }
	  });

	  if (!state.listened || !state.moveListened) {
	    state.annotations.forEach(scope => {
	      if (!state.listened && isFunction(scope.click)) {
	        state.listened = true;
	      }
	      if (!state.moveListened) {
	        moveHooks.forEach(hook => {
	          if (isFunction(scope[hook])) {
	            state.listened = true;
	            state.moveListened = true;
	          }
	        });
	      }
	    });
	  }
	}

	/**
	 * @param {Object} state
	 * @param {ChartEvent} event
	 * @param {AnnotationPluginOptions} options
	 * @return {boolean|undefined}
	 */
	function handleEvent(state, event, options) {
	  if (state.listened) {
	    switch (event.type) {
	    case 'mousemove':
	    case 'mouseout':
	      return handleMoveEvents$1(state, event, options);
	    case 'click':
	      return handleClickEvents$1(state, event, options);
	    }
	  }
	}

	function handleMoveEvents$1(state, event, options) {
	  if (!state.moveListened) {
	    return;
	  }

	  let elements;

	  if (event.type === 'mousemove') {
	    elements = getElements(state.visibleElements, event, options.interaction);
	  } else {
	    elements = [];
	  }

	  const previous = state.hovered;
	  state.hovered = elements;

	  const context = {state, event};
	  let changed = dispatchMoveEvents$1(context, 'leave', previous, elements);
	  return dispatchMoveEvents$1(context, 'enter', elements, previous) || changed;
	}

	function dispatchMoveEvents$1({state, event}, hook, elements, checkElements) {
	  let changed;
	  for (const element of elements) {
	    if (checkElements.indexOf(element) < 0) {
	      changed = dispatchEvent$1(element.options[hook] || state.listeners[hook], element, event) || changed;
	    }
	  }
	  return changed;
	}

	function handleClickEvents$1(state, event, options) {
	  const listeners = state.listeners;
	  const elements = getElements(state.visibleElements, event, options.interaction);
	  let changed;
	  for (const element of elements) {
	    changed = dispatchEvent$1(element.options.click || listeners.click, element, event) || changed;
	  }
	  return changed;
	}

	function dispatchEvent$1(handler, element, event) {
	  return callback(handler, [element.$context, event]) === true;
	}

	/**
	 * @typedef { import("chart.js").Chart } Chart
	 * @typedef { import('../../types/options').AnnotationPluginOptions } AnnotationPluginOptions
	 * @typedef { import('../../types/element').AnnotationElement } AnnotationElement
	 */

	const elementHooks = ['afterDraw', 'beforeDraw'];

	/**
	 * @param {Chart} chart
	 * @param {Object} state
	 * @param {AnnotationPluginOptions} options
	 */
	function updateHooks(chart, state, options) {
	  const visibleElements = state.visibleElements;
	  state.hooked = loadHooks(options, elementHooks, state.hooks);

	  if (!state.hooked) {
	    visibleElements.forEach(scope => {
	      if (!state.hooked) {
	        elementHooks.forEach(hook => {
	          if (isFunction(scope.options[hook])) {
	            state.hooked = true;
	          }
	        });
	      }
	    });
	  }
	}

	/**
	 * @param {Object} state
	 * @param {AnnotationElement} element
	 * @param {string} hook
	 */
	function invokeHook(state, element, hook) {
	  if (state.hooked) {
	    const callbackHook = element.options[hook] || state.hooks[hook];
	    return callback(callbackHook, [element.$context]);
	  }
	}

	/**
	 * @typedef { import("chart.js").Chart } Chart
	 * @typedef { import("chart.js").Scale } Scale
	 * @typedef { import('../../types/options').CoreAnnotationOptions } CoreAnnotationOptions
	 */

	/**
	 * @param {Chart} chart
	 * @param {Scale} scale
	 * @param {CoreAnnotationOptions[]} annotations
	 */
	function adjustScaleRange(chart, scale, annotations) {
	  const range = getScaleLimits(chart.scales, scale, annotations);
	  let changed = changeScaleLimit(scale, range, 'min', 'suggestedMin');
	  changed = changeScaleLimit(scale, range, 'max', 'suggestedMax') || changed;
	  if (changed && isFunction(scale.handleTickRangeOptions)) {
	    scale.handleTickRangeOptions();
	  }
	}

	/**
	 * @param {CoreAnnotationOptions[]} annotations
	 * @param {{ [key: string]: Scale }} scales
	 */
	function verifyScaleOptions(annotations, scales) {
	  for (const annotation of annotations) {
	    verifyScaleIDs(annotation, scales);
	  }
	}

	function changeScaleLimit(scale, range, limit, suggestedLimit) {
	  if (isNumberFinite(range[limit]) && !scaleLimitDefined(scale.options, limit, suggestedLimit)) {
	    const changed = scale[limit] !== range[limit];
	    scale[limit] = range[limit];
	    return changed;
	  }
	}

	function scaleLimitDefined(scaleOptions, limit, suggestedLimit) {
	  return defined(scaleOptions[limit]) || defined(scaleOptions[suggestedLimit]);
	}

	function verifyScaleIDs(annotation, scales) {
	  for (const key of ['scaleID', 'xScaleID', 'yScaleID']) {
	    const scaleID = retrieveScaleID(scales, annotation, key);
	    if (scaleID && !scales[scaleID] && verifyProperties(annotation, key)) {
	      console.warn(`No scale found with id '${scaleID}' for annotation '${annotation.id}'`);
	    }
	  }
	}

	function verifyProperties(annotation, key) {
	  if (key === 'scaleID') {
	    return true;
	  }
	  const axis = key.charAt(0);
	  for (const prop of ['Min', 'Max', 'Value']) {
	    if (defined(annotation[axis + prop])) {
	      return true;
	    }
	  }
	  return false;
	}

	function getScaleLimits(scales, scale, annotations) {
	  const axis = scale.axis;
	  const scaleID = scale.id;
	  const scaleIDOption = axis + 'ScaleID';
	  const limits = {
	    min: valueOrDefault(scale.min, Number.NEGATIVE_INFINITY),
	    max: valueOrDefault(scale.max, Number.POSITIVE_INFINITY)
	  };
	  for (const annotation of annotations) {
	    if (annotation.scaleID === scaleID) {
	      updateLimits(annotation, scale, ['value', 'endValue'], limits);
	    } else if (retrieveScaleID(scales, annotation, scaleIDOption) === scaleID) {
	      updateLimits(annotation, scale, [axis + 'Min', axis + 'Max', axis + 'Value'], limits);
	    }
	  }
	  return limits;
	}

	function updateLimits(annotation, scale, props, limits) {
	  for (const prop of props) {
	    const raw = annotation[prop];
	    if (defined(raw)) {
	      const value = scale.parse(raw);
	      limits.min = Math.min(limits.min, value);
	      limits.max = Math.max(limits.max, value);
	    }
	  }
	}

	class BoxAnnotation extends Element$1 {

	  inRange(mouseX, mouseY, axis, useFinalPosition) {
	    const {x, y} = rotated$1({x: mouseX, y: mouseY}, this.getCenterPoint(useFinalPosition), toRadians(-this.options.rotation));
	    return inBoxRange({x, y}, this.getProps(['x', 'y', 'x2', 'y2'], useFinalPosition), axis, this.options);
	  }

	  getCenterPoint(useFinalPosition) {
	    return getElementCenterPoint(this, useFinalPosition);
	  }

	  draw(ctx) {
	    ctx.save();
	    translate(ctx, this.getCenterPoint(), this.options.rotation);
	    drawBox(ctx, this, this.options);
	    ctx.restore();
	  }

	  get label() {
	    return this.elements && this.elements[0];
	  }

	  resolveElementProperties(chart, options) {
	    return resolveBoxAndLabelProperties(chart, options);
	  }
	}

	BoxAnnotation.id = 'boxAnnotation';

	BoxAnnotation.defaults = {
	  adjustScaleRange: true,
	  backgroundShadowColor: 'transparent',
	  borderCapStyle: 'butt',
	  borderDash: [],
	  borderDashOffset: 0,
	  borderJoinStyle: 'miter',
	  borderRadius: 0,
	  borderShadowColor: 'transparent',
	  borderWidth: 1,
	  display: true,
	  init: undefined,
	  hitTolerance: 0,
	  label: {
	    backgroundColor: 'transparent',
	    borderWidth: 0,
	    callout: {
	      display: false
	    },
	    color: 'black',
	    content: null,
	    display: false,
	    drawTime: undefined,
	    font: {
	      family: undefined,
	      lineHeight: undefined,
	      size: undefined,
	      style: undefined,
	      weight: 'bold'
	    },
	    height: undefined,
	    hitTolerance: undefined,
	    opacity: undefined,
	    padding: 6,
	    position: 'center',
	    rotation: undefined,
	    textAlign: 'start',
	    textStrokeColor: undefined,
	    textStrokeWidth: 0,
	    width: undefined,
	    xAdjust: 0,
	    yAdjust: 0,
	    z: undefined
	  },
	  rotation: 0,
	  shadowBlur: 0,
	  shadowOffsetX: 0,
	  shadowOffsetY: 0,
	  xMax: undefined,
	  xMin: undefined,
	  xScaleID: undefined,
	  yMax: undefined,
	  yMin: undefined,
	  yScaleID: undefined,
	  z: 0
	};

	BoxAnnotation.defaultRoutes = {
	  borderColor: 'color',
	  backgroundColor: 'color'
	};

	BoxAnnotation.descriptors = {
	  label: {
	    _fallback: true
	  }
	};

	class DoughnutLabelAnnotation extends Element$1 {

	  inRange(mouseX, mouseY, axis, useFinalPosition) {
	    return inLabelRange(
	      {x: mouseX, y: mouseY},
	      {rect: this.getProps(['x', 'y', 'x2', 'y2'], useFinalPosition), center: this.getCenterPoint(useFinalPosition)},
	      axis,
	      {rotation: this.rotation, borderWidth: 0, hitTolerance: this.options.hitTolerance}
	    );
	  }

	  getCenterPoint(useFinalPosition) {
	    return getElementCenterPoint(this, useFinalPosition);
	  }

	  draw(ctx) {
	    const options = this.options;
	    if (!options.display || !options.content) {
	      return;
	    }
	    drawBackground(ctx, this);
	    ctx.save();
	    translate(ctx, this.getCenterPoint(), this.rotation);
	    drawLabel(ctx, this, options, this._fitRatio);
	    ctx.restore();
	  }

	  resolveElementProperties(chart, options) {
	    const meta = getDatasetMeta(chart, options);
	    if (!meta) {
	      return {};
	    }
	    const {controllerMeta, point, radius} = getControllerMeta(chart, options, meta);
	    let labelSize = measureLabelSize(chart.ctx, options);
	    const _fitRatio = getFitRatio(labelSize, radius);
	    if (shouldFit(options, _fitRatio)) {
	      labelSize = {width: labelSize.width * _fitRatio, height: labelSize.height * _fitRatio};
	    }
	    const {position, xAdjust, yAdjust} = options;
	    const boxSize = measureLabelRectangle(point, labelSize, {borderWidth: 0, position, xAdjust, yAdjust});
	    return {
	      initProperties: initAnimationProperties(chart, boxSize, options),
	      ...boxSize,
	      ...controllerMeta,
	      rotation: options.rotation,
	      _fitRatio
	    };
	  }
	}

	DoughnutLabelAnnotation.id = 'doughnutLabelAnnotation';

	DoughnutLabelAnnotation.defaults = {
	  autoFit: true,
	  autoHide: true,
	  backgroundColor: 'transparent',
	  backgroundShadowColor: 'transparent',
	  borderColor: 'transparent',
	  borderDash: [],
	  borderDashOffset: 0,
	  borderJoinStyle: 'miter',
	  borderShadowColor: 'transparent',
	  borderWidth: 0,
	  color: 'black',
	  content: null,
	  display: true,
	  font: {
	    family: undefined,
	    lineHeight: undefined,
	    size: undefined,
	    style: undefined,
	    weight: undefined
	  },
	  height: undefined,
	  hitTolerance: 0,
	  init: undefined,
	  opacity: undefined,
	  position: 'center',
	  rotation: 0,
	  shadowBlur: 0,
	  shadowOffsetX: 0,
	  shadowOffsetY: 0,
	  spacing: 1,
	  textAlign: 'center',
	  textStrokeColor: undefined,
	  textStrokeWidth: 0,
	  width: undefined,
	  xAdjust: 0,
	  yAdjust: 0
	};

	DoughnutLabelAnnotation.defaultRoutes = {
	};

	function getDatasetMeta(chart, options) {
	  return chart.getSortedVisibleDatasetMetas().reduce(function(result, value) {
	    const controller = value.controller;
	    if (controller instanceof DoughnutController &&
	      isControllerVisible(chart, options, value.data) &&
	      (!result || controller.innerRadius < result.controller.innerRadius) &&
	      controller.options.circumference >= 90) {
	      return value;
	    }
	    return result;
	  }, undefined);
	}

	function isControllerVisible(chart, options, elements) {
	  if (!options.autoHide) {
	    return true;
	  }
	  for (let i = 0; i < elements.length; i++) {
	    if (!elements[i].hidden && chart.getDataVisibility(i)) {
	      return true;
	    }
	  }
	}

	function getControllerMeta({chartArea}, options, meta) {
	  const {left, top, right, bottom} = chartArea;
	  const {innerRadius, offsetX, offsetY} = meta.controller;
	  const x = (left + right) / 2 + offsetX;
	  const y = (top + bottom) / 2 + offsetY;
	  const square = {
	    left: Math.max(x - innerRadius, left),
	    right: Math.min(x + innerRadius, right),
	    top: Math.max(y - innerRadius, top),
	    bottom: Math.min(y + innerRadius, bottom)
	  };
	  const point = {
	    x: (square.left + square.right) / 2,
	    y: (square.top + square.bottom) / 2
	  };
	  const space = options.spacing + options.borderWidth / 2;
	  const _radius = innerRadius - space;
	  const _counterclockwise = point.y > y;
	  const side = _counterclockwise ? top + space : bottom - space;
	  const angles = getAngles(side, x, y, _radius);
	  const controllerMeta = {
	    _centerX: x,
	    _centerY: y,
	    _radius,
	    _counterclockwise,
	    ...angles
	  };
	  return {
	    controllerMeta,
	    point,
	    radius: Math.min(innerRadius, Math.min(square.right - square.left, square.bottom - square.top) / 2)
	  };
	}

	function getFitRatio({width, height}, radius) {
	  const hypo = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));
	  return (radius * 2) / hypo;
	}

	function getAngles(y, centerX, centerY, radius) {
	  const yk2 = Math.pow(centerY - y, 2);
	  const r2 = Math.pow(radius, 2);
	  const b = centerX * -2;
	  const c = Math.pow(centerX, 2) + yk2 - r2;
	  const delta = Math.pow(b, 2) - (4 * c);
	  if (delta <= 0) {
	    return {
	      _startAngle: 0,
	      _endAngle: TAU
	    };
	  }
	  const start = (-b - Math.sqrt(delta)) / 2;
	  const end = (-b + Math.sqrt(delta)) / 2;
	  return {
	    _startAngle: getAngleFromPoint({x: centerX, y: centerY}, {x: start, y}).angle,
	    _endAngle: getAngleFromPoint({x: centerX, y: centerY}, {x: end, y}).angle
	  };
	}

	function drawBackground(ctx, element) {
	  const {_centerX, _centerY, _radius, _startAngle, _endAngle, _counterclockwise, options} = element;
	  ctx.save();
	  const stroke = setBorderStyle(ctx, options);
	  ctx.fillStyle = options.backgroundColor;
	  ctx.beginPath();
	  ctx.arc(_centerX, _centerY, _radius, _startAngle, _endAngle, _counterclockwise);
	  ctx.closePath();
	  ctx.fill();
	  if (stroke) {
	    ctx.stroke();
	  }
	  ctx.restore();
	}

	class LabelAnnotation extends Element$1 {

	  inRange(mouseX, mouseY, axis, useFinalPosition) {
	    return inLabelRange(
	      {x: mouseX, y: mouseY},
	      {rect: this.getProps(['x', 'y', 'x2', 'y2'], useFinalPosition), center: this.getCenterPoint(useFinalPosition)},
	      axis,
	      {rotation: this.rotation, borderWidth: this.options.borderWidth, hitTolerance: this.options.hitTolerance}
	    );
	  }

	  getCenterPoint(useFinalPosition) {
	    return getElementCenterPoint(this, useFinalPosition);
	  }

	  draw(ctx) {
	    const options = this.options;
	    const visible = !defined(this._visible) || this._visible;
	    if (!options.display || !options.content || !visible) {
	      return;
	    }
	    ctx.save();
	    translate(ctx, this.getCenterPoint(), this.rotation);
	    drawCallout(ctx, this);
	    drawBox(ctx, this, options);
	    drawLabel(ctx, getLabelSize(this), options);
	    ctx.restore();
	  }

	  resolveElementProperties(chart, options) {
	    let point;
	    if (!isBoundToPoint(options)) {
	      const {centerX, centerY} = resolveBoxProperties(chart, options);
	      point = {x: centerX, y: centerY};
	    } else {
	      point = getChartPoint(chart, options);
	    }
	    const padding = toPadding(options.padding);
	    const labelSize = measureLabelSize(chart.ctx, options);
	    const boxSize = measureLabelRectangle(point, labelSize, options, padding);
	    return {
	      initProperties: initAnimationProperties(chart, boxSize, options),
	      pointX: point.x,
	      pointY: point.y,
	      ...boxSize,
	      rotation: options.rotation
	    };
	  }
	}

	LabelAnnotation.id = 'labelAnnotation';

	LabelAnnotation.defaults = {
	  adjustScaleRange: true,
	  backgroundColor: 'transparent',
	  backgroundShadowColor: 'transparent',
	  borderCapStyle: 'butt',
	  borderDash: [],
	  borderDashOffset: 0,
	  borderJoinStyle: 'miter',
	  borderRadius: 0,
	  borderShadowColor: 'transparent',
	  borderWidth: 0,
	  callout: {
	    borderCapStyle: 'butt',
	    borderColor: undefined,
	    borderDash: [],
	    borderDashOffset: 0,
	    borderJoinStyle: 'miter',
	    borderWidth: 1,
	    display: false,
	    margin: 5,
	    position: 'auto',
	    side: 5,
	    start: '50%',
	  },
	  color: 'black',
	  content: null,
	  display: true,
	  font: {
	    family: undefined,
	    lineHeight: undefined,
	    size: undefined,
	    style: undefined,
	    weight: undefined
	  },
	  height: undefined,
	  hitTolerance: 0,
	  init: undefined,
	  opacity: undefined,
	  padding: 6,
	  position: 'center',
	  rotation: 0,
	  shadowBlur: 0,
	  shadowOffsetX: 0,
	  shadowOffsetY: 0,
	  textAlign: 'center',
	  textStrokeColor: undefined,
	  textStrokeWidth: 0,
	  width: undefined,
	  xAdjust: 0,
	  xMax: undefined,
	  xMin: undefined,
	  xScaleID: undefined,
	  xValue: undefined,
	  yAdjust: 0,
	  yMax: undefined,
	  yMin: undefined,
	  yScaleID: undefined,
	  yValue: undefined,
	  z: 0
	};

	LabelAnnotation.defaultRoutes = {
	  borderColor: 'color'
	};

	function getLabelSize({x, y, width, height, options}) {
	  const hBorderWidth = options.borderWidth / 2;
	  const padding = toPadding(options.padding);
	  return {
	    x: x + padding.left + hBorderWidth,
	    y: y + padding.top + hBorderWidth,
	    width: width - padding.left - padding.right - options.borderWidth,
	    height: height - padding.top - padding.bottom - options.borderWidth
	  };
	}

	const pointInLine = (p1, p2, t) => ({x: p1.x + t * (p2.x - p1.x), y: p1.y + t * (p2.y - p1.y)});
	const interpolateX = (y, p1, p2) => pointInLine(p1, p2, Math.abs((y - p1.y) / (p2.y - p1.y))).x;
	const interpolateY = (x, p1, p2) => pointInLine(p1, p2, Math.abs((x - p1.x) / (p2.x - p1.x))).y;
	const sqr = v => v * v;
	const rangeLimit = (mouseX, mouseY, {x, y, x2, y2}, axis) => axis === 'y' ? {start: Math.min(y, y2), end: Math.max(y, y2), value: mouseY} : {start: Math.min(x, x2), end: Math.max(x, x2), value: mouseX};
	// http://www.independent-software.com/determining-coordinates-on-a-html-canvas-bezier-curve.html
	const coordInCurve = (start, cp, end, t) => (1 - t) * (1 - t) * start + 2 * (1 - t) * t * cp + t * t * end;
	const pointInCurve = (start, cp, end, t) => ({x: coordInCurve(start.x, cp.x, end.x, t), y: coordInCurve(start.y, cp.y, end.y, t)});
	const coordAngleInCurve = (start, cp, end, t) => 2 * (1 - t) * (cp - start) + 2 * t * (end - cp);
	const angleInCurve = (start, cp, end, t) => -Math.atan2(coordAngleInCurve(start.x, cp.x, end.x, t), coordAngleInCurve(start.y, cp.y, end.y, t)) + 0.5 * PI;

	class LineAnnotation extends Element$1 {

	  inRange(mouseX, mouseY, axis, useFinalPosition) {
	    const hitSize = (this.options.borderWidth + this.options.hitTolerance) / 2;
	    if (axis !== 'x' && axis !== 'y') {
	      const point = {mouseX, mouseY};
	      const {path, ctx} = this;
	      if (path) {
	        setBorderStyle(ctx, this.options);
	        ctx.lineWidth += this.options.hitTolerance;
	        const {chart} = this.$context;
	        const mx = mouseX * chart.currentDevicePixelRatio;
	        const my = mouseY * chart.currentDevicePixelRatio;
	        const result = ctx.isPointInStroke(path, mx, my) || isOnLabel(this, point, useFinalPosition);
	        ctx.restore();
	        return result;
	      }
	      const epsilon = sqr(hitSize);
	      return intersects(this, point, epsilon, useFinalPosition) || isOnLabel(this, point, useFinalPosition);
	    }
	    return inAxisRange(this, {mouseX, mouseY}, axis, {hitSize, useFinalPosition});
	  }

	  getCenterPoint(useFinalPosition) {
	    return getElementCenterPoint(this, useFinalPosition);
	  }

	  draw(ctx) {
	    const {x, y, x2, y2, cp, options} = this;

	    ctx.save();
	    if (!setBorderStyle(ctx, options)) {
	      // no border width, then line is not drawn
	      return ctx.restore();
	    }
	    setShadowStyle(ctx, options);

	    const length = Math.sqrt(Math.pow(x2 - x, 2) + Math.pow(y2 - y, 2));
	    if (options.curve && cp) {
	      drawCurve(ctx, this, cp, length);
	      return ctx.restore();
	    }
	    const {startOpts, endOpts, startAdjust, endAdjust} = getArrowHeads(this);
	    const angle = Math.atan2(y2 - y, x2 - x);
	    ctx.translate(x, y);
	    ctx.rotate(angle);
	    ctx.beginPath();
	    ctx.moveTo(0 + startAdjust, 0);
	    ctx.lineTo(length - endAdjust, 0);
	    ctx.shadowColor = options.borderShadowColor;
	    ctx.stroke();
	    drawArrowHead(ctx, 0, startAdjust, startOpts);
	    drawArrowHead(ctx, length, -endAdjust, endOpts);
	    ctx.restore();
	  }

	  get label() {
	    return this.elements && this.elements[0];
	  }

	  resolveElementProperties(chart, options) {
	    const area = resolveLineProperties(chart, options);
	    const {x, y, x2, y2} = area;
	    const inside = isLineInArea(area, chart.chartArea);
	    const properties = inside
	      ? limitLineToArea({x, y}, {x: x2, y: y2}, chart.chartArea)
	      : {x, y, x2, y2, width: Math.abs(x2 - x), height: Math.abs(y2 - y)};
	    properties.centerX = (x2 + x) / 2;
	    properties.centerY = (y2 + y) / 2;
	    properties.initProperties = initAnimationProperties(chart, properties, options);
	    if (options.curve) {
	      const p1 = {x: properties.x, y: properties.y};
	      const p2 = {x: properties.x2, y: properties.y2};
	      properties.cp = getControlPoint(properties, options, distanceBetweenPoints(p1, p2));
	    }
	    const labelProperties = resolveLabelElementProperties(chart, properties, options.label);
	    // additonal prop to manage zoom/pan
	    labelProperties._visible = inside;

	    properties.elements = [{
	      type: 'label',
	      optionScope: 'label',
	      properties: labelProperties,
	      initProperties: properties.initProperties
	    }];
	    return properties;
	  }
	}

	LineAnnotation.id = 'lineAnnotation';

	const arrowHeadsDefaults = {
	  backgroundColor: undefined,
	  backgroundShadowColor: undefined,
	  borderColor: undefined,
	  borderDash: undefined,
	  borderDashOffset: undefined,
	  borderShadowColor: undefined,
	  borderWidth: undefined,
	  display: undefined,
	  fill: undefined,
	  length: undefined,
	  shadowBlur: undefined,
	  shadowOffsetX: undefined,
	  shadowOffsetY: undefined,
	  width: undefined
	};

	LineAnnotation.defaults = {
	  adjustScaleRange: true,
	  arrowHeads: {
	    display: false,
	    end: Object.assign({}, arrowHeadsDefaults),
	    fill: false,
	    length: 12,
	    start: Object.assign({}, arrowHeadsDefaults),
	    width: 6
	  },
	  borderDash: [],
	  borderDashOffset: 0,
	  borderShadowColor: 'transparent',
	  borderWidth: 2,
	  curve: false,
	  controlPoint: {
	    y: '-50%'
	  },
	  display: true,
	  endValue: undefined,
	  init: undefined,
	  hitTolerance: 0,
	  label: {
	    backgroundColor: 'rgba(0,0,0,0.8)',
	    backgroundShadowColor: 'transparent',
	    borderCapStyle: 'butt',
	    borderColor: 'black',
	    borderDash: [],
	    borderDashOffset: 0,
	    borderJoinStyle: 'miter',
	    borderRadius: 6,
	    borderShadowColor: 'transparent',
	    borderWidth: 0,
	    callout: Object.assign({}, LabelAnnotation.defaults.callout),
	    color: '#fff',
	    content: null,
	    display: false,
	    drawTime: undefined,
	    font: {
	      family: undefined,
	      lineHeight: undefined,
	      size: undefined,
	      style: undefined,
	      weight: 'bold'
	    },
	    height: undefined,
	    hitTolerance: undefined,
	    opacity: undefined,
	    padding: 6,
	    position: 'center',
	    rotation: 0,
	    shadowBlur: 0,
	    shadowOffsetX: 0,
	    shadowOffsetY: 0,
	    textAlign: 'center',
	    textStrokeColor: undefined,
	    textStrokeWidth: 0,
	    width: undefined,
	    xAdjust: 0,
	    yAdjust: 0,
	    z: undefined
	  },
	  scaleID: undefined,
	  shadowBlur: 0,
	  shadowOffsetX: 0,
	  shadowOffsetY: 0,
	  value: undefined,
	  xMax: undefined,
	  xMin: undefined,
	  xScaleID: undefined,
	  yMax: undefined,
	  yMin: undefined,
	  yScaleID: undefined,
	  z: 0
	};

	LineAnnotation.descriptors = {
	  arrowHeads: {
	    start: {
	      _fallback: true
	    },
	    end: {
	      _fallback: true
	    },
	    _fallback: true
	  }
	};

	LineAnnotation.defaultRoutes = {
	  borderColor: 'color'
	};

	function inAxisRange(element, {mouseX, mouseY}, axis, {hitSize, useFinalPosition}) {
	  const limit = rangeLimit(mouseX, mouseY, element.getProps(['x', 'y', 'x2', 'y2'], useFinalPosition), axis);
	  return inLimit(limit, hitSize) || isOnLabel(element, {mouseX, mouseY}, useFinalPosition, axis);
	}

	function isLineInArea({x, y, x2, y2}, {top, right, bottom, left}) {
	  return !(
	    (x < left && x2 < left) ||
	    (x > right && x2 > right) ||
	    (y < top && y2 < top) ||
	    (y > bottom && y2 > bottom)
	  );
	}

	function limitPointToArea({x, y}, p2, {top, right, bottom, left}) {
	  if (x < left) {
	    y = interpolateY(left, {x, y}, p2);
	    x = left;
	  }
	  if (x > right) {
	    y = interpolateY(right, {x, y}, p2);
	    x = right;
	  }
	  if (y < top) {
	    x = interpolateX(top, {x, y}, p2);
	    y = top;
	  }
	  if (y > bottom) {
	    x = interpolateX(bottom, {x, y}, p2);
	    y = bottom;
	  }
	  return {x, y};
	}

	function limitLineToArea(p1, p2, area) {
	  const {x, y} = limitPointToArea(p1, p2, area);
	  const {x: x2, y: y2} = limitPointToArea(p2, p1, area);
	  return {x, y, x2, y2, width: Math.abs(x2 - x), height: Math.abs(y2 - y)};
	}

	function intersects(element, {mouseX, mouseY}, epsilon = EPSILON, useFinalPosition) {
	  // Adapted from https://stackoverflow.com/a/6853926/25507
	  const {x: x1, y: y1, x2, y2} = element.getProps(['x', 'y', 'x2', 'y2'], useFinalPosition);
	  const dx = x2 - x1;
	  const dy = y2 - y1;
	  const lenSq = sqr(dx) + sqr(dy);
	  const t = lenSq === 0 ? -1 : ((mouseX - x1) * dx + (mouseY - y1) * dy) / lenSq;

	  let xx, yy;
	  if (t < 0) {
	    xx = x1;
	    yy = y1;
	  } else if (t > 1) {
	    xx = x2;
	    yy = y2;
	  } else {
	    xx = x1 + t * dx;
	    yy = y1 + t * dy;
	  }
	  return (sqr(mouseX - xx) + sqr(mouseY - yy)) <= epsilon;
	}

	function isOnLabel(element, {mouseX, mouseY}, useFinalPosition, axis) {
	  const label = element.label;
	  return label.options.display && label.inRange(mouseX, mouseY, axis, useFinalPosition);
	}

	function resolveLabelElementProperties(chart, properties, options) {
	  const borderWidth = options.borderWidth;
	  const padding = toPadding(options.padding);
	  const textSize = measureLabelSize(chart.ctx, options);
	  const width = textSize.width + padding.width + borderWidth;
	  const height = textSize.height + padding.height + borderWidth;
	  return calculateLabelPosition(properties, options, {width, height, padding}, chart.chartArea);
	}

	function calculateAutoRotation(properties) {
	  const {x, y, x2, y2} = properties;
	  const rotation = Math.atan2(y2 - y, x2 - x);
	  // Flip the rotation if it goes > PI/2 or < -PI/2, so label stays upright
	  return rotation > PI / 2 ? rotation - PI : rotation < PI / -2 ? rotation + PI : rotation;
	}

	function calculateLabelPosition(properties, label, sizes, chartArea) {
	  const {width, height, padding} = sizes;
	  const {xAdjust, yAdjust} = label;
	  const p1 = {x: properties.x, y: properties.y};
	  const p2 = {x: properties.x2, y: properties.y2};
	  const rotation = label.rotation === 'auto' ? calculateAutoRotation(properties) : toRadians(label.rotation);
	  const size = rotatedSize(width, height, rotation);
	  const t = calculateT(properties, label, {labelSize: size, padding}, chartArea);
	  const pt = properties.cp ? pointInCurve(p1, properties.cp, p2, t) : pointInLine(p1, p2, t);
	  const xCoordinateSizes = {size: size.w, min: chartArea.left, max: chartArea.right, padding: padding.left};
	  const yCoordinateSizes = {size: size.h, min: chartArea.top, max: chartArea.bottom, padding: padding.top};
	  const centerX = adjustLabelCoordinate(pt.x, xCoordinateSizes) + xAdjust;
	  const centerY = adjustLabelCoordinate(pt.y, yCoordinateSizes) + yAdjust;
	  return {
	    x: centerX - (width / 2),
	    y: centerY - (height / 2),
	    x2: centerX + (width / 2),
	    y2: centerY + (height / 2),
	    centerX,
	    centerY,
	    pointX: pt.x,
	    pointY: pt.y,
	    width,
	    height,
	    rotation: toDegrees(rotation)
	  };
	}

	function rotatedSize(width, height, rotation) {
	  const cos = Math.cos(rotation);
	  const sin = Math.sin(rotation);
	  return {
	    w: Math.abs(width * cos) + Math.abs(height * sin),
	    h: Math.abs(width * sin) + Math.abs(height * cos)
	  };
	}

	function calculateT(properties, label, sizes, chartArea) {
	  let t;
	  const space = spaceAround(properties, chartArea);
	  if (label.position === 'start') {
	    t = calculateTAdjust({w: properties.x2 - properties.x, h: properties.y2 - properties.y}, sizes, label, space);
	  } else if (label.position === 'end') {
	    t = 1 - calculateTAdjust({w: properties.x - properties.x2, h: properties.y - properties.y2}, sizes, label, space);
	  } else {
	    t = getRelativePosition(1, label.position);
	  }
	  return t;
	}

	function calculateTAdjust(lineSize, sizes, label, space) {
	  const {labelSize, padding} = sizes;
	  const lineW = lineSize.w * space.dx;
	  const lineH = lineSize.h * space.dy;
	  const x = (lineW > 0) && ((labelSize.w / 2 + padding.left - space.x) / lineW);
	  const y = (lineH > 0) && ((labelSize.h / 2 + padding.top - space.y) / lineH);
	  return clamp(Math.max(x, y), 0, 0.25);
	}

	function spaceAround(properties, chartArea) {
	  const {x, x2, y, y2} = properties;
	  const t = Math.min(y, y2) - chartArea.top;
	  const l = Math.min(x, x2) - chartArea.left;
	  const b = chartArea.bottom - Math.max(y, y2);
	  const r = chartArea.right - Math.max(x, x2);
	  return {
	    x: Math.min(l, r),
	    y: Math.min(t, b),
	    dx: l <= r ? 1 : -1,
	    dy: t <= b ? 1 : -1
	  };
	}

	function adjustLabelCoordinate(coordinate, labelSizes) {
	  const {size, min, max, padding} = labelSizes;
	  const halfSize = size / 2;
	  if (size > max - min) {
	    // if it does not fit, display as much as possible
	    return (max + min) / 2;
	  }
	  if (min >= (coordinate - padding - halfSize)) {
	    coordinate = min + padding + halfSize;
	  }
	  if (max <= (coordinate + padding + halfSize)) {
	    coordinate = max - padding - halfSize;
	  }
	  return coordinate;
	}

	function getArrowHeads(line) {
	  const options = line.options;
	  const arrowStartOpts = options.arrowHeads && options.arrowHeads.start;
	  const arrowEndOpts = options.arrowHeads && options.arrowHeads.end;
	  return {
	    startOpts: arrowStartOpts,
	    endOpts: arrowEndOpts,
	    startAdjust: getLineAdjust(line, arrowStartOpts),
	    endAdjust: getLineAdjust(line, arrowEndOpts)
	  };
	}

	function getLineAdjust(line, arrowOpts) {
	  if (!arrowOpts || !arrowOpts.display) {
	    return 0;
	  }
	  const {length, width} = arrowOpts;
	  const adjust = line.options.borderWidth / 2;
	  const p1 = {x: length, y: width + adjust};
	  const p2 = {x: 0, y: adjust};
	  return Math.abs(interpolateX(0, p1, p2));
	}

	function drawArrowHead(ctx, offset, adjust, arrowOpts) {
	  if (!arrowOpts || !arrowOpts.display) {
	    return;
	  }
	  const {length, width, fill, backgroundColor, borderColor} = arrowOpts;
	  const arrowOffsetX = Math.abs(offset - length) + adjust;
	  ctx.beginPath();
	  setShadowStyle(ctx, arrowOpts);
	  setBorderStyle(ctx, arrowOpts);
	  ctx.moveTo(arrowOffsetX, -width);
	  ctx.lineTo(offset + adjust, 0);
	  ctx.lineTo(arrowOffsetX, width);
	  if (fill === true) {
	    ctx.fillStyle = backgroundColor || borderColor;
	    ctx.closePath();
	    ctx.fill();
	    ctx.shadowColor = 'transparent';
	  } else {
	    ctx.shadowColor = arrowOpts.borderShadowColor;
	  }
	  ctx.stroke();
	}

	function getControlPoint(properties, options, distance) {
	  const {x, y, x2, y2, centerX, centerY} = properties;
	  const angle = Math.atan2(y2 - y, x2 - x);
	  const cp = toPosition(options.controlPoint, 0);
	  const point = {
	    x: centerX + getSize(distance, cp.x, false),
	    y: centerY + getSize(distance, cp.y, false)
	  };
	  return rotated$1(point, {x: centerX, y: centerY}, angle);
	}

	function drawArrowHeadOnCurve(ctx, {x, y}, {angle, adjust}, arrowOpts) {
	  if (!arrowOpts || !arrowOpts.display) {
	    return;
	  }
	  ctx.save();
	  ctx.translate(x, y);
	  ctx.rotate(angle);
	  drawArrowHead(ctx, 0, -adjust, arrowOpts);
	  ctx.restore();
	}

	function drawCurve(ctx, element, cp, length) {
	  const {x, y, x2, y2, options} = element;
	  const {startOpts, endOpts, startAdjust, endAdjust} = getArrowHeads(element);
	  const p1 = {x, y};
	  const p2 = {x: x2, y: y2};
	  const startAngle = angleInCurve(p1, cp, p2, 0);
	  const endAngle = angleInCurve(p1, cp, p2, 1) - PI;
	  const ps = pointInCurve(p1, cp, p2, startAdjust / length);
	  const pe = pointInCurve(p1, cp, p2, 1 - endAdjust / length);

	  const path = new Path2D();
	  ctx.beginPath();
	  path.moveTo(ps.x, ps.y);
	  path.quadraticCurveTo(cp.x, cp.y, pe.x, pe.y);
	  ctx.shadowColor = options.borderShadowColor;
	  ctx.stroke(path);
	  element.path = path;
	  element.ctx = ctx;
	  drawArrowHeadOnCurve(ctx, ps, {angle: startAngle, adjust: startAdjust}, startOpts);
	  drawArrowHeadOnCurve(ctx, pe, {angle: endAngle, adjust: endAdjust}, endOpts);
	}

	class EllipseAnnotation extends Element$1 {

	  inRange(mouseX, mouseY, axis, useFinalPosition) {
	    const rotation = this.options.rotation;
	    const hitSize = (this.options.borderWidth + this.options.hitTolerance) / 2;
	    if (axis !== 'x' && axis !== 'y') {
	      return pointInEllipse({x: mouseX, y: mouseY}, this.getProps(['width', 'height', 'centerX', 'centerY'], useFinalPosition), rotation, hitSize);
	    }
	    const {x, y, x2, y2} = this.getProps(['x', 'y', 'x2', 'y2'], useFinalPosition);
	    const limit = axis === 'y' ? {start: y, end: y2} : {start: x, end: x2};
	    const rotatedPoint = rotated$1({x: mouseX, y: mouseY}, this.getCenterPoint(useFinalPosition), toRadians(-rotation));
	    return rotatedPoint[axis] >= limit.start - hitSize - EPSILON && rotatedPoint[axis] <= limit.end + hitSize + EPSILON;
	  }

	  getCenterPoint(useFinalPosition) {
	    return getElementCenterPoint(this, useFinalPosition);
	  }

	  draw(ctx) {
	    const {width, height, centerX, centerY, options} = this;
	    ctx.save();
	    translate(ctx, this.getCenterPoint(), options.rotation);
	    setShadowStyle(ctx, this.options);
	    ctx.beginPath();
	    ctx.fillStyle = options.backgroundColor;
	    const stroke = setBorderStyle(ctx, options);
	    ctx.ellipse(centerX, centerY, height / 2, width / 2, PI / 2, 0, 2 * PI);
	    ctx.fill();
	    if (stroke) {
	      ctx.shadowColor = options.borderShadowColor;
	      ctx.stroke();
	    }
	    ctx.restore();
	  }

	  get label() {
	    return this.elements && this.elements[0];
	  }

	  resolveElementProperties(chart, options) {
	    return resolveBoxAndLabelProperties(chart, options);
	  }

	}

	EllipseAnnotation.id = 'ellipseAnnotation';

	EllipseAnnotation.defaults = {
	  adjustScaleRange: true,
	  backgroundShadowColor: 'transparent',
	  borderDash: [],
	  borderDashOffset: 0,
	  borderShadowColor: 'transparent',
	  borderWidth: 1,
	  display: true,
	  hitTolerance: 0,
	  init: undefined,
	  label: Object.assign({}, BoxAnnotation.defaults.label),
	  rotation: 0,
	  shadowBlur: 0,
	  shadowOffsetX: 0,
	  shadowOffsetY: 0,
	  xMax: undefined,
	  xMin: undefined,
	  xScaleID: undefined,
	  yMax: undefined,
	  yMin: undefined,
	  yScaleID: undefined,
	  z: 0
	};

	EllipseAnnotation.defaultRoutes = {
	  borderColor: 'color',
	  backgroundColor: 'color'
	};

	EllipseAnnotation.descriptors = {
	  label: {
	    _fallback: true
	  }
	};

	function pointInEllipse(p, ellipse, rotation, hitSize) {
	  const {width, height, centerX, centerY} = ellipse;
	  const xRadius = width / 2;
	  const yRadius = height / 2;

	  if (xRadius <= 0 || yRadius <= 0) {
	    return false;
	  }
	  // https://stackoverflow.com/questions/7946187/point-and-ellipse-rotated-position-test-algorithm
	  const angle = toRadians(rotation || 0);
	  const cosAngle = Math.cos(angle);
	  const sinAngle = Math.sin(angle);
	  const a = Math.pow(cosAngle * (p.x - centerX) + sinAngle * (p.y - centerY), 2);
	  const b = Math.pow(sinAngle * (p.x - centerX) - cosAngle * (p.y - centerY), 2);
	  return (a / Math.pow(xRadius + hitSize, 2)) + (b / Math.pow(yRadius + hitSize, 2)) <= 1.0001;
	}

	class PointAnnotation extends Element$1 {

	  inRange(mouseX, mouseY, axis, useFinalPosition) {
	    const {x, y, x2, y2, width} = this.getProps(['x', 'y', 'x2', 'y2', 'width'], useFinalPosition);
	    const hitSize = (this.options.borderWidth + this.options.hitTolerance) / 2;
	    if (axis !== 'x' && axis !== 'y') {
	      return inPointRange({x: mouseX, y: mouseY}, this.getCenterPoint(useFinalPosition), width / 2, hitSize);
	    }
	    const limit = axis === 'y' ? {start: y, end: y2, value: mouseY} : {start: x, end: x2, value: mouseX};
	    return inLimit(limit, hitSize);
	  }

	  getCenterPoint(useFinalPosition) {
	    return getElementCenterPoint(this, useFinalPosition);
	  }

	  draw(ctx) {
	    const options = this.options;
	    const borderWidth = options.borderWidth;
	    if (options.radius < 0.1) {
	      return;
	    }
	    ctx.save();
	    ctx.fillStyle = options.backgroundColor;
	    setShadowStyle(ctx, options);
	    const stroke = setBorderStyle(ctx, options);
	    drawPoint(ctx, this, this.centerX, this.centerY);
	    if (stroke && !isImageOrCanvas(options.pointStyle)) {
	      ctx.shadowColor = options.borderShadowColor;
	      ctx.stroke();
	    }
	    ctx.restore();
	    options.borderWidth = borderWidth;
	  }

	  resolveElementProperties(chart, options) {
	    const properties = resolvePointProperties(chart, options);
	    properties.initProperties = initAnimationProperties(chart, properties, options);
	    return properties;
	  }
	}

	PointAnnotation.id = 'pointAnnotation';

	PointAnnotation.defaults = {
	  adjustScaleRange: true,
	  backgroundShadowColor: 'transparent',
	  borderDash: [],
	  borderDashOffset: 0,
	  borderShadowColor: 'transparent',
	  borderWidth: 1,
	  display: true,
	  hitTolerance: 0,
	  init: undefined,
	  pointStyle: 'circle',
	  radius: 10,
	  rotation: 0,
	  shadowBlur: 0,
	  shadowOffsetX: 0,
	  shadowOffsetY: 0,
	  xAdjust: 0,
	  xMax: undefined,
	  xMin: undefined,
	  xScaleID: undefined,
	  xValue: undefined,
	  yAdjust: 0,
	  yMax: undefined,
	  yMin: undefined,
	  yScaleID: undefined,
	  yValue: undefined,
	  z: 0
	};

	PointAnnotation.defaultRoutes = {
	  borderColor: 'color',
	  backgroundColor: 'color'
	};

	class PolygonAnnotation extends Element$1 {

	  inRange(mouseX, mouseY, axis, useFinalPosition) {
	    if (axis !== 'x' && axis !== 'y') {
	      return this.options.radius >= 0.1 && this.elements.length > 1 && pointIsInPolygon(this.elements, mouseX, mouseY, useFinalPosition);
	    }
	    const rotatedPoint = rotated$1({x: mouseX, y: mouseY}, this.getCenterPoint(useFinalPosition), toRadians(-this.options.rotation));
	    const axisPoints = this.elements.map((point) => axis === 'y' ? point.bY : point.bX);
	    const start = Math.min(...axisPoints);
	    const end = Math.max(...axisPoints);
	    return rotatedPoint[axis] >= start && rotatedPoint[axis] <= end;
	  }

	  getCenterPoint(useFinalPosition) {
	    return getElementCenterPoint(this, useFinalPosition);
	  }

	  draw(ctx) {
	    const {elements, options} = this;
	    ctx.save();
	    ctx.beginPath();
	    ctx.fillStyle = options.backgroundColor;
	    setShadowStyle(ctx, options);
	    const stroke = setBorderStyle(ctx, options);
	    let first = true;
	    for (const el of elements) {
	      if (first) {
	        ctx.moveTo(el.x, el.y);
	        first = false;
	      } else {
	        ctx.lineTo(el.x, el.y);
	      }
	    }
	    ctx.closePath();
	    ctx.fill();
	    // If no border, don't draw it
	    if (stroke) {
	      ctx.shadowColor = options.borderShadowColor;
	      ctx.stroke();
	    }
	    ctx.restore();
	  }

	  resolveElementProperties(chart, options) {
	    const properties = resolvePointProperties(chart, options);
	    const {sides, rotation} = options;
	    const elements = [];
	    const angle = (2 * PI) / sides;
	    let rad = rotation * RAD_PER_DEG;
	    for (let i = 0; i < sides; i++, rad += angle) {
	      const elProps = buildPointElement(properties, options, rad);
	      elProps.initProperties = initAnimationProperties(chart, properties, options);
	      elements.push(elProps);
	    }
	    properties.elements = elements;
	    return properties;
	  }
	}

	PolygonAnnotation.id = 'polygonAnnotation';

	PolygonAnnotation.defaults = {
	  adjustScaleRange: true,
	  backgroundShadowColor: 'transparent',
	  borderCapStyle: 'butt',
	  borderDash: [],
	  borderDashOffset: 0,
	  borderJoinStyle: 'miter',
	  borderShadowColor: 'transparent',
	  borderWidth: 1,
	  display: true,
	  hitTolerance: 0,
	  init: undefined,
	  point: {
	    radius: 0
	  },
	  radius: 10,
	  rotation: 0,
	  shadowBlur: 0,
	  shadowOffsetX: 0,
	  shadowOffsetY: 0,
	  sides: 3,
	  xAdjust: 0,
	  xMax: undefined,
	  xMin: undefined,
	  xScaleID: undefined,
	  xValue: undefined,
	  yAdjust: 0,
	  yMax: undefined,
	  yMin: undefined,
	  yScaleID: undefined,
	  yValue: undefined,
	  z: 0
	};

	PolygonAnnotation.defaultRoutes = {
	  borderColor: 'color',
	  backgroundColor: 'color'
	};

	function buildPointElement({centerX, centerY}, {radius, borderWidth, hitTolerance}, rad) {
	  const hitSize = (borderWidth + hitTolerance) / 2;
	  const sin = Math.sin(rad);
	  const cos = Math.cos(rad);
	  const point = {x: centerX + sin * radius, y: centerY - cos * radius};
	  return {
	    type: 'point',
	    optionScope: 'point',
	    properties: {
	      x: point.x,
	      y: point.y,
	      centerX: point.x,
	      centerY: point.y,
	      bX: centerX + sin * (radius + hitSize),
	      bY: centerY - cos * (radius + hitSize)
	    }
	  };
	}

	function pointIsInPolygon(points, x, y, useFinalPosition) {
	  let isInside = false;
	  let A = points[points.length - 1].getProps(['bX', 'bY'], useFinalPosition);
	  for (const point of points) {
	    const B = point.getProps(['bX', 'bY'], useFinalPosition);
	    if ((B.bY > y) !== (A.bY > y) && x < (A.bX - B.bX) * (y - B.bY) / (A.bY - B.bY) + B.bX) {
	      isInside = !isInside;
	    }
	    A = B;
	  }
	  return isInside;
	}

	const annotationTypes = {
	  box: BoxAnnotation,
	  doughnutLabel: DoughnutLabelAnnotation,
	  ellipse: EllipseAnnotation,
	  label: LabelAnnotation,
	  line: LineAnnotation,
	  point: PointAnnotation,
	  polygon: PolygonAnnotation
	};

	/**
	 * Register fallback for annotation elements
	 * For example lineAnnotation options would be looked through:
	 * - the annotation object (options.plugins.annotation.annotations[id])
	 * - element options (options.elements.lineAnnotation)
	 * - element defaults (defaults.elements.lineAnnotation)
	 * - annotation plugin defaults (defaults.plugins.annotation, this is what we are registering here)
	 */
	Object.keys(annotationTypes).forEach(key => {
	  defaults$1.describe(`elements.${annotationTypes[key].id}`, {
	    _fallback: 'plugins.annotation.common'
	  });
	});

	const directUpdater = {
	  update: Object.assign
	};

	const hooks$1 = eventHooks.concat(elementHooks);
	const resolve = (value, optDefs) => isObject(optDefs) ? resolveObj(value, optDefs) : value;


	/**
	 * @typedef { import("chart.js").Chart } Chart
	 * @typedef { import("chart.js").UpdateMode } UpdateMode
	 * @typedef { import('../../types/options').AnnotationPluginOptions } AnnotationPluginOptions
	 */

	/**
	 * @param {string} prop
	 * @returns {boolean}
	 */
	const isIndexable = (prop) => prop === 'color' || prop === 'font';

	/**
	 * Resolve the annotation type, checking if is supported.
	 * @param {string} [type=line] - annotation type
	 * @returns {string} resolved annotation type
	 */
	function resolveType(type = 'line') {
	  if (annotationTypes[type]) {
	    return type;
	  }
	  console.warn(`Unknown annotation type: '${type}', defaulting to 'line'`);
	  return 'line';
	}

	/**
	 * @param {Chart} chart
	 * @param {Object} state
	 * @param {AnnotationPluginOptions} options
	 * @param {UpdateMode} mode
	 */
	function updateElements(chart, state, options, mode) {
	  const animations = resolveAnimations(chart, options.animations, mode);

	  const annotations = state.annotations;
	  const elements = resyncElements(state.elements, annotations);

	  for (let i = 0; i < annotations.length; i++) {
	    const annotationOptions = annotations[i];
	    const element = getOrCreateElement(elements, i, annotationOptions.type);
	    const resolver = annotationOptions.setContext(getContext(chart, element, elements, annotationOptions));
	    const properties = element.resolveElementProperties(chart, resolver);

	    properties.skip = toSkip(properties);

	    if ('elements' in properties) {
	      updateSubElements(element, properties.elements, resolver, animations);
	      // Remove the sub-element definitions from properties, so the actual elements
	      // are not overwritten by their definitions
	      delete properties.elements;
	    }

	    if (!defined(element.x)) {
	      // If the element is newly created, assing the properties directly - to
	      // make them readily awailable to any scriptable options. If we do not do this,
	      // the properties retruned by `resolveElementProperties` are available only
	      // after options resolution.
	      Object.assign(element, properties);
	    }

	    Object.assign(element, properties.initProperties);
	    properties.options = resolveAnnotationOptions(resolver);

	    animations.update(element, properties);
	  }
	}

	function toSkip(properties) {
	  return isNaN(properties.x) || isNaN(properties.y);
	}

	function resolveAnimations(chart, animOpts, mode) {
	  if (mode === 'reset' || mode === 'none' || mode === 'resize') {
	    return directUpdater;
	  }
	  return new Animations(chart, animOpts);
	}

	function updateSubElements(mainElement, elements, resolver, animations) {
	  const subElements = mainElement.elements || (mainElement.elements = []);
	  subElements.length = elements.length;
	  for (let i = 0; i < elements.length; i++) {
	    const definition = elements[i];
	    const properties = definition.properties;
	    const subElement = getOrCreateElement(subElements, i, definition.type, definition.initProperties);
	    const subResolver = resolver[definition.optionScope].override(definition);
	    properties.options = resolveAnnotationOptions(subResolver);
	    animations.update(subElement, properties);
	  }
	}

	function getOrCreateElement(elements, index, type, initProperties) {
	  const elementClass = annotationTypes[resolveType(type)];
	  let element = elements[index];
	  if (!element || !(element instanceof elementClass)) {
	    element = elements[index] = new elementClass();
	    Object.assign(element, initProperties);
	  }
	  return element;
	}

	function resolveAnnotationOptions(resolver) {
	  const elementClass = annotationTypes[resolveType(resolver.type)];
	  const result = {};
	  result.id = resolver.id;
	  result.type = resolver.type;
	  result.drawTime = resolver.drawTime;
	  Object.assign(result,
	    resolveObj(resolver, elementClass.defaults),
	    resolveObj(resolver, elementClass.defaultRoutes));
	  for (const hook of hooks$1) {
	    result[hook] = resolver[hook];
	  }
	  return result;
	}

	function resolveObj(resolver, defs) {
	  const result = {};
	  for (const prop of Object.keys(defs)) {
	    const optDefs = defs[prop];
	    const value = resolver[prop];
	    if (isIndexable(prop) && isArray(value)) {
	      result[prop] = value.map((item) => resolve(item, optDefs));
	    } else {
	      result[prop] = resolve(value, optDefs);
	    }
	  }
	  return result;
	}

	function getContext(chart, element, elements, annotation) {
	  return element.$context || (element.$context = Object.assign(Object.create(chart.getContext()), {
	    element,
	    get elements() {
	      return elements.filter((el) => el && el.options);
	    },
	    id: annotation.id,
	    type: 'annotation'
	  }));
	}

	function resyncElements(elements, annotations) {
	  const count = annotations.length;
	  const start = elements.length;

	  if (start < count) {
	    const add = count - start;
	    elements.splice(start, 0, ...new Array(add));
	  } else if (start > count) {
	    elements.splice(count, start - count);
	  }
	  return elements;
	}

	var version = "3.1.0";

	const chartStates = new Map();
	const isNotDoughnutLabel = annotation => annotation.type !== 'doughnutLabel';
	const hooks = eventHooks.concat(elementHooks);

	var annotation = {
	  id: 'annotation',

	  version,

	  beforeRegister() {
	    requireVersion('chart.js', '4.0', Chart.version);
	  },

	  afterRegister() {
	    Chart.register(annotationTypes);
	  },

	  afterUnregister() {
	    Chart.unregister(annotationTypes);
	  },

	  beforeInit(chart) {
	    chartStates.set(chart, {
	      annotations: [],
	      elements: [],
	      visibleElements: [],
	      listeners: {},
	      listened: false,
	      moveListened: false,
	      hooks: {},
	      hooked: false,
	      hovered: []
	    });
	  },

	  beforeUpdate(chart, args, options) {
	    const state = chartStates.get(chart);
	    const annotations = state.annotations = [];

	    let annotationOptions = options.annotations;
	    if (isObject(annotationOptions)) {
	      Object.keys(annotationOptions).forEach(key => {
	        const value = annotationOptions[key];
	        if (isObject(value)) {
	          value.id = key;
	          annotations.push(value);
	        }
	      });
	    } else if (isArray(annotationOptions)) {
	      annotations.push(...annotationOptions);
	    }
	    verifyScaleOptions(annotations.filter(isNotDoughnutLabel), chart.scales);
	  },

	  afterDataLimits(chart, args) {
	    const state = chartStates.get(chart);
	    adjustScaleRange(chart, args.scale, state.annotations.filter(isNotDoughnutLabel).filter(a => a.display && a.adjustScaleRange));
	  },

	  afterUpdate(chart, args, options) {
	    const state = chartStates.get(chart);
	    updateListeners(chart, state, options);
	    updateElements(chart, state, options, args.mode);
	    state.visibleElements = state.elements.filter(el => !el.skip && el.options.display);
	    updateHooks(chart, state, options);
	  },

	  beforeDatasetsDraw(chart, _args, options) {
	    draw(chart, 'beforeDatasetsDraw', options.clip);
	  },

	  afterDatasetsDraw(chart, _args, options) {
	    draw(chart, 'afterDatasetsDraw', options.clip);
	  },

	  beforeDatasetDraw(chart, _args, options) {
	    draw(chart, _args.index, options.clip);
	  },

	  beforeDraw(chart, _args, options) {
	    draw(chart, 'beforeDraw', options.clip);
	  },

	  afterDraw(chart, _args, options) {
	    draw(chart, 'afterDraw', options.clip);
	  },

	  beforeEvent(chart, args, options) {
	    const state = chartStates.get(chart);
	    if (handleEvent(state, args.event, options)) {
	      args.changed = true;
	    }
	  },

	  afterDestroy(chart) {
	    chartStates.delete(chart);
	  },

	  getAnnotations(chart) {
	    const state = chartStates.get(chart);
	    return state ? state.elements : [];
	  },

	  // only for testing
	  _getAnnotationElementsAtEventForMode(visibleElements, event, options) {
	    return getElements(visibleElements, event, options);
	  },

	  defaults: {
	    animations: {
	      numbers: {
	        properties: ['x', 'y', 'x2', 'y2', 'width', 'height', 'centerX', 'centerY', 'pointX', 'pointY', 'radius'],
	        type: 'number'
	      },
	      colors: {
	        properties: ['backgroundColor', 'borderColor'],
	        type: 'color'
	      }
	    },
	    clip: true,
	    interaction: {
	      mode: undefined,
	      axis: undefined,
	      intersect: undefined
	    },
	    common: {
	      drawTime: 'afterDatasetsDraw',
	      init: false,
	      label: {
	      }
	    }
	  },

	  descriptors: {
	    _indexable: false,
	    _scriptable: (prop) => !hooks.includes(prop) && prop !== 'init',
	    annotations: {
	      _allKeys: false,
	      _fallback: (prop, opts) => `elements.${annotationTypes[resolveType(opts.type)].id}`
	    },
	    interaction: {
	      _fallback: true
	    },
	    common: {
	      label: {
	        _indexable: isIndexable,
	        _fallback: true
	      },
	      _indexable: isIndexable
	    }
	  },

	  additionalOptionScopes: ['']
	};

	function draw(chart, caller, clip) {
	  const {ctx, chartArea} = chart;
	  const state = chartStates.get(chart);

	  if (clip) {
	    clipArea(ctx, chartArea);
	  }

	  const drawableElements = getDrawableElements(state.visibleElements, caller).sort((a, b) => a.element.options.z - b.element.options.z);
	  for (const item of drawableElements) {
	    drawElement(ctx, chartArea, state, item);
	  }

	  if (clip) {
	    unclipArea(ctx);
	  }
	}

	function getDrawableElements(elements, caller) {
	  const drawableElements = [];
	  for (const el of elements) {
	    if (el.options.drawTime === caller) {
	      drawableElements.push({element: el, main: true});
	    }
	    if (el.elements && el.elements.length) {
	      for (const sub of el.elements) {
	        if (sub.options.display && sub.options.drawTime === caller) {
	          drawableElements.push({element: sub});
	        }
	      }
	    }
	  }
	  return drawableElements;
	}

	function drawElement(ctx, chartArea, state, item) {
	  const el = item.element;
	  if (item.main) {
	    invokeHook(state, el, 'beforeDraw');
	    el.draw(ctx, chartArea);
	    invokeHook(state, el, 'afterDraw');
	  } else {
	    el.draw(ctx, chartArea);
	  }
	}

	/*!
	 * chartjs-plugin-datalabels v2.2.0
	 * https://chartjs-plugin-datalabels.netlify.app
	 * (c) 2017-2022 chartjs-plugin-datalabels contributors
	 * Released under the MIT license
	 */

	var devicePixelRatio = (function() {
	  if (typeof window !== 'undefined') {
	    if (window.devicePixelRatio) {
	      return window.devicePixelRatio;
	    }

	    // devicePixelRatio is undefined on IE10
	    // https://stackoverflow.com/a/20204180/8837887
	    // https://github.com/chartjs/chartjs-plugin-datalabels/issues/85
	    var screen = window.screen;
	    if (screen) {
	      return (screen.deviceXDPI || 1) / (screen.logicalXDPI || 1);
	    }
	  }

	  return 1;
	}());

	var utils = {
	  // @todo move this in Chart.helpers.toTextLines
	  toTextLines: function(inputs) {
	    var lines = [];
	    var input;

	    inputs = [].concat(inputs);
	    while (inputs.length) {
	      input = inputs.pop();
	      if (typeof input === 'string') {
	        lines.unshift.apply(lines, input.split('\n'));
	      } else if (Array.isArray(input)) {
	        inputs.push.apply(inputs, input);
	      } else if (!isNullOrUndef(inputs)) {
	        lines.unshift('' + input);
	      }
	    }

	    return lines;
	  },

	  // @todo move this in Chart.helpers.canvas.textSize
	  // @todo cache calls of measureText if font doesn't change?!
	  textSize: function(ctx, lines, font) {
	    var items = [].concat(lines);
	    var ilen = items.length;
	    var prev = ctx.font;
	    var width = 0;
	    var i;

	    ctx.font = font.string;

	    for (i = 0; i < ilen; ++i) {
	      width = Math.max(ctx.measureText(items[i]).width, width);
	    }

	    ctx.font = prev;

	    return {
	      height: ilen * font.lineHeight,
	      width: width
	    };
	  },

	  /**
	   * Returns value bounded by min and max. This is equivalent to max(min, min(value, max)).
	   * @todo move this method in Chart.helpers.bound
	   * https://doc.qt.io/qt-5/qtglobal.html#qBound
	   */
	  bound: function(min, value, max) {
	    return Math.max(min, Math.min(value, max));
	  },

	  /**
	   * Returns an array of pair [value, state] where state is:
	   * * -1: value is only in a0 (removed)
	   * *  1: value is only in a1 (added)
	   */
	  arrayDiff: function(a0, a1) {
	    var prev = a0.slice();
	    var updates = [];
	    var i, j, ilen, v;

	    for (i = 0, ilen = a1.length; i < ilen; ++i) {
	      v = a1[i];
	      j = prev.indexOf(v);

	      if (j === -1) {
	        updates.push([v, 1]);
	      } else {
	        prev.splice(j, 1);
	      }
	    }

	    for (i = 0, ilen = prev.length; i < ilen; ++i) {
	      updates.push([prev[i], -1]);
	    }

	    return updates;
	  },

	  /**
	   * https://github.com/chartjs/chartjs-plugin-datalabels/issues/70
	   */
	  rasterize: function(v) {
	    return Math.round(v * devicePixelRatio) / devicePixelRatio;
	  }
	};

	function orient(point, origin) {
	  var x0 = origin.x;
	  var y0 = origin.y;

	  if (x0 === null) {
	    return {x: 0, y: -1};
	  }
	  if (y0 === null) {
	    return {x: 1, y: 0};
	  }

	  var dx = point.x - x0;
	  var dy = point.y - y0;
	  var ln = Math.sqrt(dx * dx + dy * dy);

	  return {
	    x: ln ? dx / ln : 0,
	    y: ln ? dy / ln : -1
	  };
	}

	function aligned(x, y, vx, vy, align) {
	  switch (align) {
	  case 'center':
	    vx = vy = 0;
	    break;
	  case 'bottom':
	    vx = 0;
	    vy = 1;
	    break;
	  case 'right':
	    vx = 1;
	    vy = 0;
	    break;
	  case 'left':
	    vx = -1;
	    vy = 0;
	    break;
	  case 'top':
	    vx = 0;
	    vy = -1;
	    break;
	  case 'start':
	    vx = -vx;
	    vy = -vy;
	    break;
	  case 'end':
	    // keep natural orientation
	    break;
	  default:
	    // clockwise rotation (in degree)
	    align *= (Math.PI / 180);
	    vx = Math.cos(align);
	    vy = Math.sin(align);
	    break;
	  }

	  return {
	    x: x,
	    y: y,
	    vx: vx,
	    vy: vy
	  };
	}

	// Line clipping (Cohen–Sutherland algorithm)
	// https://en.wikipedia.org/wiki/Cohen–Sutherland_algorithm

	var R_INSIDE = 0;
	var R_LEFT = 1;
	var R_RIGHT = 2;
	var R_BOTTOM = 4;
	var R_TOP = 8;

	function region(x, y, rect) {
	  var res = R_INSIDE;

	  if (x < rect.left) {
	    res |= R_LEFT;
	  } else if (x > rect.right) {
	    res |= R_RIGHT;
	  }
	  if (y < rect.top) {
	    res |= R_TOP;
	  } else if (y > rect.bottom) {
	    res |= R_BOTTOM;
	  }

	  return res;
	}

	function clipped(segment, area) {
	  var x0 = segment.x0;
	  var y0 = segment.y0;
	  var x1 = segment.x1;
	  var y1 = segment.y1;
	  var r0 = region(x0, y0, area);
	  var r1 = region(x1, y1, area);
	  var r, x, y;

	  // eslint-disable-next-line no-constant-condition
	  while (true) {
	    if (!(r0 | r1) || (r0 & r1)) {
	      // both points inside or on the same side: no clipping
	      break;
	    }

	    // at least one point is outside
	    r = r0 || r1;

	    if (r & R_TOP) {
	      x = x0 + (x1 - x0) * (area.top - y0) / (y1 - y0);
	      y = area.top;
	    } else if (r & R_BOTTOM) {
	      x = x0 + (x1 - x0) * (area.bottom - y0) / (y1 - y0);
	      y = area.bottom;
	    } else if (r & R_RIGHT) {
	      y = y0 + (y1 - y0) * (area.right - x0) / (x1 - x0);
	      x = area.right;
	    } else if (r & R_LEFT) {
	      y = y0 + (y1 - y0) * (area.left - x0) / (x1 - x0);
	      x = area.left;
	    }

	    if (r === r0) {
	      x0 = x;
	      y0 = y;
	      r0 = region(x0, y0, area);
	    } else {
	      x1 = x;
	      y1 = y;
	      r1 = region(x1, y1, area);
	    }
	  }

	  return {
	    x0: x0,
	    x1: x1,
	    y0: y0,
	    y1: y1
	  };
	}

	function compute$1(range, config) {
	  var anchor = config.anchor;
	  var segment = range;
	  var x, y;

	  if (config.clamp) {
	    segment = clipped(segment, config.area);
	  }

	  if (anchor === 'start') {
	    x = segment.x0;
	    y = segment.y0;
	  } else if (anchor === 'end') {
	    x = segment.x1;
	    y = segment.y1;
	  } else {
	    x = (segment.x0 + segment.x1) / 2;
	    y = (segment.y0 + segment.y1) / 2;
	  }

	  return aligned(x, y, range.vx, range.vy, config.align);
	}

	var positioners = {
	  arc: function(el, config) {
	    var angle = (el.startAngle + el.endAngle) / 2;
	    var vx = Math.cos(angle);
	    var vy = Math.sin(angle);
	    var r0 = el.innerRadius;
	    var r1 = el.outerRadius;

	    return compute$1({
	      x0: el.x + vx * r0,
	      y0: el.y + vy * r0,
	      x1: el.x + vx * r1,
	      y1: el.y + vy * r1,
	      vx: vx,
	      vy: vy
	    }, config);
	  },

	  point: function(el, config) {
	    var v = orient(el, config.origin);
	    var rx = v.x * el.options.radius;
	    var ry = v.y * el.options.radius;

	    return compute$1({
	      x0: el.x - rx,
	      y0: el.y - ry,
	      x1: el.x + rx,
	      y1: el.y + ry,
	      vx: v.x,
	      vy: v.y
	    }, config);
	  },

	  bar: function(el, config) {
	    var v = orient(el, config.origin);
	    var x = el.x;
	    var y = el.y;
	    var sx = 0;
	    var sy = 0;

	    if (el.horizontal) {
	      x = Math.min(el.x, el.base);
	      sx = Math.abs(el.base - el.x);
	    } else {
	      y = Math.min(el.y, el.base);
	      sy = Math.abs(el.base - el.y);
	    }

	    return compute$1({
	      x0: x,
	      y0: y + sy,
	      x1: x + sx,
	      y1: y,
	      vx: v.x,
	      vy: v.y
	    }, config);
	  },

	  fallback: function(el, config) {
	    var v = orient(el, config.origin);

	    return compute$1({
	      x0: el.x,
	      y0: el.y,
	      x1: el.x + (el.width || 0),
	      y1: el.y + (el.height || 0),
	      vx: v.x,
	      vy: v.y
	    }, config);
	  }
	};

	var rasterize = utils.rasterize;

	function boundingRects(model) {
	  var borderWidth = model.borderWidth || 0;
	  var padding = model.padding;
	  var th = model.size.height;
	  var tw = model.size.width;
	  var tx = -tw / 2;
	  var ty = -th / 2;

	  return {
	    frame: {
	      x: tx - padding.left - borderWidth,
	      y: ty - padding.top - borderWidth,
	      w: tw + padding.width + borderWidth * 2,
	      h: th + padding.height + borderWidth * 2
	    },
	    text: {
	      x: tx,
	      y: ty,
	      w: tw,
	      h: th
	    }
	  };
	}

	function getScaleOrigin(el, context) {
	  var scale = context.chart.getDatasetMeta(context.datasetIndex).vScale;

	  if (!scale) {
	    return null;
	  }

	  if (scale.xCenter !== undefined && scale.yCenter !== undefined) {
	    return {x: scale.xCenter, y: scale.yCenter};
	  }

	  var pixel = scale.getBasePixel();
	  return el.horizontal ?
	    {x: pixel, y: null} :
	    {x: null, y: pixel};
	}

	function getPositioner(el) {
	  if (el instanceof ArcElement) {
	    return positioners.arc;
	  }
	  if (el instanceof PointElement) {
	    return positioners.point;
	  }
	  if (el instanceof BarElement) {
	    return positioners.bar;
	  }
	  return positioners.fallback;
	}

	function drawRoundedRect(ctx, x, y, w, h, radius) {
	  var HALF_PI = Math.PI / 2;

	  if (radius) {
	    var r = Math.min(radius, h / 2, w / 2);
	    var left = x + r;
	    var top = y + r;
	    var right = x + w - r;
	    var bottom = y + h - r;

	    ctx.moveTo(x, top);
	    if (left < right && top < bottom) {
	      ctx.arc(left, top, r, -Math.PI, -HALF_PI);
	      ctx.arc(right, top, r, -HALF_PI, 0);
	      ctx.arc(right, bottom, r, 0, HALF_PI);
	      ctx.arc(left, bottom, r, HALF_PI, Math.PI);
	    } else if (left < right) {
	      ctx.moveTo(left, y);
	      ctx.arc(right, top, r, -HALF_PI, HALF_PI);
	      ctx.arc(left, top, r, HALF_PI, Math.PI + HALF_PI);
	    } else if (top < bottom) {
	      ctx.arc(left, top, r, -Math.PI, 0);
	      ctx.arc(left, bottom, r, 0, Math.PI);
	    } else {
	      ctx.arc(left, top, r, -Math.PI, Math.PI);
	    }
	    ctx.closePath();
	    ctx.moveTo(x, y);
	  } else {
	    ctx.rect(x, y, w, h);
	  }
	}

	function drawFrame(ctx, rect, model) {
	  var bgColor = model.backgroundColor;
	  var borderColor = model.borderColor;
	  var borderWidth = model.borderWidth;

	  if (!bgColor && (!borderColor || !borderWidth)) {
	    return;
	  }

	  ctx.beginPath();

	  drawRoundedRect(
	    ctx,
	    rasterize(rect.x) + borderWidth / 2,
	    rasterize(rect.y) + borderWidth / 2,
	    rasterize(rect.w) - borderWidth,
	    rasterize(rect.h) - borderWidth,
	    model.borderRadius);

	  ctx.closePath();

	  if (bgColor) {
	    ctx.fillStyle = bgColor;
	    ctx.fill();
	  }

	  if (borderColor && borderWidth) {
	    ctx.strokeStyle = borderColor;
	    ctx.lineWidth = borderWidth;
	    ctx.lineJoin = 'miter';
	    ctx.stroke();
	  }
	}

	function textGeometry(rect, align, font) {
	  var h = font.lineHeight;
	  var w = rect.w;
	  var x = rect.x;
	  var y = rect.y + h / 2;

	  if (align === 'center') {
	    x += w / 2;
	  } else if (align === 'end' || align === 'right') {
	    x += w;
	  }

	  return {
	    h: h,
	    w: w,
	    x: x,
	    y: y
	  };
	}

	function drawTextLine(ctx, text, cfg) {
	  var shadow = ctx.shadowBlur;
	  var stroked = cfg.stroked;
	  var x = rasterize(cfg.x);
	  var y = rasterize(cfg.y);
	  var w = rasterize(cfg.w);

	  if (stroked) {
	    ctx.strokeText(text, x, y, w);
	  }

	  if (cfg.filled) {
	    if (shadow && stroked) {
	      // Prevent drawing shadow on both the text stroke and fill, so
	      // if the text is stroked, remove the shadow for the text fill.
	      ctx.shadowBlur = 0;
	    }

	    ctx.fillText(text, x, y, w);

	    if (shadow && stroked) {
	      ctx.shadowBlur = shadow;
	    }
	  }
	}

	function drawText(ctx, lines, rect, model) {
	  var align = model.textAlign;
	  var color = model.color;
	  var filled = !!color;
	  var font = model.font;
	  var ilen = lines.length;
	  var strokeColor = model.textStrokeColor;
	  var strokeWidth = model.textStrokeWidth;
	  var stroked = strokeColor && strokeWidth;
	  var i;

	  if (!ilen || (!filled && !stroked)) {
	    return;
	  }

	  // Adjust coordinates based on text alignment and line height
	  rect = textGeometry(rect, align, font);

	  ctx.font = font.string;
	  ctx.textAlign = align;
	  ctx.textBaseline = 'middle';
	  ctx.shadowBlur = model.textShadowBlur;
	  ctx.shadowColor = model.textShadowColor;

	  if (filled) {
	    ctx.fillStyle = color;
	  }
	  if (stroked) {
	    ctx.lineJoin = 'round';
	    ctx.lineWidth = strokeWidth;
	    ctx.strokeStyle = strokeColor;
	  }

	  for (i = 0, ilen = lines.length; i < ilen; ++i) {
	    drawTextLine(ctx, lines[i], {
	      stroked: stroked,
	      filled: filled,
	      w: rect.w,
	      x: rect.x,
	      y: rect.y + rect.h * i
	    });
	  }
	}

	var Label = function(config, ctx, el, index) {
	  var me = this;

	  me._config = config;
	  me._index = index;
	  me._model = null;
	  me._rects = null;
	  me._ctx = ctx;
	  me._el = el;
	};

	merge(Label.prototype, {
	  /**
	   * @private
	   */
	  _modelize: function(display, lines, config, context) {
	    var me = this;
	    var index = me._index;
	    var font = toFont(resolve$1([config.font, {}], context, index));
	    var color = resolve$1([config.color, defaults$1.color], context, index);

	    return {
	      align: resolve$1([config.align, 'center'], context, index),
	      anchor: resolve$1([config.anchor, 'center'], context, index),
	      area: context.chart.chartArea,
	      backgroundColor: resolve$1([config.backgroundColor, null], context, index),
	      borderColor: resolve$1([config.borderColor, null], context, index),
	      borderRadius: resolve$1([config.borderRadius, 0], context, index),
	      borderWidth: resolve$1([config.borderWidth, 0], context, index),
	      clamp: resolve$1([config.clamp, false], context, index),
	      clip: resolve$1([config.clip, false], context, index),
	      color: color,
	      display: display,
	      font: font,
	      lines: lines,
	      offset: resolve$1([config.offset, 4], context, index),
	      opacity: resolve$1([config.opacity, 1], context, index),
	      origin: getScaleOrigin(me._el, context),
	      padding: toPadding(resolve$1([config.padding, 4], context, index)),
	      positioner: getPositioner(me._el),
	      rotation: resolve$1([config.rotation, 0], context, index) * (Math.PI / 180),
	      size: utils.textSize(me._ctx, lines, font),
	      textAlign: resolve$1([config.textAlign, 'start'], context, index),
	      textShadowBlur: resolve$1([config.textShadowBlur, 0], context, index),
	      textShadowColor: resolve$1([config.textShadowColor, color], context, index),
	      textStrokeColor: resolve$1([config.textStrokeColor, color], context, index),
	      textStrokeWidth: resolve$1([config.textStrokeWidth, 0], context, index)
	    };
	  },

	  update: function(context) {
	    var me = this;
	    var model = null;
	    var rects = null;
	    var index = me._index;
	    var config = me._config;
	    var value, label, lines;

	    // We first resolve the display option (separately) to avoid computing
	    // other options in case the label is hidden (i.e. display: false).
	    var display = resolve$1([config.display, true], context, index);

	    if (display) {
	      value = context.dataset.data[index];
	      label = valueOrDefault(callback(config.formatter, [value, context]), value);
	      lines = isNullOrUndef(label) ? [] : utils.toTextLines(label);

	      if (lines.length) {
	        model = me._modelize(display, lines, config, context);
	        rects = boundingRects(model);
	      }
	    }

	    me._model = model;
	    me._rects = rects;
	  },

	  geometry: function() {
	    return this._rects ? this._rects.frame : {};
	  },

	  rotation: function() {
	    return this._model ? this._model.rotation : 0;
	  },

	  visible: function() {
	    return this._model && this._model.opacity;
	  },

	  model: function() {
	    return this._model;
	  },

	  draw: function(chart, center) {
	    var me = this;
	    var ctx = chart.ctx;
	    var model = me._model;
	    var rects = me._rects;
	    var area;

	    if (!this.visible()) {
	      return;
	    }

	    ctx.save();

	    if (model.clip) {
	      area = model.area;
	      ctx.beginPath();
	      ctx.rect(
	        area.left,
	        area.top,
	        area.right - area.left,
	        area.bottom - area.top);
	      ctx.clip();
	    }

	    ctx.globalAlpha = utils.bound(0, model.opacity, 1);
	    ctx.translate(rasterize(center.x), rasterize(center.y));
	    ctx.rotate(model.rotation);

	    drawFrame(ctx, rects.frame, model);
	    drawText(ctx, model.lines, rects.text, model);

	    ctx.restore();
	  }
	});

	var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991; // eslint-disable-line es/no-number-minsafeinteger
	var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;  // eslint-disable-line es/no-number-maxsafeinteger

	function rotated(point, center, angle) {
	  var cos = Math.cos(angle);
	  var sin = Math.sin(angle);
	  var cx = center.x;
	  var cy = center.y;

	  return {
	    x: cx + cos * (point.x - cx) - sin * (point.y - cy),
	    y: cy + sin * (point.x - cx) + cos * (point.y - cy)
	  };
	}

	function projected(points, axis) {
	  var min = MAX_INTEGER;
	  var max = MIN_INTEGER;
	  var origin = axis.origin;
	  var i, pt, vx, vy, dp;

	  for (i = 0; i < points.length; ++i) {
	    pt = points[i];
	    vx = pt.x - origin.x;
	    vy = pt.y - origin.y;
	    dp = axis.vx * vx + axis.vy * vy;
	    min = Math.min(min, dp);
	    max = Math.max(max, dp);
	  }

	  return {
	    min: min,
	    max: max
	  };
	}

	function toAxis(p0, p1) {
	  var vx = p1.x - p0.x;
	  var vy = p1.y - p0.y;
	  var ln = Math.sqrt(vx * vx + vy * vy);

	  return {
	    vx: (p1.x - p0.x) / ln,
	    vy: (p1.y - p0.y) / ln,
	    origin: p0,
	    ln: ln
	  };
	}

	var HitBox = function() {
	  this._rotation = 0;
	  this._rect = {
	    x: 0,
	    y: 0,
	    w: 0,
	    h: 0
	  };
	};

	merge(HitBox.prototype, {
	  center: function() {
	    var r = this._rect;
	    return {
	      x: r.x + r.w / 2,
	      y: r.y + r.h / 2
	    };
	  },

	  update: function(center, rect, rotation) {
	    this._rotation = rotation;
	    this._rect = {
	      x: rect.x + center.x,
	      y: rect.y + center.y,
	      w: rect.w,
	      h: rect.h
	    };
	  },

	  contains: function(point) {
	    var me = this;
	    var margin = 1;
	    var rect = me._rect;

	    point = rotated(point, me.center(), -me._rotation);

	    return !(point.x < rect.x - margin
	      || point.y < rect.y - margin
	      || point.x > rect.x + rect.w + margin * 2
	      || point.y > rect.y + rect.h + margin * 2);
	  },

	  // Separating Axis Theorem
	  // https://gamedevelopment.tutsplus.com/tutorials/collision-detection-using-the-separating-axis-theorem--gamedev-169
	  intersects: function(other) {
	    var r0 = this._points();
	    var r1 = other._points();
	    var axes = [
	      toAxis(r0[0], r0[1]),
	      toAxis(r0[0], r0[3])
	    ];
	    var i, pr0, pr1;

	    if (this._rotation !== other._rotation) {
	      // Only separate with r1 axis if the rotation is different,
	      // else it's enough to separate r0 and r1 with r0 axis only!
	      axes.push(
	        toAxis(r1[0], r1[1]),
	        toAxis(r1[0], r1[3])
	      );
	    }

	    for (i = 0; i < axes.length; ++i) {
	      pr0 = projected(r0, axes[i]);
	      pr1 = projected(r1, axes[i]);

	      if (pr0.max < pr1.min || pr1.max < pr0.min) {
	        return false;
	      }
	    }

	    return true;
	  },

	  /**
	   * @private
	   */
	  _points: function() {
	    var me = this;
	    var rect = me._rect;
	    var angle = me._rotation;
	    var center = me.center();

	    return [
	      rotated({x: rect.x, y: rect.y}, center, angle),
	      rotated({x: rect.x + rect.w, y: rect.y}, center, angle),
	      rotated({x: rect.x + rect.w, y: rect.y + rect.h}, center, angle),
	      rotated({x: rect.x, y: rect.y + rect.h}, center, angle)
	    ];
	  }
	});

	function coordinates(el, model, geometry) {
	  var point = model.positioner(el, model);
	  var vx = point.vx;
	  var vy = point.vy;

	  if (!vx && !vy) {
	    // if aligned center, we don't want to offset the center point
	    return {x: point.x, y: point.y};
	  }

	  var w = geometry.w;
	  var h = geometry.h;

	  // take in account the label rotation
	  var rotation = model.rotation;
	  var dx = Math.abs(w / 2 * Math.cos(rotation)) + Math.abs(h / 2 * Math.sin(rotation));
	  var dy = Math.abs(w / 2 * Math.sin(rotation)) + Math.abs(h / 2 * Math.cos(rotation));

	  // scale the unit vector (vx, vy) to get at least dx or dy equal to
	  // w or h respectively (else we would calculate the distance to the
	  // ellipse inscribed in the bounding rect)
	  var vs = 1 / Math.max(Math.abs(vx), Math.abs(vy));
	  dx *= vx * vs;
	  dy *= vy * vs;

	  // finally, include the explicit offset
	  dx += model.offset * vx;
	  dy += model.offset * vy;

	  return {
	    x: point.x + dx,
	    y: point.y + dy
	  };
	}

	function collide(labels, collider) {
	  var i, j, s0, s1;

	  // IMPORTANT Iterate in the reverse order since items at the end of the
	  // list have an higher weight/priority and thus should be less impacted
	  // by the overlapping strategy.

	  for (i = labels.length - 1; i >= 0; --i) {
	    s0 = labels[i].$layout;

	    for (j = i - 1; j >= 0 && s0._visible; --j) {
	      s1 = labels[j].$layout;

	      if (s1._visible && s0._box.intersects(s1._box)) {
	        collider(s0, s1);
	      }
	    }
	  }

	  return labels;
	}

	function compute(labels) {
	  var i, ilen, label, state, geometry, center, proxy;

	  // Initialize labels for overlap detection
	  for (i = 0, ilen = labels.length; i < ilen; ++i) {
	    label = labels[i];
	    state = label.$layout;

	    if (state._visible) {
	      // Chart.js 3 removed el._model in favor of getProps(), making harder to
	      // abstract reading values in positioners. Also, using string arrays to
	      // read values (i.e. var {a,b,c} = el.getProps(["a","b","c"])) would make
	      // positioners inefficient in the normal case (i.e. not the final values)
	      // and the code a bit ugly, so let's use a Proxy instead.
	      proxy = new Proxy(label._el, {get: (el, p) => el.getProps([p], true)[p]});

	      geometry = label.geometry();
	      center = coordinates(proxy, label.model(), geometry);
	      state._box.update(center, geometry, label.rotation());
	    }
	  }

	  // Auto hide overlapping labels
	  return collide(labels, function(s0, s1) {
	    var h0 = s0._hidable;
	    var h1 = s1._hidable;

	    if ((h0 && h1) || h1) {
	      s1._visible = false;
	    } else if (h0) {
	      s0._visible = false;
	    }
	  });
	}

	var layout = {
	  prepare: function(datasets) {
	    var labels = [];
	    var i, j, ilen, jlen, label;

	    for (i = 0, ilen = datasets.length; i < ilen; ++i) {
	      for (j = 0, jlen = datasets[i].length; j < jlen; ++j) {
	        label = datasets[i][j];
	        labels.push(label);
	        label.$layout = {
	          _box: new HitBox(),
	          _hidable: false,
	          _visible: true,
	          _set: i,
	          _idx: label._index
	        };
	      }
	    }

	    // TODO New `z` option: labels with a higher z-index are drawn
	    // of top of the ones with a lower index. Lowest z-index labels
	    // are also discarded first when hiding overlapping labels.
	    labels.sort(function(a, b) {
	      var sa = a.$layout;
	      var sb = b.$layout;

	      return sa._idx === sb._idx
	        ? sb._set - sa._set
	        : sb._idx - sa._idx;
	    });

	    this.update(labels);

	    return labels;
	  },

	  update: function(labels) {
	    var dirty = false;
	    var i, ilen, label, model, state;

	    for (i = 0, ilen = labels.length; i < ilen; ++i) {
	      label = labels[i];
	      model = label.model();
	      state = label.$layout;
	      state._hidable = model && model.display === 'auto';
	      state._visible = label.visible();
	      dirty |= state._hidable;
	    }

	    if (dirty) {
	      compute(labels);
	    }
	  },

	  lookup: function(labels, point) {
	    var i, state;

	    // IMPORTANT Iterate in the reverse order since items at the end of
	    // the list have an higher z-index, thus should be picked first.

	    for (i = labels.length - 1; i >= 0; --i) {
	      state = labels[i].$layout;

	      if (state && state._visible && state._box.contains(point)) {
	        return labels[i];
	      }
	    }

	    return null;
	  },

	  draw: function(chart, labels) {
	    var i, ilen, label, state, geometry, center;

	    for (i = 0, ilen = labels.length; i < ilen; ++i) {
	      label = labels[i];
	      state = label.$layout;

	      if (state._visible) {
	        geometry = label.geometry();
	        center = coordinates(label._el, label.model(), geometry);
	        state._box.update(center, geometry, label.rotation());
	        label.draw(chart, center);
	      }
	    }
	  }
	};

	var formatter = function(value) {
	  if (isNullOrUndef(value)) {
	    return null;
	  }

	  var label = value;
	  var keys, klen, k;
	  if (isObject(value)) {
	    if (!isNullOrUndef(value.label)) {
	      label = value.label;
	    } else if (!isNullOrUndef(value.r)) {
	      label = value.r;
	    } else {
	      label = '';
	      keys = Object.keys(value);
	      for (k = 0, klen = keys.length; k < klen; ++k) {
	        label += (k !== 0 ? ', ' : '') + keys[k] + ': ' + value[keys[k]];
	      }
	    }
	  }

	  return '' + label;
	};

	/**
	 * IMPORTANT: make sure to also update tests and TypeScript definition
	 * files (`/test/specs/defaults.spec.js` and `/types/options.d.ts`)
	 */

	var defaults = {
	  align: 'center',
	  anchor: 'center',
	  backgroundColor: null,
	  borderColor: null,
	  borderRadius: 0,
	  borderWidth: 0,
	  clamp: false,
	  clip: false,
	  color: undefined,
	  display: true,
	  font: {
	    family: undefined,
	    lineHeight: 1.2,
	    size: undefined,
	    style: undefined,
	    weight: null
	  },
	  formatter: formatter,
	  labels: undefined,
	  listeners: {},
	  offset: 4,
	  opacity: 1,
	  padding: {
	    top: 4,
	    right: 4,
	    bottom: 4,
	    left: 4
	  },
	  rotation: 0,
	  textAlign: 'start',
	  textStrokeColor: undefined,
	  textStrokeWidth: 0,
	  textShadowBlur: 0,
	  textShadowColor: undefined
	};

	/**
	 * @see https://github.com/chartjs/Chart.js/issues/4176
	 */

	var EXPANDO_KEY = '$datalabels';
	var DEFAULT_KEY = '$default';

	function configure(dataset, options) {
	  var override = dataset.datalabels;
	  var listeners = {};
	  var configs = [];
	  var labels, keys;

	  if (override === false) {
	    return null;
	  }
	  if (override === true) {
	    override = {};
	  }

	  options = merge({}, [options, override]);
	  labels = options.labels || {};
	  keys = Object.keys(labels);
	  delete options.labels;

	  if (keys.length) {
	    keys.forEach(function(key) {
	      if (labels[key]) {
	        configs.push(merge({}, [
	          options,
	          labels[key],
	          {_key: key}
	        ]));
	      }
	    });
	  } else {
	    // Default label if no "named" label defined.
	    configs.push(options);
	  }

	  // listeners: {<event-type>: {<label-key>: <fn>}}
	  listeners = configs.reduce(function(target, config) {
	    each(config.listeners || {}, function(fn, event) {
	      target[event] = target[event] || {};
	      target[event][config._key || DEFAULT_KEY] = fn;
	    });

	    delete config.listeners;
	    return target;
	  }, {});

	  return {
	    labels: configs,
	    listeners: listeners
	  };
	}

	function dispatchEvent(chart, listeners, label, event) {
	  if (!listeners) {
	    return;
	  }

	  var context = label.$context;
	  var groups = label.$groups;
	  var callback$1;

	  if (!listeners[groups._set]) {
	    return;
	  }

	  callback$1 = listeners[groups._set][groups._key];
	  if (!callback$1) {
	    return;
	  }

	  if (callback(callback$1, [context, event]) === true) {
	    // Users are allowed to tweak the given context by injecting values that can be
	    // used in scriptable options to display labels differently based on the current
	    // event (e.g. highlight an hovered label). That's why we update the label with
	    // the output context and schedule a new chart render by setting it dirty.
	    chart[EXPANDO_KEY]._dirty = true;
	    label.update(context);
	  }
	}

	function dispatchMoveEvents(chart, listeners, previous, label, event) {
	  var enter, leave;

	  if (!previous && !label) {
	    return;
	  }

	  if (!previous) {
	    enter = true;
	  } else if (!label) {
	    leave = true;
	  } else if (previous !== label) {
	    leave = enter = true;
	  }

	  if (leave) {
	    dispatchEvent(chart, listeners.leave, previous, event);
	  }
	  if (enter) {
	    dispatchEvent(chart, listeners.enter, label, event);
	  }
	}

	function handleMoveEvents(chart, event) {
	  var expando = chart[EXPANDO_KEY];
	  var listeners = expando._listeners;
	  var previous, label;

	  if (!listeners.enter && !listeners.leave) {
	    return;
	  }

	  if (event.type === 'mousemove') {
	    label = layout.lookup(expando._labels, event);
	  } else if (event.type !== 'mouseout') {
	    return;
	  }

	  previous = expando._hovered;
	  expando._hovered = label;
	  dispatchMoveEvents(chart, listeners, previous, label, event);
	}

	function handleClickEvents(chart, event) {
	  var expando = chart[EXPANDO_KEY];
	  var handlers = expando._listeners.click;
	  var label = handlers && layout.lookup(expando._labels, event);
	  if (label) {
	    dispatchEvent(chart, handlers, label, event);
	  }
	}

	var plugin = {
	  id: 'datalabels',

	  defaults: defaults,

	  beforeInit: function(chart) {
	    chart[EXPANDO_KEY] = {
	      _actives: []
	    };
	  },

	  beforeUpdate: function(chart) {
	    var expando = chart[EXPANDO_KEY];
	    expando._listened = false;
	    expando._listeners = {};     // {<event-type>: {<dataset-index>: {<label-key>: <fn>}}}
	    expando._datasets = [];      // per dataset labels: [Label[]]
	    expando._labels = [];        // layouted labels: Label[]
	  },

	  afterDatasetUpdate: function(chart, args, options) {
	    var datasetIndex = args.index;
	    var expando = chart[EXPANDO_KEY];
	    var labels = expando._datasets[datasetIndex] = [];
	    var visible = chart.isDatasetVisible(datasetIndex);
	    var dataset = chart.data.datasets[datasetIndex];
	    var config = configure(dataset, options);
	    var elements = args.meta.data || [];
	    var ctx = chart.ctx;
	    var i, j, ilen, jlen, cfg, key, el, label;

	    ctx.save();

	    for (i = 0, ilen = elements.length; i < ilen; ++i) {
	      el = elements[i];
	      el[EXPANDO_KEY] = [];

	      if (visible && el && chart.getDataVisibility(i) && !el.skip) {
	        for (j = 0, jlen = config.labels.length; j < jlen; ++j) {
	          cfg = config.labels[j];
	          key = cfg._key;

	          label = new Label(cfg, ctx, el, i);
	          label.$groups = {
	            _set: datasetIndex,
	            _key: key || DEFAULT_KEY
	          };
	          label.$context = {
	            active: false,
	            chart: chart,
	            dataIndex: i,
	            dataset: dataset,
	            datasetIndex: datasetIndex
	          };

	          label.update(label.$context);
	          el[EXPANDO_KEY].push(label);
	          labels.push(label);
	        }
	      }
	    }

	    ctx.restore();

	    // Store listeners at the chart level and per event type to optimize
	    // cases where no listeners are registered for a specific event.
	    merge(expando._listeners, config.listeners, {
	      merger: function(event, target, source) {
	        target[event] = target[event] || {};
	        target[event][args.index] = source[event];
	        expando._listened = true;
	      }
	    });
	  },

	  afterUpdate: function(chart) {
	    chart[EXPANDO_KEY]._labels = layout.prepare(chart[EXPANDO_KEY]._datasets);
	  },

	  // Draw labels on top of all dataset elements
	  // https://github.com/chartjs/chartjs-plugin-datalabels/issues/29
	  // https://github.com/chartjs/chartjs-plugin-datalabels/issues/32
	  afterDatasetsDraw: function(chart) {
	    layout.draw(chart, chart[EXPANDO_KEY]._labels);
	  },

	  beforeEvent: function(chart, args) {
	    // If there is no listener registered for this chart, `listened` will be false,
	    // meaning we can immediately ignore the incoming event and avoid useless extra
	    // computation for users who don't implement label interactions.
	    if (chart[EXPANDO_KEY]._listened) {
	      var event = args.event;
	      switch (event.type) {
	      case 'mousemove':
	      case 'mouseout':
	        handleMoveEvents(chart, event);
	        break;
	      case 'click':
	        handleClickEvents(chart, event);
	        break;
	      }
	    }
	  },

	  afterEvent: function(chart) {
	    var expando = chart[EXPANDO_KEY];
	    var previous = expando._actives;
	    var actives = expando._actives = chart.getActiveElements();
	    var updates = utils.arrayDiff(previous, actives);
	    var i, ilen, j, jlen, update, label, labels;

	    for (i = 0, ilen = updates.length; i < ilen; ++i) {
	      update = updates[i];
	      if (update[1]) {
	        labels = update[0].element[EXPANDO_KEY] || [];
	        for (j = 0, jlen = labels.length; j < jlen; ++j) {
	          label = labels[j];
	          label.$context.active = (update[1] === 1);
	          label.update(label.$context);
	        }
	      }
	    }

	    if (expando._dirty || updates.length) {
	      layout.update(expando._labels);
	      chart.render();
	    }

	    delete expando._dirty;
	  }
	};

	function createCumulativeStartEndRangesFromValues(array, base_value) {
	    var cumulative = 0;
	    return array.map(function (value, index) {
	        if (index === 0) {
	            cumulative = base_value;
	        }
	        var start = cumulative;
	        cumulative += value;
	        return [start, cumulative];
	    });
	}

	DeepDiveChart[FILENAME] = 'src/ce_mlflow_extension/templates/components/DeepDiveChart.svelte';

	var root$1 = add_locations(from_html(`<canvas class="svelte-1mf6xd3"></canvas>`), DeepDiveChart[FILENAME], [[403, 2]]);

	function DeepDiveChart($$anchor, $$props) {
		check_target(new.target);
		push($$props, true, DeepDiveChart);

		// import { colorMap } from '$lib/helpers/colormap';
		// Register the necessary components
		Chart.register(BarController, BarElement, CategoryScale, LinearScale, plugin_title, plugin_tooltip, plugin_legend, annotation);

		console.log("DeepDiveChart: Chart components registered");

		// For feature value mapping
		// Optional prop to determine if higher output is better
		prop($$props, 'featureEncodings', 19, () => [{}]);
			let isHigherOutputBetter = prop($$props, 'isHigherOutputBetter', 3, false);

		function setBaseValue(baseValues) {
			if (equals(baseValues.length, 2)) {
				base_value = baseValues[1];
			} else if (strict_equals(typeof baseValues, 'number')) {
				base_value = baseValues;
			} else if (baseValues.length > 1) {
				base_value = baseValues[0];
			} else {
				base_value = baseValues[0];
			}
		}

		// todo: we should check fi this is a regression or whatever type we are using and fix things for that
		let base_value;

		setBaseValue($$props.baseValues);
		console.log(...log_if_contains_state('log', "baseValues in DeepDiveChart", $$props.baseValues, base_value));

		let chart;
		let chartCanvas;
		let maxOfData;
		let minOfData;
		let pointBackgroundColor;
		let cumulativeValues;
		let maxCumulativeValue;

		function updateChart(singleShapValues, singleFeatureValues) {
			maxOfData = Math.max(...singleShapValues);
			minOfData = Math.min(...singleShapValues);

			// Color mapping based on isHigherOutputBetter prop
			pointBackgroundColor = singleShapValues.map((d) => {
				const normalizedValue = (d - minOfData) / (maxOfData - minOfData) * 100;

				// If higher output is better, use inverted color mapping (green=high, red=low)
				// If higher output is NOT better, use normal color mapping (red=high, green=low)
				const colorValue = isHigherOutputBetter() ? 100 - normalizedValue : normalizedValue;

				// return colorMap(colorValue);
				return colorValue;
			});

			console.log(...log_if_contains_state('log', "Max of Data", maxOfData));
			console.log(...log_if_contains_state('log', "Min of Data", minOfData));

			if (chart) {
				chart.data.labels = $$props.featureNames;
				cumulativeValues = createCumulativeStartEndRangesFromValues(singleShapValues, base_value);
				chart.data.datasets[0].data = cumulativeValues;
				maxCumulativeValue = Math.max(...cumulativeValues.map((d) => d[1]));
				console.log(...log_if_contains_state('log', "Max Cumulative Value", maxCumulativeValue));

				// chart.data.datasets[0].data[0][0] += base_value;
				chart.data.datasets[0].backgroundColor = pointBackgroundColor;

				// Update x-axis rotation based on screen size
				if (chart.options.scales?.x?.ticks) {
					const isLargeScreen = window.innerWidth >= 1720;
					const isMediumScreen = window.innerWidth < 1024;

					chart.options.scales.x.ticks.maxRotation = isLargeScreen ? 45 : 90;
					chart.options.scales.x.ticks.minRotation = isLargeScreen ? 0 : 90;
					chart.options.scales.x.ticks.font = { size: window.innerWidth < 768 ? 8 : isMediumScreen ? 10 : 12 };
				}

				// Update y-axis font size
				if (chart.options.scales?.y?.ticks) {
					const isSmallScreen = window.innerWidth < 768;
					const isMediumScreen = window.innerWidth < 1024;

					chart.options.scales.y.ticks.font = { size: isSmallScreen ? 8 : isMediumScreen ? 10 : 12 };
				}

				// Update layout padding
				if (chart.options.layout?.padding) {
					const isSmallScreen = window.innerWidth < 768;

					chart.options.layout.padding = {
						top: isSmallScreen ? 40 : 60,
						bottom: isSmallScreen ? 5 : 10,
						left: isSmallScreen ? 5 : 10,
						right: isSmallScreen ? 5 : 10
					};
				}

				// Update datalabels font size and offset
				if (chart.options.plugins?.datalabels) {
					const isLargeScreen = window.innerWidth >= 1560;
					const isSmallScreen = window.innerWidth < 768;
					const isMediumScreen = window.innerWidth < 1024;

					chart.options.plugins.datalabels.display = isLargeScreen; // Only show on large screens

					chart.options.plugins.datalabels.font = {
						weight: 'bold',
						size: isSmallScreen ? 8 : isMediumScreen ? 9 : 10
					};

					chart.options.plugins.datalabels.offset = isSmallScreen ? 2 : 5;
				}

				chart.update();
			}
		}

		let featureValuesSorted = [];

		user_effect(() => updateChart($$props.shapValues[$$props.observationIndex], $$props.featureValues[$$props.observationIndex]));

		// Handle screen resize for responsive label rotation
		function handleResize() {
			if (chart && chart.options.scales?.x?.ticks) {
				const isLargeScreen = window.innerWidth >= 1560;
				const isSmallScreen = window.innerWidth < 768;
				const isMediumScreen = window.innerWidth < 1024;

				// Update x-axis
				chart.options.scales.x.ticks.maxRotation = isLargeScreen ? 45 : 90;

				chart.options.scales.x.ticks.minRotation = isLargeScreen ? 0 : 90;
				chart.options.scales.x.ticks.font = { size: isSmallScreen ? 8 : isMediumScreen ? 10 : 12 };

				// Update y-axis
				if (chart.options.scales?.y?.ticks) {
					chart.options.scales.y.ticks.font = { size: isSmallScreen ? 8 : isMediumScreen ? 10 : 12 };
				}

				// Update layout padding
				if (chart.options.layout?.padding) {
					chart.options.layout.padding = {
						top: isSmallScreen ? 40 : 60,
						bottom: isSmallScreen ? 5 : 10,
						left: isSmallScreen ? 5 : 10,
						right: isSmallScreen ? 5 : 10
					};
				}

				// Update datalabels
				if (chart.options.plugins?.datalabels) {
					chart.options.plugins.datalabels.display = isLargeScreen; // Only show on large screens

					chart.options.plugins.datalabels.font = {
						weight: 'bold',
						size: isSmallScreen ? 8 : isMediumScreen ? 9 : 10
					};

					chart.options.plugins.datalabels.offset = isSmallScreen ? 2 : 5;
				}

				chart.update('none'); // Update without animation for smoother resize
			}
		}

		onMount(() => {
			// sort feature names by featureOrder
			// let sortedFeatureNames = explanationSummary.sort((a, b) => b.importance - a.importance).map((d) => d.feature_name);
			// let sortedFeatures = modelFeatures.sort((a, b) => sortedFeatureNames.indexOf(a.feature_name) - sortedFeatureNames.indexOf(b.feature_name));
			// let sortedIdx = modelFeatures.sort((a, b) => sortedFeatureNames.indexOf(a.feature_name) - sortedFeatureNames.indexOf(b.feature_name)).map((d) => d.feature_order);
			//  const sortedFeatures = modelFeatures.sort((a, b) => a.feature_order - b.feature_order
			//                                          );
			//  
			maxOfData = Math.max(...$$props.shapValues[0]);

			minOfData = Math.min(...$$props.shapValues[0]);

			// Color mapping based on isHigherOutputBetter prop
			pointBackgroundColor = $$props.shapValues.map((d) => {
				const normalizedValue = (d - minOfData) / (maxOfData - minOfData) * 100;

				// If higher output is better, use inverted color mapping (green=high, red=low)
				// If higher output is NOT better, use normal color mapping (red=high, green=low)
				const colorValue = isHigherOutputBetter() ? 100 - normalizedValue : normalizedValue;

				// return colorMap(colorValue);
				return colorValue;
			});

			const data = {
				labels: $$props.featureNames,

				datasets: [
					{
						label: 'SHAP Values',
						data: createCumulativeStartEndRangesFromValues($$props.shapValues, base_value),
						pointBackgroundColor
					}
				]
			};

			console.log(...log_if_contains_state('log', "IN DEEPDIVE data", data));

			const config = {
				type: 'bar',
				plugins: [plugin],
				data,

				options: {
					indexAxis: 'x', // This makes the bar chart vertical

					layout: {
						padding: {
							top: window.innerWidth < 768 ? 40 : 60,
							bottom: window.innerWidth < 768 ? 5 : 10,
							left: window.innerWidth < 768 ? 5 : 10,
							right: window.innerWidth < 768 ? 5 : 10
						}
					},

					scales: {
						x: {
							beginAtZero: true,

							ticks: {
								maxRotation: window.innerWidth < 1980 ? 90 : 45,
								minRotation: window.innerWidth < 1980 ? 90 : 0,

								font: {
									size: window.innerWidth < 768 ? 8 : window.innerWidth < 1024 ? 10 : 12
								}
							}
						},

						y: {
							min: 0,
							max: Math.floor(maxCumulativeValue * 1.3),

							ticks: {
								font: {
									size: window.innerWidth < 768 ? 8 : window.innerWidth < 1024 ? 10 : 12
								}
							}
						}
					},

					plugins: {
						legend: { display: false },

						annotation: {
							annotations: {
								baseline: {
									type: 'line',
									yMin: base_value,
									yMax: base_value,
									borderColor: 'rgb(255, 99, 132)',
									borderWidth: 2,
									borderDash: [6, 6],
									label: { enabled: true, content: 'Baseline', position: 'end' }
								}
							}
						},

						datalabels: {
							display: window.innerWidth >= 1980, // Only show on large screens
							clamp: true,
							anchor: 'end',
							align: 'top',
							color: '#737373',

							font: {
								weight: 'bold',
								size: window.innerWidth < 768 ? 8 : window.innerWidth < 1024 ? 9 : 10
							},

							offset: window.innerWidth < 768 ? 2 : 5,

							formatter(value, context) {
								const index = context.dataIndex;

								// const description = featureDescriptions[index]; // Description not needed for datalabel
								let featureValue = featureValuesSorted[index];

								if (strict_equals(featureValueNameMapping[index], null, false)) {
									// ... existing console logs ...
									featureValue = featureValueNameMapping[index][featureValue];
								}

								let diff = value[1] - value[0];

								const shapLabel = diff > 0
									? `▲ ${Math.round(diff * 100) / 100}`
									: `▼ ${Math.round(diff * 100) / 100}`;

								// Helper function to break text into lines with max 10 characters each
								function breakTextIntoLines(text, maxCharsPerLine = 10) {
									if (text.length <= maxCharsPerLine) {
										return [text];
									}

									const lines = [];
									const words = text.split(/[\s-_/]+/); // Split on whitespace, hyphens, underscores, slashes
									let currentLine = '';

									for (const word of words) {
										if (word.length > maxCharsPerLine) {
											// If word itself is too long, break it
											if (currentLine) {
												lines.push(currentLine);
												currentLine = '';
											}

											// Break long word into chunks
											for (let i = 0; i < word.length; i += maxCharsPerLine) {
												lines.push(word.slice(i, i + maxCharsPerLine));
											}
										} else if ((currentLine + (currentLine ? ' ' : '') + word).length <= maxCharsPerLine) {
											currentLine += (currentLine ? ' ' : '') + word;
										} else {
											if (currentLine) {
												lines.push(currentLine);
											}

											currentLine = word;
										}
									}

									if (currentLine) {
										lines.push(currentLine);
									}

									return lines;
								}

								// Convert featureValue to string and break into lines
								const featureValueStr = String(featureValue);

								const featureLines = breakTextIntoLines(featureValueStr, 10);

								// Limit number of lines on small screens
								const maxLines = window.innerWidth < 768 ? 2 : 3;

								const displayLines = featureLines.slice(0, maxLines);

								return [shapLabel, ...displayLines];
							}
						},

						tooltip: {
							callbacks: {
								label(context) {
									const index = context.dataIndex;
									const description = featureDescriptions[index];
									let featureValue = featureValuesSorted[index];
									let displayValue = featureValue; // Use a different variable for display

									if (strict_equals(featureValueNameMapping[index], null, false)) {
										// console.log("IN DEEPDIVE json_information", featureValueNameMapping[index], featureValue);
										// console.log("IN DEEPDIVE featureValueNameMapping", featureValue);
										displayValue = featureValueNameMapping[index][featureValue];
									}

									// Calculate the difference for the SHAP value display
									let diff = 0;

									if (Array.isArray(context.raw) && strict_equals(context.raw.length, 2)) {
										diff = context.raw[1] - context.raw[0];
									}

									// Display the difference in the tooltip, not the raw range
									const shapLabel = `${context.dataset.label}: ${Math.round(diff * 100) / 100}`;

									// Ensure displayValue is a string for the tooltip line
									return [shapLabel, `${description}: ${String(displayValue)}`];
								}
							}
						}
					}
				}
			};

			chart = new Chart(chartCanvas, config);
			updateChart(modelFeatures, explanationDetail);

			// Add resize event listener
			window.addEventListener('resize', handleResize);
		});

		onDestroy(() => {
			// Remove resize event listener
			window.removeEventListener('resize', handleResize);

			if (chart) {
				chart.destroy();
			}
		});

		var canvas = root$1();

		bind_this(canvas, ($$value) => chartCanvas = $$value, () => chartCanvas);
		append($$anchor, canvas);

		return pop({ ...legacy_api() });
	}

	DeepDiveManager[FILENAME] = 'src/ce_mlflow_extension/templates/components/DeepDiveManager.svelte';

	var root_1 = add_locations(from_html(`<option> </option>`), DeepDiveManager[FILENAME], [[65, 12]]);
	var root = add_locations(from_html(`<div class="observation-dropdown"><label for="observation-select">Select Observation:</label> <select id="observation-select"></select> <button>Prev</button> <button>Next</button></div> <!>`, 1), DeepDiveManager[FILENAME], [[61, 0, [[62, 4], [63, 4], [68, 4], [69, 4]]]]);

	function DeepDiveManager($$anchor, $$props) {
		check_target(new.target);
		push($$props, true, DeepDiveManager);

		// For feature value mapping
		// Optional prop to determine if higher output is better
		// Optional prop for feature names
		const maxDisplayedValues = 10;

		let featureEncodings = prop($$props, 'featureEncodings', 19, () => [{}]),
			isHigherOutputBetter = prop($$props, 'isHigherOutputBetter', 3, false),
			featureNames = prop($$props, 'featureNames', 19, () => []);

		let selectedObservationIndex = tag(state(0), 'selectedObservationIndex');
		let currentPage = tag(state(0), 'currentPage');
		let totalObservations = $$props.shapValues.length;
		let totalPages = Math.ceil(totalObservations / maxDisplayedValues);

		let pagedObservations = tag(
			user_derived(() => Array.from(
				{
					length: Math.min(maxDisplayedValues, totalObservations - get(currentPage) * maxDisplayedValues)
				},
				(_, i) => {
					const idx = i + get(currentPage) * maxDisplayedValues;

					return { name: `Observation ${idx + 1}`, index: idx };
				}
			)),
			'pagedObservations'
		);

		function nextPage() {
			if (get(currentPage) < totalPages - 1) {
				set$1(currentPage, get(currentPage) + 1);
			}
		}

		function prevPage() {
			if (get(currentPage) > 0) {
				set$1(currentPage, get(currentPage) - 1);
			}
		}

		user_effect(() => {
			console.log(...log_if_contains_state('log', 'Selected observation index:', get(selectedObservationIndex)));
			console.log(...log_if_contains_state('log', 'Current page:', get(currentPage)));
			console.log(...log_if_contains_state('log', 'Total pages:', totalPages));
		});

		var fragment = root();
		var div = first_child(fragment);
		var select = sibling(child(div), 2);

		add_svelte_meta(
			() => each$1(select, 21, () => get(pagedObservations), index, ($$anchor, obs) => {
				var option = root_1();
				var text = child(option, true);

				reset(option);

				var option_value = {};

				template_effect(() => {
					set_text(text, get(obs).name);

					if (option_value !== (option_value = get(obs).index)) {
						option.value = (option.__value = get(obs).index) ?? '';
					}
				});

				append($$anchor, option);
			}),
			'each',
			DeepDiveManager,
			64,
			8
		);

		var button = sibling(select, 2);
		var button_1 = sibling(button, 2);

		var node = sibling(div, 2);

		add_svelte_meta(
			() => DeepDiveChart(node, {
				get shapValues() {
					return $$props.shapValues;
				},

				get featureValues() {
					return $$props.featureValues;
				},

				get selectedFeatureIndex() {
					return $$props.selectedFeatureIndex;
				},

				get selectedFeature() {
					return $$props.selectedFeature;
				},

				get baseValues() {
					return $$props.baseValues;
				},

				get featureEncodings() {
					return featureEncodings();
				},

				get isHigherOutputBetter() {
					return isHigherOutputBetter();
				},

				get featureNames() {
					return featureNames();
				}
			}),
			'component',
			DeepDiveManager,
			71,
			0,
			{ componentTag: 'DeepDiveChart' }
		);

		template_effect(() => {
			button.disabled = strict_equals(get(currentPage), 0);
			button_1.disabled = strict_equals(get(currentPage), totalPages - 1);
		});

		bind_select_value(select, () => get(selectedObservationIndex), ($$value) => set$1(selectedObservationIndex, $$value));
		event('click', button, prevPage);
		event('click', button_1, nextPage);
		append($$anchor, fragment);

		return pop({ ...legacy_api() });
	}

	// Development entry point for testing Svelte components

	// Export components immediately
	window.DevComponents = {
	  ChartManager,
	  ImportanceChart2,
	  ScatterShapValues,
	  DeepDiveManager,
	  DeepDiveChart
	};

	// Export Svelte 5 mount function
	window.mount = mount;

	// Function to load data asynchronously
	async function loadTestData() {
	  let testReportData = null;
	  let sampleImportanceData = [];
	  let sampleShapValues = [];
	  let sampleFeatureValues = [];
	  let sampleBaseValues = [];
	  let sampleFeatureEncodings = {};

	  try {
	    // Fetch the test data file
	    const response = await fetch('../test_report_data.json');
	    if (response.ok) {
	      testReportData = await response.json();
	      console.log('Loaded test report data:', testReportData);
	      
	      // Extract and transform data from the loaded JSON
	      if (testReportData.importance_data && testReportData.importance_data.features && testReportData.importance_data.values) {
	        // Transform importance data to the expected format
	        sampleImportanceData = testReportData.importance_data.features.map((feature, index) => ({
	          feature_name: feature,
	          importance: testReportData.importance_data.values[index]
	        }));
	      } else {
	        sampleImportanceData = [];
	      }
	      
	      console.log("Feature Encodings", testReportData.feature_encodings );
	      
	      sampleShapValues = testReportData.shap_values || [];
	      sampleFeatureValues = testReportData.feature_values || [];
	      sampleBaseValues = testReportData.base_values || [];
	      sampleFeatureEncodings = testReportData.feature_encodings || {};
	      
	      console.log('Parsed data:');
	      console.log('- Importance data:', sampleImportanceData);
	      console.log('- SHAP values (sample):', sampleShapValues.slice(0, 3));
	      console.log('- Feature values (sample):', sampleFeatureValues.slice(0, 3));
	      console.log('- Base values (sample):', sampleBaseValues.slice(0, 3));
	      console.log('- Feature encodings:', sampleFeatureEncodings);
	    } else {
	      throw new Error(`Failed to load test data: ${response.status}`);
	    }
	  } catch (error) {
	    console.warn('Could not load test_report_data.json, using fallback data:', error);
	  }

	  return {
	    sampleImportanceData,
	    sampleShapValues,
	    sampleFeatureValues,
	    sampleBaseValues,
	    sampleFeatureEncodings
	  };
	}

	// Make data loading function available globally
	window.loadTestData = loadTestData;

	console.log('Development components loaded:', Object.keys(window.DevComponents));
	console.log('Svelte mount function available:', typeof window.mount);
	console.log('Test data loader available:', typeof window.loadTestData);

})();
//# sourceMappingURL=bundle.js.map
